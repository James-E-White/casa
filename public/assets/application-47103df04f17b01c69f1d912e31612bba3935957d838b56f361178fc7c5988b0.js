(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/jquery/dist/jquery.js
  var require_jquery = __commonJS({
    "node_modules/jquery/dist/jquery.js"(exports, module) {
      (function(global2, factory) {
        "use strict";
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = global2.document ? factory(global2, true) : function(w) {
            if (!w.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return factory(w);
          };
        } else {
          factory(global2);
        }
      })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
        "use strict";
        var arr = [];
        var getProto = Object.getPrototypeOf;
        var slice = arr.slice;
        var flat = arr.flat ? function(array) {
          return arr.flat.call(array);
        } : function(array) {
          return arr.concat.apply([], array);
        };
        var push = arr.push;
        var indexOf = arr.indexOf;
        var class2type = {};
        var toString = class2type.toString;
        var hasOwn = class2type.hasOwnProperty;
        var fnToString = hasOwn.toString;
        var ObjectFunctionString = fnToString.call(Object);
        var support = {};
        var isFunction = function isFunction2(obj) {
          return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
        };
        var isWindow = function isWindow2(obj) {
          return obj != null && obj === obj.window;
        };
        var document2 = window2.document;
        var preservedScriptAttributes = {
          type: true,
          src: true,
          nonce: true,
          noModule: true
        };
        function DOMEval(code, node, doc) {
          doc = doc || document2;
          var i, val, script = doc.createElement("script");
          script.text = code;
          if (node) {
            for (i in preservedScriptAttributes) {
              val = node[i] || node.getAttribute && node.getAttribute(i);
              if (val) {
                script.setAttribute(i, val);
              }
            }
          }
          doc.head.appendChild(script).parentNode.removeChild(script);
        }
        function toType2(obj) {
          if (obj == null) {
            return obj + "";
          }
          return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        }
        var version = "3.6.4", jQuery2 = function(selector, context) {
          return new jQuery2.fn.init(selector, context);
        };
        jQuery2.fn = jQuery2.prototype = {
          // The current version of jQuery being used
          jquery: version,
          constructor: jQuery2,
          // The default length of a jQuery object is 0
          length: 0,
          toArray: function() {
            return slice.call(this);
          },
          // Get the Nth element in the matched element set OR
          // Get the whole matched element set as a clean array
          get: function(num) {
            if (num == null) {
              return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
          },
          // Take an array of elements and push it onto the stack
          // (returning the new matched element set)
          pushStack: function(elems) {
            var ret = jQuery2.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
          },
          // Execute a callback for every element in the matched set.
          each: function(callback) {
            return jQuery2.each(this, callback);
          },
          map: function(callback) {
            return this.pushStack(jQuery2.map(this, function(elem, i) {
              return callback.call(elem, i, elem);
            }));
          },
          slice: function() {
            return this.pushStack(slice.apply(this, arguments));
          },
          first: function() {
            return this.eq(0);
          },
          last: function() {
            return this.eq(-1);
          },
          even: function() {
            return this.pushStack(jQuery2.grep(this, function(_elem, i) {
              return (i + 1) % 2;
            }));
          },
          odd: function() {
            return this.pushStack(jQuery2.grep(this, function(_elem, i) {
              return i % 2;
            }));
          },
          eq: function(i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
          },
          end: function() {
            return this.prevObject || this.constructor();
          },
          // For internal use only.
          // Behaves like an Array's method, not like a jQuery method.
          push,
          sort: arr.sort,
          splice: arr.splice
        };
        jQuery2.extend = jQuery2.fn.extend = function() {
          var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
          if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++;
          }
          if (typeof target !== "object" && !isFunction(target)) {
            target = {};
          }
          if (i === length) {
            target = this;
            i--;
          }
          for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
              for (name in options) {
                copy = options[name];
                if (name === "__proto__" || target === copy) {
                  continue;
                }
                if (deep && copy && (jQuery2.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                  src = target[name];
                  if (copyIsArray && !Array.isArray(src)) {
                    clone = [];
                  } else if (!copyIsArray && !jQuery2.isPlainObject(src)) {
                    clone = {};
                  } else {
                    clone = src;
                  }
                  copyIsArray = false;
                  target[name] = jQuery2.extend(deep, clone, copy);
                } else if (copy !== void 0) {
                  target[name] = copy;
                }
              }
            }
          }
          return target;
        };
        jQuery2.extend({
          // Unique for each copy of jQuery on the page
          expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
          // Assume jQuery is ready without the ready module
          isReady: true,
          error: function(msg) {
            throw new Error(msg);
          },
          noop: function() {
          },
          isPlainObject: function(obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== "[object Object]") {
              return false;
            }
            proto = getProto(obj);
            if (!proto) {
              return true;
            }
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
          },
          isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
              return false;
            }
            return true;
          },
          // Evaluates a script in a provided context; falls back to the global one
          // if not specified.
          globalEval: function(code, options, doc) {
            DOMEval(code, { nonce: options && options.nonce }, doc);
          },
          each: function(obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
              length = obj.length;
              for (; i < length; i++) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                if (callback.call(obj[i], i, obj[i]) === false) {
                  break;
                }
              }
            }
            return obj;
          },
          // results is for internal usage only
          makeArray: function(arr2, results) {
            var ret = results || [];
            if (arr2 != null) {
              if (isArrayLike(Object(arr2))) {
                jQuery2.merge(
                  ret,
                  typeof arr2 === "string" ? [arr2] : arr2
                );
              } else {
                push.call(ret, arr2);
              }
            }
            return ret;
          },
          inArray: function(elem, arr2, i) {
            return arr2 == null ? -1 : indexOf.call(arr2, elem, i);
          },
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          merge: function(first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
              first[i++] = second[j];
            }
            first.length = i;
            return first;
          },
          grep: function(elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
              callbackInverse = !callback(elems[i], i);
              if (callbackInverse !== callbackExpect) {
                matches.push(elems[i]);
              }
            }
            return matches;
          },
          // arg is for internal usage only
          map: function(elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
              length = elems.length;
              for (; i < length; i++) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            } else {
              for (i in elems) {
                value = callback(elems[i], i, arg);
                if (value != null) {
                  ret.push(value);
                }
              }
            }
            return flat(ret);
          },
          // A global GUID counter for objects
          guid: 1,
          // jQuery.support is not used in Core but other projects attach their
          // properties to it so it needs to exist.
          support
        });
        if (typeof Symbol === "function") {
          jQuery2.fn[Symbol.iterator] = arr[Symbol.iterator];
        }
        jQuery2.each(
          "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
          function(_i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
          }
        );
        function isArrayLike(obj) {
          var length = !!obj && "length" in obj && obj.length, type = toType2(obj);
          if (isFunction(obj) || isWindow(obj)) {
            return false;
          }
          return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
        }
        var Sizzle = (
          /*!
           * Sizzle CSS Selector Engine v2.3.10
           * https://sizzlejs.com/
           *
           * Copyright JS Foundation and other contributors
           * Released under the MIT license
           * https://js.foundation/
           *
           * Date: 2023-02-14
           */
          function(window3) {
            var i, support2, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document3, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains2, expando = "sizzle" + 1 * /* @__PURE__ */ new Date(), preferredDoc = window3.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
              if (a === b) {
                hasDuplicate = true;
              }
              return 0;
            }, hasOwn2 = {}.hasOwnProperty, arr2 = [], pop = arr2.pop, pushNative = arr2.push, push2 = arr2.push, slice2 = arr2.slice, indexOf2 = function(list, elem) {
              var i2 = 0, len = list.length;
              for (; i2 < len; i2++) {
                if (list[i2] === elem) {
                  return i2;
                }
              }
              return -1;
            }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace2 = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace2 + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace2 + "*(" + identifier + ")(?:" + whitespace2 + // Operator (capture 2)
            "*([*^$|!~]?=)" + whitespace2 + // "Attribute values must be CSS identifiers [capture 5]
            // or strings [capture 3 or capture 4]"
            `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace2 + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace2 + "+", "g"), rtrim2 = new RegExp("^" + whitespace2 + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace2 + "+$", "g"), rcomma = new RegExp("^" + whitespace2 + "*," + whitespace2 + "*"), rleadingCombinator = new RegExp("^" + whitespace2 + "*([>+~]|" + whitespace2 + ")" + whitespace2 + "*"), rdescend = new RegExp(whitespace2 + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
              "ID": new RegExp("^#(" + identifier + ")"),
              "CLASS": new RegExp("^\\.(" + identifier + ")"),
              "TAG": new RegExp("^(" + identifier + "|[*])"),
              "ATTR": new RegExp("^" + attributes),
              "PSEUDO": new RegExp("^" + pseudos),
              "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace2 + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace2 + "*(?:([+-]|)" + whitespace2 + "*(\\d+)|))" + whitespace2 + "*\\)|)", "i"),
              "bool": new RegExp("^(?:" + booleans + ")$", "i"),
              // For use in libraries implementing .is()
              // We use this for POS matching in `select`
              "needsContext": new RegExp("^" + whitespace2 + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace2 + "*((?:-\\d)?\\d*)" + whitespace2 + "*\\)|)(?=[^-]|$)", "i")
            }, rhtml2 = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace2 + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
              var high = "0x" + escape.slice(1) - 65536;
              return nonHex ? (
                // Strip the backslash prefix from a non-hex escape sequence
                nonHex
              ) : (
                // Replace a hexadecimal escape sequence with the encoded Unicode code point
                // Support: IE <=11+
                // For values outside the Basic Multilingual Plane (BMP), manually construct a
                // surrogate pair
                high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
              );
            }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function(ch, asCodePoint) {
              if (asCodePoint) {
                if (ch === "\0") {
                  return "\uFFFD";
                }
                return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
              }
              return "\\" + ch;
            }, unloadHandler = function() {
              setDocument();
            }, inDisabledFieldset = addCombinator(
              function(elem) {
                return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
              },
              { dir: "parentNode", next: "legend" }
            );
            try {
              push2.apply(
                arr2 = slice2.call(preferredDoc.childNodes),
                preferredDoc.childNodes
              );
              arr2[preferredDoc.childNodes.length].nodeType;
            } catch (e) {
              push2 = {
                apply: arr2.length ? (
                  // Leverage slice if possible
                  function(target, els) {
                    pushNative.apply(target, slice2.call(els));
                  }
                ) : (
                  // Support: IE<9
                  // Otherwise append directly
                  function(target, els) {
                    var j = target.length, i2 = 0;
                    while (target[j++] = els[i2++]) {
                    }
                    target.length = j - 1;
                  }
                )
              };
            }
            function Sizzle2(selector, context, results, seed) {
              var m, i2, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
              results = results || [];
              if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
              }
              if (!seed) {
                setDocument(context);
                context = context || document3;
                if (documentIsHTML) {
                  if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                    if (m = match[1]) {
                      if (nodeType === 9) {
                        if (elem = context.getElementById(m)) {
                          if (elem.id === m) {
                            results.push(elem);
                            return results;
                          }
                        } else {
                          return results;
                        }
                      } else {
                        if (newContext && (elem = newContext.getElementById(m)) && contains2(context, elem) && elem.id === m) {
                          results.push(elem);
                          return results;
                        }
                      }
                    } else if (match[2]) {
                      push2.apply(results, context.getElementsByTagName(selector));
                      return results;
                    } else if ((m = match[3]) && support2.getElementsByClassName && context.getElementsByClassName) {
                      push2.apply(results, context.getElementsByClassName(m));
                      return results;
                    }
                  }
                  if (support2.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && // Support: IE 8 only
                  // Exclude object elements
                  (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
                    newSelector = selector;
                    newContext = context;
                    if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
                      newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                      if (newContext !== context || !support2.scope) {
                        if (nid = context.getAttribute("id")) {
                          nid = nid.replace(rcssescape, fcssescape);
                        } else {
                          context.setAttribute("id", nid = expando);
                        }
                      }
                      groups = tokenize(selector);
                      i2 = groups.length;
                      while (i2--) {
                        groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                      }
                      newSelector = groups.join(",");
                    }
                    try {
                      push2.apply(
                        results,
                        newContext.querySelectorAll(newSelector)
                      );
                      return results;
                    } catch (qsaError) {
                      nonnativeSelectorCache(selector, true);
                    } finally {
                      if (nid === expando) {
                        context.removeAttribute("id");
                      }
                    }
                  }
                }
              }
              return select(selector.replace(rtrim2, "$1"), context, results, seed);
            }
            function createCache() {
              var keys = [];
              function cache(key, value) {
                if (keys.push(key + " ") > Expr.cacheLength) {
                  delete cache[keys.shift()];
                }
                return cache[key + " "] = value;
              }
              return cache;
            }
            function markFunction(fn2) {
              fn2[expando] = true;
              return fn2;
            }
            function assert(fn2) {
              var el = document3.createElement("fieldset");
              try {
                return !!fn2(el);
              } catch (e) {
                return false;
              } finally {
                if (el.parentNode) {
                  el.parentNode.removeChild(el);
                }
                el = null;
              }
            }
            function addHandle(attrs, handler) {
              var arr3 = attrs.split("|"), i2 = arr3.length;
              while (i2--) {
                Expr.attrHandle[arr3[i2]] = handler;
              }
            }
            function siblingCheck(a, b) {
              var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
              if (diff) {
                return diff;
              }
              if (cur) {
                while (cur = cur.nextSibling) {
                  if (cur === b) {
                    return -1;
                  }
                }
              }
              return a ? 1 : -1;
            }
            function createInputPseudo(type) {
              return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type;
              };
            }
            function createButtonPseudo(type) {
              return function(elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type;
              };
            }
            function createDisabledPseudo(disabled) {
              return function(elem) {
                if ("form" in elem) {
                  if (elem.parentNode && elem.disabled === false) {
                    if ("label" in elem) {
                      if ("label" in elem.parentNode) {
                        return elem.parentNode.disabled === disabled;
                      } else {
                        return elem.disabled === disabled;
                      }
                    }
                    return elem.isDisabled === disabled || // Where there is no isDisabled, check manually
                    /* jshint -W018 */
                    elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                  }
                  return elem.disabled === disabled;
                } else if ("label" in elem) {
                  return elem.disabled === disabled;
                }
                return false;
              };
            }
            function createPositionalPseudo(fn2) {
              return markFunction(function(argument) {
                argument = +argument;
                return markFunction(function(seed, matches2) {
                  var j, matchIndexes = fn2([], seed.length, argument), i2 = matchIndexes.length;
                  while (i2--) {
                    if (seed[j = matchIndexes[i2]]) {
                      seed[j] = !(matches2[j] = seed[j]);
                    }
                  }
                });
              });
            }
            function testContext(context) {
              return context && typeof context.getElementsByTagName !== "undefined" && context;
            }
            support2 = Sizzle2.support = {};
            isXML = Sizzle2.isXML = function(elem) {
              var namespace = elem && elem.namespaceURI, docElem2 = elem && (elem.ownerDocument || elem).documentElement;
              return !rhtml2.test(namespace || docElem2 && docElem2.nodeName || "HTML");
            };
            setDocument = Sizzle2.setDocument = function(node) {
              var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
              if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
                return document3;
              }
              document3 = doc;
              docElem = document3.documentElement;
              documentIsHTML = !isXML(document3);
              if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
                if (subWindow.addEventListener) {
                  subWindow.addEventListener("unload", unloadHandler, false);
                } else if (subWindow.attachEvent) {
                  subWindow.attachEvent("onunload", unloadHandler);
                }
              }
              support2.scope = assert(function(el) {
                docElem.appendChild(el).appendChild(document3.createElement("div"));
                return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
              });
              support2.cssHas = assert(function() {
                try {
                  document3.querySelector(":has(*,:jqfake)");
                  return false;
                } catch (e) {
                  return true;
                }
              });
              support2.attributes = assert(function(el) {
                el.className = "i";
                return !el.getAttribute("className");
              });
              support2.getElementsByTagName = assert(function(el) {
                el.appendChild(document3.createComment(""));
                return !el.getElementsByTagName("*").length;
              });
              support2.getElementsByClassName = rnative.test(document3.getElementsByClassName);
              support2.getById = assert(function(el) {
                docElem.appendChild(el).id = expando;
                return !document3.getElementsByName || !document3.getElementsByName(expando).length;
              });
              if (support2.getById) {
                Expr.filter["ID"] = function(id) {
                  var attrId = id.replace(runescape, funescape);
                  return function(elem) {
                    return elem.getAttribute("id") === attrId;
                  };
                };
                Expr.find["ID"] = function(id, context) {
                  if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                    var elem = context.getElementById(id);
                    return elem ? [elem] : [];
                  }
                };
              } else {
                Expr.filter["ID"] = function(id) {
                  var attrId = id.replace(runescape, funescape);
                  return function(elem) {
                    var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                    return node2 && node2.value === attrId;
                  };
                };
                Expr.find["ID"] = function(id, context) {
                  if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                    var node2, i2, elems, elem = context.getElementById(id);
                    if (elem) {
                      node2 = elem.getAttributeNode("id");
                      if (node2 && node2.value === id) {
                        return [elem];
                      }
                      elems = context.getElementsByName(id);
                      i2 = 0;
                      while (elem = elems[i2++]) {
                        node2 = elem.getAttributeNode("id");
                        if (node2 && node2.value === id) {
                          return [elem];
                        }
                      }
                    }
                    return [];
                  }
                };
              }
              Expr.find["TAG"] = support2.getElementsByTagName ? function(tag, context) {
                if (typeof context.getElementsByTagName !== "undefined") {
                  return context.getElementsByTagName(tag);
                } else if (support2.qsa) {
                  return context.querySelectorAll(tag);
                }
              } : function(tag, context) {
                var elem, tmp = [], i2 = 0, results = context.getElementsByTagName(tag);
                if (tag === "*") {
                  while (elem = results[i2++]) {
                    if (elem.nodeType === 1) {
                      tmp.push(elem);
                    }
                  }
                  return tmp;
                }
                return results;
              };
              Expr.find["CLASS"] = support2.getElementsByClassName && function(className, context) {
                if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                  return context.getElementsByClassName(className);
                }
              };
              rbuggyMatches = [];
              rbuggyQSA = [];
              if (support2.qsa = rnative.test(document3.querySelectorAll)) {
                assert(function(el) {
                  var input;
                  docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\r\\' msallowcapture=''><option selected=''></option></select>";
                  if (el.querySelectorAll("[msallowcapture^='']").length) {
                    rbuggyQSA.push("[*^$]=" + whitespace2 + `*(?:''|"")`);
                  }
                  if (!el.querySelectorAll("[selected]").length) {
                    rbuggyQSA.push("\\[" + whitespace2 + "*(?:value|" + booleans + ")");
                  }
                  if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                    rbuggyQSA.push("~=");
                  }
                  input = document3.createElement("input");
                  input.setAttribute("name", "");
                  el.appendChild(input);
                  if (!el.querySelectorAll("[name='']").length) {
                    rbuggyQSA.push("\\[" + whitespace2 + "*name" + whitespace2 + "*=" + whitespace2 + `*(?:''|"")`);
                  }
                  if (!el.querySelectorAll(":checked").length) {
                    rbuggyQSA.push(":checked");
                  }
                  if (!el.querySelectorAll("a#" + expando + "+*").length) {
                    rbuggyQSA.push(".#.+[+~]");
                  }
                  el.querySelectorAll("\\\f");
                  rbuggyQSA.push("[\\r\\n\\f]");
                });
                assert(function(el) {
                  el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                  var input = document3.createElement("input");
                  input.setAttribute("type", "hidden");
                  el.appendChild(input).setAttribute("name", "D");
                  if (el.querySelectorAll("[name=d]").length) {
                    rbuggyQSA.push("name" + whitespace2 + "*[*^$|!~]?=");
                  }
                  if (el.querySelectorAll(":enabled").length !== 2) {
                    rbuggyQSA.push(":enabled", ":disabled");
                  }
                  docElem.appendChild(el).disabled = true;
                  if (el.querySelectorAll(":disabled").length !== 2) {
                    rbuggyQSA.push(":enabled", ":disabled");
                  }
                  el.querySelectorAll("*,:x");
                  rbuggyQSA.push(",.*:");
                });
              }
              if (support2.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function(el) {
                  support2.disconnectedMatch = matches.call(el, "*");
                  matches.call(el, "[s!='']:x");
                  rbuggyMatches.push("!=", pseudos);
                });
              }
              if (!support2.cssHas) {
                rbuggyQSA.push(":has");
              }
              rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
              rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
              hasCompare = rnative.test(docElem.compareDocumentPosition);
              contains2 = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                var adown = a.nodeType === 9 && a.documentElement || a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
              } : function(a, b) {
                if (b) {
                  while (b = b.parentNode) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };
              sortOrder = hasCompare ? function(a, b) {
                if (a === b) {
                  hasDuplicate = true;
                  return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                  return compare;
                }
                compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : (
                  // Otherwise we know they are disconnected
                  1
                );
                if (compare & 1 || !support2.sortDetached && b.compareDocumentPosition(a) === compare) {
                  if (a == document3 || a.ownerDocument == preferredDoc && contains2(preferredDoc, a)) {
                    return -1;
                  }
                  if (b == document3 || b.ownerDocument == preferredDoc && contains2(preferredDoc, b)) {
                    return 1;
                  }
                  return sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
              } : function(a, b) {
                if (a === b) {
                  hasDuplicate = true;
                  return 0;
                }
                var cur, i2 = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                if (!aup || !bup) {
                  return a == document3 ? -1 : b == document3 ? 1 : (
                    /* eslint-enable eqeqeq */
                    aup ? -1 : bup ? 1 : sortInput ? indexOf2(sortInput, a) - indexOf2(sortInput, b) : 0
                  );
                } else if (aup === bup) {
                  return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                  ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                  bp.unshift(cur);
                }
                while (ap[i2] === bp[i2]) {
                  i2++;
                }
                return i2 ? (
                  // Do a sibling check if the nodes have a common ancestor
                  siblingCheck(ap[i2], bp[i2])
                ) : (
                  // Otherwise nodes in our document sort first
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  /* eslint-disable eqeqeq */
                  ap[i2] == preferredDoc ? -1 : bp[i2] == preferredDoc ? 1 : (
                    /* eslint-enable eqeqeq */
                    0
                  )
                );
              };
              return document3;
            };
            Sizzle2.matches = function(expr, elements) {
              return Sizzle2(expr, null, null, elements);
            };
            Sizzle2.matchesSelector = function(elem, expr) {
              setDocument(elem);
              if (support2.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                  var ret = matches.call(elem, expr);
                  if (ret || support2.disconnectedMatch || // As well, disconnected nodes are said to be in a document
                  // fragment in IE 9
                  elem.document && elem.document.nodeType !== 11) {
                    return ret;
                  }
                } catch (e) {
                  nonnativeSelectorCache(expr, true);
                }
              }
              return Sizzle2(expr, document3, null, [elem]).length > 0;
            };
            Sizzle2.contains = function(context, elem) {
              if ((context.ownerDocument || context) != document3) {
                setDocument(context);
              }
              return contains2(context, elem);
            };
            Sizzle2.attr = function(elem, name) {
              if ((elem.ownerDocument || elem) != document3) {
                setDocument(elem);
              }
              var fn2 = Expr.attrHandle[name.toLowerCase()], val = fn2 && hasOwn2.call(Expr.attrHandle, name.toLowerCase()) ? fn2(elem, name, !documentIsHTML) : void 0;
              return val !== void 0 ? val : support2.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            };
            Sizzle2.escape = function(sel) {
              return (sel + "").replace(rcssescape, fcssescape);
            };
            Sizzle2.error = function(msg) {
              throw new Error("Syntax error, unrecognized expression: " + msg);
            };
            Sizzle2.uniqueSort = function(results) {
              var elem, duplicates = [], j = 0, i2 = 0;
              hasDuplicate = !support2.detectDuplicates;
              sortInput = !support2.sortStable && results.slice(0);
              results.sort(sortOrder);
              if (hasDuplicate) {
                while (elem = results[i2++]) {
                  if (elem === results[i2]) {
                    j = duplicates.push(i2);
                  }
                }
                while (j--) {
                  results.splice(duplicates[j], 1);
                }
              }
              sortInput = null;
              return results;
            };
            getText = Sizzle2.getText = function(elem) {
              var node, ret = "", i2 = 0, nodeType = elem.nodeType;
              if (!nodeType) {
                while (node = elem[i2++]) {
                  ret += getText(node);
                }
              } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === "string") {
                  return elem.textContent;
                } else {
                  for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                    ret += getText(elem);
                  }
                }
              } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
              }
              return ret;
            };
            Expr = Sizzle2.selectors = {
              // Can be adjusted by the user
              cacheLength: 50,
              createPseudo: markFunction,
              match: matchExpr,
              attrHandle: {},
              find: {},
              relative: {
                ">": { dir: "parentNode", first: true },
                " ": { dir: "parentNode" },
                "+": { dir: "previousSibling", first: true },
                "~": { dir: "previousSibling" }
              },
              preFilter: {
                "ATTR": function(match) {
                  match[1] = match[1].replace(runescape, funescape);
                  match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                  if (match[2] === "~=") {
                    match[3] = " " + match[3] + " ";
                  }
                  return match.slice(0, 4);
                },
                "CHILD": function(match) {
                  match[1] = match[1].toLowerCase();
                  if (match[1].slice(0, 3) === "nth") {
                    if (!match[3]) {
                      Sizzle2.error(match[0]);
                    }
                    match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                    match[5] = +(match[7] + match[8] || match[3] === "odd");
                  } else if (match[3]) {
                    Sizzle2.error(match[0]);
                  }
                  return match;
                },
                "PSEUDO": function(match) {
                  var excess, unquoted = !match[6] && match[2];
                  if (matchExpr["CHILD"].test(match[0])) {
                    return null;
                  }
                  if (match[3]) {
                    match[2] = match[4] || match[5] || "";
                  } else if (unquoted && rpseudo.test(unquoted) && // Get excess from tokenize (recursively)
                  (excess = tokenize(unquoted, true)) && // advance to the next closing parenthesis
                  (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                    match[0] = match[0].slice(0, excess);
                    match[2] = unquoted.slice(0, excess);
                  }
                  return match.slice(0, 3);
                }
              },
              filter: {
                "TAG": function(nodeNameSelector) {
                  var nodeName2 = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                  return nodeNameSelector === "*" ? function() {
                    return true;
                  } : function(elem) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === nodeName2;
                  };
                },
                "CLASS": function(className) {
                  var pattern = classCache[className + " "];
                  return pattern || (pattern = new RegExp("(^|" + whitespace2 + ")" + className + "(" + whitespace2 + "|$)")) && classCache(
                    className,
                    function(elem) {
                      return pattern.test(
                        typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || ""
                      );
                    }
                  );
                },
                "ATTR": function(name, operator, check) {
                  return function(elem) {
                    var result = Sizzle2.attr(elem, name);
                    if (result == null) {
                      return operator === "!=";
                    }
                    if (!operator) {
                      return true;
                    }
                    result += "";
                    return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                  };
                },
                "CHILD": function(type, what, _argument, first, last) {
                  var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                  return first === 1 && last === 0 ? (
                    // Shortcut for :nth-*(n)
                    function(elem) {
                      return !!elem.parentNode;
                    }
                  ) : function(elem, _context, xml) {
                    var cache, uniqueCache, outerCache, node, nodeIndex, start2, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                    if (parent) {
                      if (simple) {
                        while (dir2) {
                          node = elem;
                          while (node = node[dir2]) {
                            if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                              return false;
                            }
                          }
                          start2 = dir2 = type === "only" && !start2 && "nextSibling";
                        }
                        return true;
                      }
                      start2 = [forward ? parent.firstChild : parent.lastChild];
                      if (forward && useCache) {
                        node = parent;
                        outerCache = node[expando] || (node[expando] = {});
                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        cache = uniqueCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex && cache[2];
                        node = nodeIndex && parent.childNodes[nodeIndex];
                        while (node = ++nodeIndex && node && node[dir2] || // Fallback to seeking `elem` from the start
                        (diff = nodeIndex = 0) || start2.pop()) {
                          if (node.nodeType === 1 && ++diff && node === elem) {
                            uniqueCache[type] = [dirruns, nodeIndex, diff];
                            break;
                          }
                        }
                      } else {
                        if (useCache) {
                          node = elem;
                          outerCache = node[expando] || (node[expando] = {});
                          uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                          cache = uniqueCache[type] || [];
                          nodeIndex = cache[0] === dirruns && cache[1];
                          diff = nodeIndex;
                        }
                        if (diff === false) {
                          while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start2.pop()) {
                            if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                              if (useCache) {
                                outerCache = node[expando] || (node[expando] = {});
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                uniqueCache[type] = [dirruns, diff];
                              }
                              if (node === elem) {
                                break;
                              }
                            }
                          }
                        }
                      }
                      diff -= last;
                      return diff === first || diff % first === 0 && diff / first >= 0;
                    }
                  };
                },
                "PSEUDO": function(pseudo, argument) {
                  var args, fn2 = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle2.error("unsupported pseudo: " + pseudo);
                  if (fn2[expando]) {
                    return fn2(argument);
                  }
                  if (fn2.length > 1) {
                    args = [pseudo, pseudo, "", argument];
                    return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
                      var idx, matched = fn2(seed, argument), i2 = matched.length;
                      while (i2--) {
                        idx = indexOf2(seed, matched[i2]);
                        seed[idx] = !(matches2[idx] = matched[i2]);
                      }
                    }) : function(elem) {
                      return fn2(elem, 0, args);
                    };
                  }
                  return fn2;
                }
              },
              pseudos: {
                // Potentially complex pseudos
                "not": markFunction(function(selector) {
                  var input = [], results = [], matcher = compile(selector.replace(rtrim2, "$1"));
                  return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
                    var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                    while (i2--) {
                      if (elem = unmatched[i2]) {
                        seed[i2] = !(matches2[i2] = elem);
                      }
                    }
                  }) : function(elem, _context, xml) {
                    input[0] = elem;
                    matcher(input, null, xml, results);
                    input[0] = null;
                    return !results.pop();
                  };
                }),
                "has": markFunction(function(selector) {
                  return function(elem) {
                    return Sizzle2(selector, elem).length > 0;
                  };
                }),
                "contains": markFunction(function(text) {
                  text = text.replace(runescape, funescape);
                  return function(elem) {
                    return (elem.textContent || getText(elem)).indexOf(text) > -1;
                  };
                }),
                // "Whether an element is represented by a :lang() selector
                // is based solely on the element's language value
                // being equal to the identifier C,
                // or beginning with the identifier C immediately followed by "-".
                // The matching of C against the element's language value is performed case-insensitively.
                // The identifier C does not have to be a valid language name."
                // http://www.w3.org/TR/selectors/#lang-pseudo
                "lang": markFunction(function(lang) {
                  if (!ridentifier.test(lang || "")) {
                    Sizzle2.error("unsupported lang: " + lang);
                  }
                  lang = lang.replace(runescape, funescape).toLowerCase();
                  return function(elem) {
                    var elemLang;
                    do {
                      if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                        elemLang = elemLang.toLowerCase();
                        return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                      }
                    } while ((elem = elem.parentNode) && elem.nodeType === 1);
                    return false;
                  };
                }),
                // Miscellaneous
                "target": function(elem) {
                  var hash3 = window3.location && window3.location.hash;
                  return hash3 && hash3.slice(1) === elem.id;
                },
                "root": function(elem) {
                  return elem === docElem;
                },
                "focus": function(elem) {
                  return elem === document3.activeElement && (!document3.hasFocus || document3.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                // Boolean properties
                "enabled": createDisabledPseudo(false),
                "disabled": createDisabledPseudo(true),
                "checked": function(elem) {
                  var nodeName2 = elem.nodeName.toLowerCase();
                  return nodeName2 === "input" && !!elem.checked || nodeName2 === "option" && !!elem.selected;
                },
                "selected": function(elem) {
                  if (elem.parentNode) {
                    elem.parentNode.selectedIndex;
                  }
                  return elem.selected === true;
                },
                // Contents
                "empty": function(elem) {
                  for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                    if (elem.nodeType < 6) {
                      return false;
                    }
                  }
                  return true;
                },
                "parent": function(elem) {
                  return !Expr.pseudos["empty"](elem);
                },
                // Element/input types
                "header": function(elem) {
                  return rheader.test(elem.nodeName);
                },
                "input": function(elem) {
                  return rinputs.test(elem.nodeName);
                },
                "button": function(elem) {
                  var name = elem.nodeName.toLowerCase();
                  return name === "input" && elem.type === "button" || name === "button";
                },
                "text": function(elem) {
                  var attr;
                  return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && // Support: IE <10 only
                  // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                  ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                },
                // Position-in-collection
                "first": createPositionalPseudo(function() {
                  return [0];
                }),
                "last": createPositionalPseudo(function(_matchIndexes, length) {
                  return [length - 1];
                }),
                "eq": createPositionalPseudo(function(_matchIndexes, length, argument) {
                  return [argument < 0 ? argument + length : argument];
                }),
                "even": createPositionalPseudo(function(matchIndexes, length) {
                  var i2 = 0;
                  for (; i2 < length; i2 += 2) {
                    matchIndexes.push(i2);
                  }
                  return matchIndexes;
                }),
                "odd": createPositionalPseudo(function(matchIndexes, length) {
                  var i2 = 1;
                  for (; i2 < length; i2 += 2) {
                    matchIndexes.push(i2);
                  }
                  return matchIndexes;
                }),
                "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                  var i2 = argument < 0 ? argument + length : argument > length ? length : argument;
                  for (; --i2 >= 0; ) {
                    matchIndexes.push(i2);
                  }
                  return matchIndexes;
                }),
                "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                  var i2 = argument < 0 ? argument + length : argument;
                  for (; ++i2 < length; ) {
                    matchIndexes.push(i2);
                  }
                  return matchIndexes;
                })
              }
            };
            Expr.pseudos["nth"] = Expr.pseudos["eq"];
            for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
              Expr.pseudos[i] = createInputPseudo(i);
            }
            for (i in { submit: true, reset: true }) {
              Expr.pseudos[i] = createButtonPseudo(i);
            }
            function setFilters() {
            }
            setFilters.prototype = Expr.filters = Expr.pseudos;
            Expr.setFilters = new setFilters();
            tokenize = Sizzle2.tokenize = function(selector, parseOnly) {
              var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
              if (cached) {
                return parseOnly ? 0 : cached.slice(0);
              }
              soFar = selector;
              groups = [];
              preFilters = Expr.preFilter;
              while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                  if (match) {
                    soFar = soFar.slice(match[0].length) || soFar;
                  }
                  groups.push(tokens = []);
                }
                matched = false;
                if (match = rleadingCombinator.exec(soFar)) {
                  matched = match.shift();
                  tokens.push({
                    value: matched,
                    // Cast descendant combinators to space
                    type: match[0].replace(rtrim2, " ")
                  });
                  soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                  if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                    matched = match.shift();
                    tokens.push({
                      value: matched,
                      type,
                      matches: match
                    });
                    soFar = soFar.slice(matched.length);
                  }
                }
                if (!matched) {
                  break;
                }
              }
              return parseOnly ? soFar.length : soFar ? Sizzle2.error(selector) : (
                // Cache the tokens
                tokenCache(selector, groups).slice(0)
              );
            };
            function toSelector(tokens) {
              var i2 = 0, len = tokens.length, selector = "";
              for (; i2 < len; i2++) {
                selector += tokens[i2].value;
              }
              return selector;
            }
            function addCombinator(matcher, combinator, base) {
              var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
              return combinator.first ? (
                // Check against closest ancestor/preceding element
                function(elem, context, xml) {
                  while (elem = elem[dir2]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      return matcher(elem, context, xml);
                    }
                  }
                  return false;
                }
              ) : (
                // Check against all ancestor/preceding elements
                function(elem, context, xml) {
                  var oldCache, uniqueCache, outerCache, newCache = [dirruns, doneName];
                  if (xml) {
                    while (elem = elem[dir2]) {
                      if (elem.nodeType === 1 || checkNonElements) {
                        if (matcher(elem, context, xml)) {
                          return true;
                        }
                      }
                    }
                  } else {
                    while (elem = elem[dir2]) {
                      if (elem.nodeType === 1 || checkNonElements) {
                        outerCache = elem[expando] || (elem[expando] = {});
                        uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                        if (skip && skip === elem.nodeName.toLowerCase()) {
                          elem = elem[dir2] || elem;
                        } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                          return newCache[2] = oldCache[2];
                        } else {
                          uniqueCache[key] = newCache;
                          if (newCache[2] = matcher(elem, context, xml)) {
                            return true;
                          }
                        }
                      }
                    }
                  }
                  return false;
                }
              );
            }
            function elementMatcher(matchers) {
              return matchers.length > 1 ? function(elem, context, xml) {
                var i2 = matchers.length;
                while (i2--) {
                  if (!matchers[i2](elem, context, xml)) {
                    return false;
                  }
                }
                return true;
              } : matchers[0];
            }
            function multipleContexts(selector, contexts, results) {
              var i2 = 0, len = contexts.length;
              for (; i2 < len; i2++) {
                Sizzle2(selector, contexts[i2], results);
              }
              return results;
            }
            function condense(unmatched, map, filter, context, xml) {
              var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map != null;
              for (; i2 < len; i2++) {
                if (elem = unmatched[i2]) {
                  if (!filter || filter(elem, context, xml)) {
                    newUnmatched.push(elem);
                    if (mapped) {
                      map.push(i2);
                    }
                  }
                }
              }
              return newUnmatched;
            }
            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
              if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
              }
              if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
              }
              return markFunction(function(seed, results, context, xml) {
                var temp, i2, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(
                  selector || "*",
                  context.nodeType ? [context] : context,
                  []
                ), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? (
                  // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                  postFinder || (seed ? preFilter : preexisting || postFilter) ? (
                    // ...intermediate processing is necessary
                    []
                  ) : (
                    // ...otherwise use results directly
                    results
                  )
                ) : matcherIn;
                if (matcher) {
                  matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                  temp = condense(matcherOut, postMap);
                  postFilter(temp, [], context, xml);
                  i2 = temp.length;
                  while (i2--) {
                    if (elem = temp[i2]) {
                      matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                    }
                  }
                }
                if (seed) {
                  if (postFinder || preFilter) {
                    if (postFinder) {
                      temp = [];
                      i2 = matcherOut.length;
                      while (i2--) {
                        if (elem = matcherOut[i2]) {
                          temp.push(matcherIn[i2] = elem);
                        }
                      }
                      postFinder(null, matcherOut = [], temp, xml);
                    }
                    i2 = matcherOut.length;
                    while (i2--) {
                      if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf2(seed, elem) : preMap[i2]) > -1) {
                        seed[temp] = !(results[temp] = elem);
                      }
                    }
                  }
                } else {
                  matcherOut = condense(
                    matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut
                  );
                  if (postFinder) {
                    postFinder(null, results, matcherOut, xml);
                  } else {
                    push2.apply(results, matcherOut);
                  }
                }
              });
            }
            function matcherFromTokens(tokens) {
              var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
                return elem === checkContext;
              }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
                return indexOf2(checkContext, elem) > -1;
              }, implicitRelative, true), matchers = [function(elem, context, xml) {
                var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
              }];
              for (; i2 < len; i2++) {
                if (matcher = Expr.relative[tokens[i2].type]) {
                  matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                  matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
                  if (matcher[expando]) {
                    j = ++i2;
                    for (; j < len; j++) {
                      if (Expr.relative[tokens[j].type]) {
                        break;
                      }
                    }
                    return setMatcher(
                      i2 > 1 && elementMatcher(matchers),
                      i2 > 1 && toSelector(
                        // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                        tokens.slice(0, i2 - 1).concat({ value: tokens[i2 - 2].type === " " ? "*" : "" })
                      ).replace(rtrim2, "$1"),
                      matcher,
                      i2 < j && matcherFromTokens(tokens.slice(i2, j)),
                      j < len && matcherFromTokens(tokens = tokens.slice(j)),
                      j < len && toSelector(tokens)
                    );
                  }
                  matchers.push(matcher);
                }
              }
              return elementMatcher(matchers);
            }
            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
              var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
                var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                if (outermost) {
                  outermostContext = context == document3 || context || outermost;
                }
                for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
                  if (byElement && elem) {
                    j = 0;
                    if (!context && elem.ownerDocument != document3) {
                      setDocument(elem);
                      xml = !documentIsHTML;
                    }
                    while (matcher = elementMatchers[j++]) {
                      if (matcher(elem, context || document3, xml)) {
                        results.push(elem);
                        break;
                      }
                    }
                    if (outermost) {
                      dirruns = dirrunsUnique;
                    }
                  }
                  if (bySet) {
                    if (elem = !matcher && elem) {
                      matchedCount--;
                    }
                    if (seed) {
                      unmatched.push(elem);
                    }
                  }
                }
                matchedCount += i2;
                if (bySet && i2 !== matchedCount) {
                  j = 0;
                  while (matcher = setMatchers[j++]) {
                    matcher(unmatched, setMatched, context, xml);
                  }
                  if (seed) {
                    if (matchedCount > 0) {
                      while (i2--) {
                        if (!(unmatched[i2] || setMatched[i2])) {
                          setMatched[i2] = pop.call(results);
                        }
                      }
                    }
                    setMatched = condense(setMatched);
                  }
                  push2.apply(results, setMatched);
                  if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                    Sizzle2.uniqueSort(results);
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                  outermostContext = contextBackup;
                }
                return unmatched;
              };
              return bySet ? markFunction(superMatcher) : superMatcher;
            }
            compile = Sizzle2.compile = function(selector, match) {
              var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
              if (!cached) {
                if (!match) {
                  match = tokenize(selector);
                }
                i2 = match.length;
                while (i2--) {
                  cached = matcherFromTokens(match[i2]);
                  if (cached[expando]) {
                    setMatchers.push(cached);
                  } else {
                    elementMatchers.push(cached);
                  }
                }
                cached = compilerCache(
                  selector,
                  matcherFromGroupMatchers(elementMatchers, setMatchers)
                );
                cached.selector = selector;
              }
              return cached;
            };
            select = Sizzle2.select = function(selector, context, results, seed) {
              var i2, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
              results = results || [];
              if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                  context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                  if (!context) {
                    return results;
                  } else if (compiled) {
                    context = context.parentNode;
                  }
                  selector = selector.slice(tokens.shift().value.length);
                }
                i2 = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                while (i2--) {
                  token = tokens[i2];
                  if (Expr.relative[type = token.type]) {
                    break;
                  }
                  if (find = Expr.find[type]) {
                    if (seed = find(
                      token.matches[0].replace(runescape, funescape),
                      rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                    )) {
                      tokens.splice(i2, 1);
                      selector = seed.length && toSelector(tokens);
                      if (!selector) {
                        push2.apply(results, seed);
                        return results;
                      }
                      break;
                    }
                  }
                }
              }
              (compiled || compile(selector, match))(
                seed,
                context,
                !documentIsHTML,
                results,
                !context || rsibling.test(selector) && testContext(context.parentNode) || context
              );
              return results;
            };
            support2.sortStable = expando.split("").sort(sortOrder).join("") === expando;
            support2.detectDuplicates = !!hasDuplicate;
            setDocument();
            support2.sortDetached = assert(function(el) {
              return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
            });
            if (!assert(function(el) {
              el.innerHTML = "<a href='#'></a>";
              return el.firstChild.getAttribute("href") === "#";
            })) {
              addHandle("type|href|height|width", function(elem, name, isXML2) {
                if (!isXML2) {
                  return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                }
              });
            }
            if (!support2.attributes || !assert(function(el) {
              el.innerHTML = "<input/>";
              el.firstChild.setAttribute("value", "");
              return el.firstChild.getAttribute("value") === "";
            })) {
              addHandle("value", function(elem, _name, isXML2) {
                if (!isXML2 && elem.nodeName.toLowerCase() === "input") {
                  return elem.defaultValue;
                }
              });
            }
            if (!assert(function(el) {
              return el.getAttribute("disabled") == null;
            })) {
              addHandle(booleans, function(elem, name, isXML2) {
                var val;
                if (!isXML2) {
                  return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
              });
            }
            return Sizzle2;
          }(window2)
        );
        jQuery2.find = Sizzle;
        jQuery2.expr = Sizzle.selectors;
        jQuery2.expr[":"] = jQuery2.expr.pseudos;
        jQuery2.uniqueSort = jQuery2.unique = Sizzle.uniqueSort;
        jQuery2.text = Sizzle.getText;
        jQuery2.isXMLDoc = Sizzle.isXML;
        jQuery2.contains = Sizzle.contains;
        jQuery2.escapeSelector = Sizzle.escape;
        var dir = function(elem, dir2, until) {
          var matched = [], truncate = until !== void 0;
          while ((elem = elem[dir2]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery2(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        };
        var siblings = function(n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        };
        var rneedsContext = jQuery2.expr.match.needsContext;
        function nodeName(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        }
        var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
        function winnow(elements, qualifier, not) {
          if (isFunction(qualifier)) {
            return jQuery2.grep(elements, function(elem, i) {
              return !!qualifier.call(elem, i, elem) !== not;
            });
          }
          if (qualifier.nodeType) {
            return jQuery2.grep(elements, function(elem) {
              return elem === qualifier !== not;
            });
          }
          if (typeof qualifier !== "string") {
            return jQuery2.grep(elements, function(elem) {
              return indexOf.call(qualifier, elem) > -1 !== not;
            });
          }
          return jQuery2.filter(qualifier, elements, not);
        }
        jQuery2.filter = function(expr, elems, not) {
          var elem = elems[0];
          if (not) {
            expr = ":not(" + expr + ")";
          }
          if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery2.find.matchesSelector(elem, expr) ? [elem] : [];
          }
          return jQuery2.find.matches(expr, jQuery2.grep(elems, function(elem2) {
            return elem2.nodeType === 1;
          }));
        };
        jQuery2.fn.extend({
          find: function(selector) {
            var i, ret, len = this.length, self2 = this;
            if (typeof selector !== "string") {
              return this.pushStack(jQuery2(selector).filter(function() {
                for (i = 0; i < len; i++) {
                  if (jQuery2.contains(self2[i], this)) {
                    return true;
                  }
                }
              }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
              jQuery2.find(selector, self2[i], ret);
            }
            return len > 1 ? jQuery2.uniqueSort(ret) : ret;
          },
          filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
          },
          not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
          },
          is: function(selector) {
            return !!winnow(
              this,
              // If this is a positional/relative selector, check membership in the returned set
              // so $("p:first").is("p:last") won't return true for a doc with two "p".
              typeof selector === "string" && rneedsContext.test(selector) ? jQuery2(selector) : selector || [],
              false
            ).length;
          }
        });
        var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery2.fn.init = function(selector, context, root) {
          var match, elem;
          if (!selector) {
            return this;
          }
          root = root || rootjQuery;
          if (typeof selector === "string") {
            if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
              match = [null, selector, null];
            } else {
              match = rquickExpr.exec(selector);
            }
            if (match && (match[1] || !context)) {
              if (match[1]) {
                context = context instanceof jQuery2 ? context[0] : context;
                jQuery2.merge(this, jQuery2.parseHTML(
                  match[1],
                  context && context.nodeType ? context.ownerDocument || context : document2,
                  true
                ));
                if (rsingleTag.test(match[1]) && jQuery2.isPlainObject(context)) {
                  for (match in context) {
                    if (isFunction(this[match])) {
                      this[match](context[match]);
                    } else {
                      this.attr(match, context[match]);
                    }
                  }
                }
                return this;
              } else {
                elem = document2.getElementById(match[2]);
                if (elem) {
                  this[0] = elem;
                  this.length = 1;
                }
                return this;
              }
            } else if (!context || context.jquery) {
              return (context || root).find(selector);
            } else {
              return this.constructor(context).find(selector);
            }
          } else if (selector.nodeType) {
            this[0] = selector;
            this.length = 1;
            return this;
          } else if (isFunction(selector)) {
            return root.ready !== void 0 ? root.ready(selector) : (
              // Execute immediately if ready is not present
              selector(jQuery2)
            );
          }
          return jQuery2.makeArray(selector, this);
        };
        init.prototype = jQuery2.fn;
        rootjQuery = jQuery2(document2);
        var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        };
        jQuery2.fn.extend({
          has: function(target) {
            var targets = jQuery2(target, this), l = targets.length;
            return this.filter(function() {
              var i = 0;
              for (; i < l; i++) {
                if (jQuery2.contains(this, targets[i])) {
                  return true;
                }
              }
            });
          },
          closest: function(selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery2(selectors);
            if (!rneedsContext.test(selectors)) {
              for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                  if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : (
                    // Don't pass non-elements to Sizzle
                    cur.nodeType === 1 && jQuery2.find.matchesSelector(cur, selectors)
                  ))) {
                    matched.push(cur);
                    break;
                  }
                }
              }
            }
            return this.pushStack(matched.length > 1 ? jQuery2.uniqueSort(matched) : matched);
          },
          // Determine the position of an element within the set
          index: function(elem) {
            if (!elem) {
              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === "string") {
              return indexOf.call(jQuery2(elem), this[0]);
            }
            return indexOf.call(
              this,
              // If it receives a jQuery object, the first element is used
              elem.jquery ? elem[0] : elem
            );
          },
          add: function(selector, context) {
            return this.pushStack(
              jQuery2.uniqueSort(
                jQuery2.merge(this.get(), jQuery2(selector, context))
              )
            );
          },
          addBack: function(selector) {
            return this.add(
              selector == null ? this.prevObject : this.prevObject.filter(selector)
            );
          }
        });
        function sibling(cur, dir2) {
          while ((cur = cur[dir2]) && cur.nodeType !== 1) {
          }
          return cur;
        }
        jQuery2.each({
          parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
          },
          parents: function(elem) {
            return dir(elem, "parentNode");
          },
          parentsUntil: function(elem, _i, until) {
            return dir(elem, "parentNode", until);
          },
          next: function(elem) {
            return sibling(elem, "nextSibling");
          },
          prev: function(elem) {
            return sibling(elem, "previousSibling");
          },
          nextAll: function(elem) {
            return dir(elem, "nextSibling");
          },
          prevAll: function(elem) {
            return dir(elem, "previousSibling");
          },
          nextUntil: function(elem, _i, until) {
            return dir(elem, "nextSibling", until);
          },
          prevUntil: function(elem, _i, until) {
            return dir(elem, "previousSibling", until);
          },
          siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
          },
          children: function(elem) {
            return siblings(elem.firstChild);
          },
          contents: function(elem) {
            if (elem.contentDocument != null && // Support: IE 11+
            // <object> elements with no `data` attribute has an object
            // `contentDocument` with a `null` prototype.
            getProto(elem.contentDocument)) {
              return elem.contentDocument;
            }
            if (nodeName(elem, "template")) {
              elem = elem.content || elem;
            }
            return jQuery2.merge([], elem.childNodes);
          }
        }, function(name, fn2) {
          jQuery2.fn[name] = function(until, selector) {
            var matched = jQuery2.map(this, fn2, until);
            if (name.slice(-5) !== "Until") {
              selector = until;
            }
            if (selector && typeof selector === "string") {
              matched = jQuery2.filter(selector, matched);
            }
            if (this.length > 1) {
              if (!guaranteedUnique[name]) {
                jQuery2.uniqueSort(matched);
              }
              if (rparentsprev.test(name)) {
                matched.reverse();
              }
            }
            return this.pushStack(matched);
          };
        });
        var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
        function createOptions(options) {
          var object = {};
          jQuery2.each(options.match(rnothtmlwhite) || [], function(_, flag) {
            object[flag] = true;
          });
          return object;
        }
        jQuery2.Callbacks = function(options) {
          options = typeof options === "string" ? createOptions(options) : jQuery2.extend({}, options);
          var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
            locked = locked || options.once;
            fired = firing = true;
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift();
              while (++firingIndex < list.length) {
                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                  firingIndex = list.length;
                  memory = false;
                }
              }
            }
            if (!options.memory) {
              memory = false;
            }
            firing = false;
            if (locked) {
              if (memory) {
                list = [];
              } else {
                list = "";
              }
            }
          }, self2 = {
            // Add a callback or a collection of callbacks to the list
            add: function() {
              if (list) {
                if (memory && !firing) {
                  firingIndex = list.length - 1;
                  queue.push(memory);
                }
                (function add(args) {
                  jQuery2.each(args, function(_, arg) {
                    if (isFunction(arg)) {
                      if (!options.unique || !self2.has(arg)) {
                        list.push(arg);
                      }
                    } else if (arg && arg.length && toType2(arg) !== "string") {
                      add(arg);
                    }
                  });
                })(arguments);
                if (memory && !firing) {
                  fire();
                }
              }
              return this;
            },
            // Remove a callback from the list
            remove: function() {
              jQuery2.each(arguments, function(_, arg) {
                var index;
                while ((index = jQuery2.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1);
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              });
              return this;
            },
            // Check if a given callback is in the list.
            // If no argument is given, return whether or not list has callbacks attached.
            has: function(fn2) {
              return fn2 ? jQuery2.inArray(fn2, list) > -1 : list.length > 0;
            },
            // Remove all callbacks from the list
            empty: function() {
              if (list) {
                list = [];
              }
              return this;
            },
            // Disable .fire and .add
            // Abort any current/pending executions
            // Clear all callbacks and values
            disable: function() {
              locked = queue = [];
              list = memory = "";
              return this;
            },
            disabled: function() {
              return !list;
            },
            // Disable .fire
            // Also disable .add unless we have memory (since it would have no effect)
            // Abort any pending executions
            lock: function() {
              locked = queue = [];
              if (!memory && !firing) {
                list = memory = "";
              }
              return this;
            },
            locked: function() {
              return !!locked;
            },
            // Call all callbacks with the given context and arguments
            fireWith: function(context, args) {
              if (!locked) {
                args = args || [];
                args = [context, args.slice ? args.slice() : args];
                queue.push(args);
                if (!firing) {
                  fire();
                }
              }
              return this;
            },
            // Call all the callbacks with the given arguments
            fire: function() {
              self2.fireWith(this, arguments);
              return this;
            },
            // To know if the callbacks have already been called at least once
            fired: function() {
              return !!fired;
            }
          };
          return self2;
        };
        function Identity(v) {
          return v;
        }
        function Thrower(ex) {
          throw ex;
        }
        function adoptValue(value, resolve, reject, noValue) {
          var method;
          try {
            if (value && isFunction(method = value.promise)) {
              method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction(method = value.then)) {
              method.call(value, resolve, reject);
            } else {
              resolve.apply(void 0, [value].slice(noValue));
            }
          } catch (value2) {
            reject.apply(void 0, [value2]);
          }
        }
        jQuery2.extend({
          Deferred: function(func) {
            var tuples = [
              // action, add listener, callbacks,
              // ... .then handlers, argument index, [final state]
              [
                "notify",
                "progress",
                jQuery2.Callbacks("memory"),
                jQuery2.Callbacks("memory"),
                2
              ],
              [
                "resolve",
                "done",
                jQuery2.Callbacks("once memory"),
                jQuery2.Callbacks("once memory"),
                0,
                "resolved"
              ],
              [
                "reject",
                "fail",
                jQuery2.Callbacks("once memory"),
                jQuery2.Callbacks("once memory"),
                1,
                "rejected"
              ]
            ], state = "pending", promise = {
              state: function() {
                return state;
              },
              always: function() {
                deferred.done(arguments).fail(arguments);
                return this;
              },
              "catch": function(fn2) {
                return promise.then(null, fn2);
              },
              // Keep pipe for back-compat
              pipe: function() {
                var fns = arguments;
                return jQuery2.Deferred(function(newDefer) {
                  jQuery2.each(tuples, function(_i, tuple) {
                    var fn2 = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                    deferred[tuple[1]](function() {
                      var returned = fn2 && fn2.apply(this, arguments);
                      if (returned && isFunction(returned.promise)) {
                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                      } else {
                        newDefer[tuple[0] + "With"](
                          this,
                          fn2 ? [returned] : arguments
                        );
                      }
                    });
                  });
                  fns = null;
                }).promise();
              },
              then: function(onFulfilled, onRejected, onProgress) {
                var maxDepth = 0;
                function resolve(depth, deferred2, handler, special) {
                  return function() {
                    var that = this, args = arguments, mightThrow = function() {
                      var returned, then;
                      if (depth < maxDepth) {
                        return;
                      }
                      returned = handler.apply(that, args);
                      if (returned === deferred2.promise()) {
                        throw new TypeError("Thenable self-resolution");
                      }
                      then = returned && // Support: Promises/A+ section 2.3.4
                      // https://promisesaplus.com/#point-64
                      // Only check objects and functions for thenability
                      (typeof returned === "object" || typeof returned === "function") && returned.then;
                      if (isFunction(then)) {
                        if (special) {
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special)
                          );
                        } else {
                          maxDepth++;
                          then.call(
                            returned,
                            resolve(maxDepth, deferred2, Identity, special),
                            resolve(maxDepth, deferred2, Thrower, special),
                            resolve(
                              maxDepth,
                              deferred2,
                              Identity,
                              deferred2.notifyWith
                            )
                          );
                        }
                      } else {
                        if (handler !== Identity) {
                          that = void 0;
                          args = [returned];
                        }
                        (special || deferred2.resolveWith)(that, args);
                      }
                    }, process2 = special ? mightThrow : function() {
                      try {
                        mightThrow();
                      } catch (e) {
                        if (jQuery2.Deferred.exceptionHook) {
                          jQuery2.Deferred.exceptionHook(
                            e,
                            process2.stackTrace
                          );
                        }
                        if (depth + 1 >= maxDepth) {
                          if (handler !== Thrower) {
                            that = void 0;
                            args = [e];
                          }
                          deferred2.rejectWith(that, args);
                        }
                      }
                    };
                    if (depth) {
                      process2();
                    } else {
                      if (jQuery2.Deferred.getStackHook) {
                        process2.stackTrace = jQuery2.Deferred.getStackHook();
                      }
                      window2.setTimeout(process2);
                    }
                  };
                }
                return jQuery2.Deferred(function(newDefer) {
                  tuples[0][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onProgress) ? onProgress : Identity,
                      newDefer.notifyWith
                    )
                  );
                  tuples[1][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onFulfilled) ? onFulfilled : Identity
                    )
                  );
                  tuples[2][3].add(
                    resolve(
                      0,
                      newDefer,
                      isFunction(onRejected) ? onRejected : Thrower
                    )
                  );
                }).promise();
              },
              // Get a promise for this deferred
              // If obj is provided, the promise aspect is added to the object
              promise: function(obj) {
                return obj != null ? jQuery2.extend(obj, promise) : promise;
              }
            }, deferred = {};
            jQuery2.each(tuples, function(i, tuple) {
              var list = tuple[2], stateString = tuple[5];
              promise[tuple[1]] = list.add;
              if (stateString) {
                list.add(
                  function() {
                    state = stateString;
                  },
                  // rejected_callbacks.disable
                  // fulfilled_callbacks.disable
                  tuples[3 - i][2].disable,
                  // rejected_handlers.disable
                  // fulfilled_handlers.disable
                  tuples[3 - i][3].disable,
                  // progress_callbacks.lock
                  tuples[0][2].lock,
                  // progress_handlers.lock
                  tuples[0][3].lock
                );
              }
              list.add(tuple[3].fire);
              deferred[tuple[0]] = function() {
                deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
                return this;
              };
              deferred[tuple[0] + "With"] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
              func.call(deferred, deferred);
            }
            return deferred;
          },
          // Deferred helper
          when: function(singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery2.Deferred(), updateFunc = function(i2) {
              return function(value) {
                resolveContexts[i2] = this;
                resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value;
                if (!--remaining) {
                  primary.resolveWith(resolveContexts, resolveValues);
                }
              };
            };
            if (remaining <= 1) {
              adoptValue(
                singleValue,
                primary.done(updateFunc(i)).resolve,
                primary.reject,
                !remaining
              );
              if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
                return primary.then();
              }
            }
            while (i--) {
              adoptValue(resolveValues[i], updateFunc(i), primary.reject);
            }
            return primary.promise();
          }
        });
        var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
        jQuery2.Deferred.exceptionHook = function(error, stack) {
          if (window2.console && window2.console.warn && error && rerrorNames.test(error.name)) {
            window2.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
          }
        };
        jQuery2.readyException = function(error) {
          window2.setTimeout(function() {
            throw error;
          });
        };
        var readyList = jQuery2.Deferred();
        jQuery2.fn.ready = function(fn2) {
          readyList.then(fn2).catch(function(error) {
            jQuery2.readyException(error);
          });
          return this;
        };
        jQuery2.extend({
          // Is the DOM ready to be used? Set to true once it occurs.
          isReady: false,
          // A counter to track how many items to wait for before
          // the ready event fires. See trac-6781
          readyWait: 1,
          // Handle when the DOM is ready
          ready: function(wait) {
            if (wait === true ? --jQuery2.readyWait : jQuery2.isReady) {
              return;
            }
            jQuery2.isReady = true;
            if (wait !== true && --jQuery2.readyWait > 0) {
              return;
            }
            readyList.resolveWith(document2, [jQuery2]);
          }
        });
        jQuery2.ready.then = readyList.then;
        function completed() {
          document2.removeEventListener("DOMContentLoaded", completed);
          window2.removeEventListener("load", completed);
          jQuery2.ready();
        }
        if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
          window2.setTimeout(jQuery2.ready);
        } else {
          document2.addEventListener("DOMContentLoaded", completed);
          window2.addEventListener("load", completed);
        }
        var access = function(elems, fn2, key, value, chainable, emptyGet, raw) {
          var i = 0, len = elems.length, bulk = key == null;
          if (toType2(key) === "object") {
            chainable = true;
            for (i in key) {
              access(elems, fn2, i, key[i], true, emptyGet, raw);
            }
          } else if (value !== void 0) {
            chainable = true;
            if (!isFunction(value)) {
              raw = true;
            }
            if (bulk) {
              if (raw) {
                fn2.call(elems, value);
                fn2 = null;
              } else {
                bulk = fn2;
                fn2 = function(elem, _key, value2) {
                  return bulk.call(jQuery2(elem), value2);
                };
              }
            }
            if (fn2) {
              for (; i < len; i++) {
                fn2(
                  elems[i],
                  key,
                  raw ? value : value.call(elems[i], i, fn2(elems[i], key))
                );
              }
            }
          }
          if (chainable) {
            return elems;
          }
          if (bulk) {
            return fn2.call(elems);
          }
          return len ? fn2(elems[0], key) : emptyGet;
        };
        var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
        function fcamelCase(_all, letter) {
          return letter.toUpperCase();
        }
        function camelCase(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        }
        var acceptData = function(owner) {
          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
        };
        function Data2() {
          this.expando = jQuery2.expando + Data2.uid++;
        }
        Data2.uid = 1;
        Data2.prototype = {
          cache: function(owner) {
            var value = owner[this.expando];
            if (!value) {
              value = {};
              if (acceptData(owner)) {
                if (owner.nodeType) {
                  owner[this.expando] = value;
                } else {
                  Object.defineProperty(owner, this.expando, {
                    value,
                    configurable: true
                  });
                }
              }
            }
            return value;
          },
          set: function(owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === "string") {
              cache[camelCase(data)] = value;
            } else {
              for (prop in data) {
                cache[camelCase(prop)] = data[prop];
              }
            }
            return cache;
          },
          get: function(owner, key) {
            return key === void 0 ? this.cache(owner) : (
              // Always use camelCase key (gh-2257)
              owner[this.expando] && owner[this.expando][camelCase(key)]
            );
          },
          access: function(owner, key, value) {
            if (key === void 0 || key && typeof key === "string" && value === void 0) {
              return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== void 0 ? value : key;
          },
          remove: function(owner, key) {
            var i, cache = owner[this.expando];
            if (cache === void 0) {
              return;
            }
            if (key !== void 0) {
              if (Array.isArray(key)) {
                key = key.map(camelCase);
              } else {
                key = camelCase(key);
                key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
              }
              i = key.length;
              while (i--) {
                delete cache[key[i]];
              }
            }
            if (key === void 0 || jQuery2.isEmptyObject(cache)) {
              if (owner.nodeType) {
                owner[this.expando] = void 0;
              } else {
                delete owner[this.expando];
              }
            }
          },
          hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== void 0 && !jQuery2.isEmptyObject(cache);
          }
        };
        var dataPriv = new Data2();
        var dataUser = new Data2();
        var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
        function getData(data) {
          if (data === "true") {
            return true;
          }
          if (data === "false") {
            return false;
          }
          if (data === "null") {
            return null;
          }
          if (data === +data + "") {
            return +data;
          }
          if (rbrace.test(data)) {
            return JSON.parse(data);
          }
          return data;
        }
        function dataAttr(elem, key, data) {
          var name;
          if (data === void 0 && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
              try {
                data = getData(data);
              } catch (e) {
              }
              dataUser.set(elem, key, data);
            } else {
              data = void 0;
            }
          }
          return data;
        }
        jQuery2.extend({
          hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
          },
          data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
          },
          removeData: function(elem, name) {
            dataUser.remove(elem, name);
          },
          // TODO: Now that all calls to _data and _removeData have been replaced
          // with direct calls to dataPriv methods, these can be deprecated.
          _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
          },
          _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
          }
        });
        jQuery2.fn.extend({
          data: function(key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === void 0) {
              if (this.length) {
                data = dataUser.get(elem);
                if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                  i = attrs.length;
                  while (i--) {
                    if (attrs[i]) {
                      name = attrs[i].name;
                      if (name.indexOf("data-") === 0) {
                        name = camelCase(name.slice(5));
                        dataAttr(elem, name, data[name]);
                      }
                    }
                  }
                  dataPriv.set(elem, "hasDataAttrs", true);
                }
              }
              return data;
            }
            if (typeof key === "object") {
              return this.each(function() {
                dataUser.set(this, key);
              });
            }
            return access(this, function(value2) {
              var data2;
              if (elem && value2 === void 0) {
                data2 = dataUser.get(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                data2 = dataAttr(elem, key);
                if (data2 !== void 0) {
                  return data2;
                }
                return;
              }
              this.each(function() {
                dataUser.set(this, key, value2);
              });
            }, null, value, arguments.length > 1, null, true);
          },
          removeData: function(key) {
            return this.each(function() {
              dataUser.remove(this, key);
            });
          }
        });
        jQuery2.extend({
          queue: function(elem, type, data) {
            var queue;
            if (elem) {
              type = (type || "fx") + "queue";
              queue = dataPriv.get(elem, type);
              if (data) {
                if (!queue || Array.isArray(data)) {
                  queue = dataPriv.access(elem, type, jQuery2.makeArray(data));
                } else {
                  queue.push(data);
                }
              }
              return queue || [];
            }
          },
          dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery2.queue(elem, type), startLength = queue.length, fn2 = queue.shift(), hooks = jQuery2._queueHooks(elem, type), next = function() {
              jQuery2.dequeue(elem, type);
            };
            if (fn2 === "inprogress") {
              fn2 = queue.shift();
              startLength--;
            }
            if (fn2) {
              if (type === "fx") {
                queue.unshift("inprogress");
              }
              delete hooks.stop;
              fn2.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
              hooks.empty.fire();
            }
          },
          // Not public - generate a queueHooks object, or return the current one
          _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
              empty: jQuery2.Callbacks("once memory").add(function() {
                dataPriv.remove(elem, [type + "queue", key]);
              })
            });
          }
        });
        jQuery2.fn.extend({
          queue: function(type, data) {
            var setter = 2;
            if (typeof type !== "string") {
              data = type;
              type = "fx";
              setter--;
            }
            if (arguments.length < setter) {
              return jQuery2.queue(this[0], type);
            }
            return data === void 0 ? this : this.each(function() {
              var queue = jQuery2.queue(this, type, data);
              jQuery2._queueHooks(this, type);
              if (type === "fx" && queue[0] !== "inprogress") {
                jQuery2.dequeue(this, type);
              }
            });
          },
          dequeue: function(type) {
            return this.each(function() {
              jQuery2.dequeue(this, type);
            });
          },
          clearQueue: function(type) {
            return this.queue(type || "fx", []);
          },
          // Get a promise resolved when queues of a certain type
          // are emptied (fx is the type by default)
          promise: function(type, obj) {
            var tmp, count = 1, defer = jQuery2.Deferred(), elements = this, i = this.length, resolve = function() {
              if (!--count) {
                defer.resolveWith(elements, [elements]);
              }
            };
            if (typeof type !== "string") {
              obj = type;
              type = void 0;
            }
            type = type || "fx";
            while (i--) {
              tmp = dataPriv.get(elements[i], type + "queueHooks");
              if (tmp && tmp.empty) {
                count++;
                tmp.empty.add(resolve);
              }
            }
            resolve();
            return defer.promise(obj);
          }
        });
        var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
        var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
        var cssExpand = ["Top", "Right", "Bottom", "Left"];
        var documentElement = document2.documentElement;
        var isAttached = function(elem) {
          return jQuery2.contains(elem.ownerDocument, elem);
        }, composed = { composed: true };
        if (documentElement.getRootNode) {
          isAttached = function(elem) {
            return jQuery2.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
          };
        }
        var isHiddenWithinTree = function(elem, el) {
          elem = el || elem;
          return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
          // Support: Firefox <=43 - 45
          // Disconnected elements can have computed display: none, so first confirm that elem is
          // in the document.
          isAttached(elem) && jQuery2.css(elem, "display") === "none";
        };
        function adjustCSS(elem, prop, valueParts, tween) {
          var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
            return tween.cur();
          } : function() {
            return jQuery2.css(elem, prop, "");
          }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery2.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery2.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery2.css(elem, prop));
          if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
              jQuery2.style(elem, prop, initialInUnit + unit);
              if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                maxIterations = 0;
              }
              initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery2.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
          }
          if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
              tween.unit = unit;
              tween.start = initialInUnit;
              tween.end = adjusted;
            }
          }
          return adjusted;
        }
        var defaultDisplayMap = {};
        function getDefaultDisplay(elem) {
          var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
          if (display) {
            return display;
          }
          temp = doc.body.appendChild(doc.createElement(nodeName2));
          display = jQuery2.css(temp, "display");
          temp.parentNode.removeChild(temp);
          if (display === "none") {
            display = "block";
          }
          defaultDisplayMap[nodeName2] = display;
          return display;
        }
        function showHide(elements, show) {
          var display, elem, values = [], index = 0, length = elements.length;
          for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
              continue;
            }
            display = elem.style.display;
            if (show) {
              if (display === "none") {
                values[index] = dataPriv.get(elem, "display") || null;
                if (!values[index]) {
                  elem.style.display = "";
                }
              }
              if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                values[index] = getDefaultDisplay(elem);
              }
            } else {
              if (display !== "none") {
                values[index] = "none";
                dataPriv.set(elem, "display", display);
              }
            }
          }
          for (index = 0; index < length; index++) {
            if (values[index] != null) {
              elements[index].style.display = values[index];
            }
          }
          return elements;
        }
        jQuery2.fn.extend({
          show: function() {
            return showHide(this, true);
          },
          hide: function() {
            return showHide(this);
          },
          toggle: function(state) {
            if (typeof state === "boolean") {
              return state ? this.show() : this.hide();
            }
            return this.each(function() {
              if (isHiddenWithinTree(this)) {
                jQuery2(this).show();
              } else {
                jQuery2(this).hide();
              }
            });
          }
        });
        var rcheckableType = /^(?:checkbox|radio)$/i;
        var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
        var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
        (function() {
          var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
          input.setAttribute("type", "radio");
          input.setAttribute("checked", "checked");
          input.setAttribute("name", "t");
          div.appendChild(input);
          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
          div.innerHTML = "<textarea>x</textarea>";
          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
          div.innerHTML = "<option></option>";
          support.option = !!div.lastChild;
        })();
        var wrapMap = {
          // XHTML parsers do not magically insert elements in the
          // same way that tag soup parsers do. So we cannot shorten
          // this by omitting <tbody> or other required elements.
          thead: [1, "<table>", "</table>"],
          col: [2, "<table><colgroup>", "</colgroup></table>"],
          tr: [2, "<table><tbody>", "</tbody></table>"],
          td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
          _default: [0, "", ""]
        };
        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
        wrapMap.th = wrapMap.td;
        if (!support.option) {
          wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
        }
        function getAll(context, tag) {
          var ret;
          if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");
          } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");
          } else {
            ret = [];
          }
          if (tag === void 0 || tag && nodeName(context, tag)) {
            return jQuery2.merge([context], ret);
          }
          return ret;
        }
        function setGlobalEval(elems, refElements) {
          var i = 0, l = elems.length;
          for (; i < l; i++) {
            dataPriv.set(
              elems[i],
              "globalEval",
              !refElements || dataPriv.get(refElements[i], "globalEval")
            );
          }
        }
        var rhtml = /<|&#?\w+;/;
        function buildFragment(elems, context, scripts, selection, ignored) {
          var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
          for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              if (toType2(elem) === "object") {
                jQuery2.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context.createElement("div"));
                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + jQuery2.htmlPrefilter(elem) + wrap[2];
                j = wrap[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }
                jQuery2.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = "";
              }
            }
          }
          fragment.textContent = "";
          i = 0;
          while (elem = nodes[i++]) {
            if (selection && jQuery2.inArray(elem, selection) > -1) {
              if (ignored) {
                ignored.push(elem);
              }
              continue;
            }
            attached = isAttached(elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (attached) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j = 0;
              while (elem = tmp[j++]) {
                if (rscriptType.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        }
        var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
        function returnTrue() {
          return true;
        }
        function returnFalse() {
          return false;
        }
        function expectSync(elem, type) {
          return elem === safeActiveElement() === (type === "focus");
        }
        function safeActiveElement() {
          try {
            return document2.activeElement;
          } catch (err) {
          }
        }
        function on(elem, types, selector, data, fn2, one) {
          var origFn, type;
          if (typeof types === "object") {
            if (typeof selector !== "string") {
              data = data || selector;
              selector = void 0;
            }
            for (type in types) {
              on(elem, type, selector, data, types[type], one);
            }
            return elem;
          }
          if (data == null && fn2 == null) {
            fn2 = selector;
            data = selector = void 0;
          } else if (fn2 == null) {
            if (typeof selector === "string") {
              fn2 = data;
              data = void 0;
            } else {
              fn2 = data;
              data = selector;
              selector = void 0;
            }
          }
          if (fn2 === false) {
            fn2 = returnFalse;
          } else if (!fn2) {
            return elem;
          }
          if (one === 1) {
            origFn = fn2;
            fn2 = function(event) {
              jQuery2().off(event);
              return origFn.apply(this, arguments);
            };
            fn2.guid = origFn.guid || (origFn.guid = jQuery2.guid++);
          }
          return elem.each(function() {
            jQuery2.event.add(this, types, fn2, data, selector);
          });
        }
        jQuery2.event = {
          global: {},
          add: function(elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!acceptData(elem)) {
              return;
            }
            if (handler.handler) {
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }
            if (selector) {
              jQuery2.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
              handler.guid = jQuery2.guid++;
            }
            if (!(events = elemData.events)) {
              events = elemData.events = /* @__PURE__ */ Object.create(null);
            }
            if (!(eventHandle = elemData.handle)) {
              eventHandle = elemData.handle = function(e) {
                return typeof jQuery2 !== "undefined" && jQuery2.event.triggered !== e.type ? jQuery2.event.dispatch.apply(elem, arguments) : void 0;
              };
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                continue;
              }
              special = jQuery2.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              special = jQuery2.event.special[type] || {};
              handleObj = jQuery2.extend({
                type,
                origType,
                data,
                handler,
                guid: handler.guid,
                selector,
                needsContext: selector && jQuery2.expr.match.needsContext.test(selector),
                namespace: namespaces.join(".")
              }, handleObjIn);
              if (!(handlers = events[type])) {
                handlers = events[type] = [];
                handlers.delegateCount = 0;
                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                  if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle);
                  }
                }
              }
              if (special.add) {
                special.add.call(elem, handleObj);
                if (!handleObj.handler.guid) {
                  handleObj.handler.guid = handler.guid;
                }
              }
              if (selector) {
                handlers.splice(handlers.delegateCount++, 0, handleObj);
              } else {
                handlers.push(handleObj);
              }
              jQuery2.event.global[type] = true;
            }
          },
          // Detach an event or set of events from an element
          remove: function(elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
              return;
            }
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              namespaces = (tmp[2] || "").split(".").sort();
              if (!type) {
                for (type in events) {
                  jQuery2.event.remove(elem, type + types[t], handler, selector, true);
                }
                continue;
              }
              special = jQuery2.event.special[type] || {};
              type = (selector ? special.delegateType : special.bindType) || type;
              handlers = events[type] || [];
              tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
              origCount = j = handlers.length;
              while (j--) {
                handleObj = handlers[j];
                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                  handlers.splice(j, 1);
                  if (handleObj.selector) {
                    handlers.delegateCount--;
                  }
                  if (special.remove) {
                    special.remove.call(elem, handleObj);
                  }
                }
              }
              if (origCount && !handlers.length) {
                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                  jQuery2.removeEvent(elem, type, elemData.handle);
                }
                delete events[type];
              }
            }
            if (jQuery2.isEmptyObject(events)) {
              dataPriv.remove(elem, "handle events");
            }
          },
          dispatch: function(nativeEvent) {
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery2.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || /* @__PURE__ */ Object.create(null))[event.type] || [], special = jQuery2.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
              args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
              return;
            }
            handlerQueue = jQuery2.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
              event.currentTarget = matched.elem;
              j = 0;
              while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  ret = ((jQuery2.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                  if (ret !== void 0) {
                    if ((event.result = ret) === false) {
                      event.preventDefault();
                      event.stopPropagation();
                    }
                  }
                }
              }
            }
            if (special.postDispatch) {
              special.postDispatch.call(this, event);
            }
            return event.result;
          },
          handlers: function(event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && // Support: IE <=9
            // Black-hole SVG <use> instance trees (trac-13180)
            cur.nodeType && // Support: Firefox <=42
            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
            // Support: IE 11 only
            // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
            !(event.type === "click" && event.button >= 1)) {
              for (; cur !== this; cur = cur.parentNode || this) {
                if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                  matchedHandlers = [];
                  matchedSelectors = {};
                  for (i = 0; i < delegateCount; i++) {
                    handleObj = handlers[i];
                    sel = handleObj.selector + " ";
                    if (matchedSelectors[sel] === void 0) {
                      matchedSelectors[sel] = handleObj.needsContext ? jQuery2(sel, this).index(cur) > -1 : jQuery2.find(sel, this, null, [cur]).length;
                    }
                    if (matchedSelectors[sel]) {
                      matchedHandlers.push(handleObj);
                    }
                  }
                  if (matchedHandlers.length) {
                    handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                  }
                }
              }
            }
            cur = this;
            if (delegateCount < handlers.length) {
              handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
            }
            return handlerQueue;
          },
          addProp: function(name, hook) {
            Object.defineProperty(jQuery2.Event.prototype, name, {
              enumerable: true,
              configurable: true,
              get: isFunction(hook) ? function() {
                if (this.originalEvent) {
                  return hook(this.originalEvent);
                }
              } : function() {
                if (this.originalEvent) {
                  return this.originalEvent[name];
                }
              },
              set: function(value) {
                Object.defineProperty(this, name, {
                  enumerable: true,
                  configurable: true,
                  writable: true,
                  value
                });
              }
            });
          },
          fix: function(originalEvent) {
            return originalEvent[jQuery2.expando] ? originalEvent : new jQuery2.Event(originalEvent);
          },
          special: {
            load: {
              // Prevent triggered image.load events from bubbling to window.load
              noBubble: true
            },
            click: {
              // Utilize native event to ensure correct state for checkable inputs
              setup: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click", returnTrue);
                }
                return false;
              },
              trigger: function(data) {
                var el = this || data;
                if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                  leverageNative(el, "click");
                }
                return true;
              },
              // For cross-browser consistency, suppress native .click() on links
              // Also prevent it if we're currently inside a leveraged native-event stack
              _default: function(event) {
                var target = event.target;
                return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
              }
            },
            beforeunload: {
              postDispatch: function(event) {
                if (event.result !== void 0 && event.originalEvent) {
                  event.originalEvent.returnValue = event.result;
                }
              }
            }
          }
        };
        function leverageNative(el, type, expectSync2) {
          if (!expectSync2) {
            if (dataPriv.get(el, type) === void 0) {
              jQuery2.event.add(el, type, returnTrue);
            }
            return;
          }
          dataPriv.set(el, type, false);
          jQuery2.event.add(el, type, {
            namespace: false,
            handler: function(event) {
              var notAsync, result, saved = dataPriv.get(this, type);
              if (event.isTrigger & 1 && this[type]) {
                if (!saved.length) {
                  saved = slice.call(arguments);
                  dataPriv.set(this, type, saved);
                  notAsync = expectSync2(this, type);
                  this[type]();
                  result = dataPriv.get(this, type);
                  if (saved !== result || notAsync) {
                    dataPriv.set(this, type, false);
                  } else {
                    result = {};
                  }
                  if (saved !== result) {
                    event.stopImmediatePropagation();
                    event.preventDefault();
                    return result && result.value;
                  }
                } else if ((jQuery2.event.special[type] || {}).delegateType) {
                  event.stopPropagation();
                }
              } else if (saved.length) {
                dataPriv.set(this, type, {
                  value: jQuery2.event.trigger(
                    // Support: IE <=9 - 11+
                    // Extend with the prototype to reset the above stopImmediatePropagation()
                    jQuery2.extend(saved[0], jQuery2.Event.prototype),
                    saved.slice(1),
                    this
                  )
                });
                event.stopImmediatePropagation();
              }
            }
          });
        }
        jQuery2.removeEvent = function(elem, type, handle) {
          if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
          }
        };
        jQuery2.Event = function(src, props) {
          if (!(this instanceof jQuery2.Event)) {
            return new jQuery2.Event(src, props);
          }
          if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && // Support: Android <=2.3 only
            src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
          } else {
            this.type = src;
          }
          if (props) {
            jQuery2.extend(this, props);
          }
          this.timeStamp = src && src.timeStamp || Date.now();
          this[jQuery2.expando] = true;
        };
        jQuery2.Event.prototype = {
          constructor: jQuery2.Event,
          isDefaultPrevented: returnFalse,
          isPropagationStopped: returnFalse,
          isImmediatePropagationStopped: returnFalse,
          isSimulated: false,
          preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
              e.preventDefault();
            }
          },
          stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopPropagation();
            }
          },
          stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
              e.stopImmediatePropagation();
            }
            this.stopPropagation();
          }
        };
        jQuery2.each({
          altKey: true,
          bubbles: true,
          cancelable: true,
          changedTouches: true,
          ctrlKey: true,
          detail: true,
          eventPhase: true,
          metaKey: true,
          pageX: true,
          pageY: true,
          shiftKey: true,
          view: true,
          "char": true,
          code: true,
          charCode: true,
          key: true,
          keyCode: true,
          button: true,
          buttons: true,
          clientX: true,
          clientY: true,
          offsetX: true,
          offsetY: true,
          pointerId: true,
          pointerType: true,
          screenX: true,
          screenY: true,
          targetTouches: true,
          toElement: true,
          touches: true,
          which: true
        }, jQuery2.event.addProp);
        jQuery2.each({ focus: "focusin", blur: "focusout" }, function(type, delegateType) {
          jQuery2.event.special[type] = {
            // Utilize native event if possible so blur/focus sequence is correct
            setup: function() {
              leverageNative(this, type, expectSync);
              return false;
            },
            trigger: function() {
              leverageNative(this, type);
              return true;
            },
            // Suppress native focus or blur if we're currently inside
            // a leveraged native-event stack
            _default: function(event) {
              return dataPriv.get(event.target, type);
            },
            delegateType
          };
        });
        jQuery2.each({
          mouseenter: "mouseover",
          mouseleave: "mouseout",
          pointerenter: "pointerover",
          pointerleave: "pointerout"
        }, function(orig, fix) {
          jQuery2.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
              var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
              if (!related || related !== target && !jQuery2.contains(target, related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(this, arguments);
                event.type = fix;
              }
              return ret;
            }
          };
        });
        jQuery2.fn.extend({
          on: function(types, selector, data, fn2) {
            return on(this, types, selector, data, fn2);
          },
          one: function(types, selector, data, fn2) {
            return on(this, types, selector, data, fn2, 1);
          },
          off: function(types, selector, fn2) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
              handleObj = types.handleObj;
              jQuery2(types.delegateTarget).off(
                handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                handleObj.selector,
                handleObj.handler
              );
              return this;
            }
            if (typeof types === "object") {
              for (type in types) {
                this.off(type, selector, types[type]);
              }
              return this;
            }
            if (selector === false || typeof selector === "function") {
              fn2 = selector;
              selector = void 0;
            }
            if (fn2 === false) {
              fn2 = returnFalse;
            }
            return this.each(function() {
              jQuery2.event.remove(this, types, fn2, selector);
            });
          }
        });
        var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
        function manipulationTarget(elem, content) {
          if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
            return jQuery2(elem).children("tbody")[0] || elem;
          }
          return elem;
        }
        function disableScript(elem) {
          elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
          return elem;
        }
        function restoreScript(elem) {
          if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
          } else {
            elem.removeAttribute("type");
          }
          return elem;
        }
        function cloneCopyEvent(src, dest) {
          var i, l, type, pdataOld, udataOld, udataCur, events;
          if (dest.nodeType !== 1) {
            return;
          }
          if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.get(src);
            events = pdataOld.events;
            if (events) {
              dataPriv.remove(dest, "handle events");
              for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                  jQuery2.event.add(dest, type, events[type][i]);
                }
              }
            }
          }
          if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery2.extend({}, udataOld);
            dataUser.set(dest, udataCur);
          }
        }
        function fixInput(src, dest) {
          var nodeName2 = dest.nodeName.toLowerCase();
          if (nodeName2 === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
          } else if (nodeName2 === "input" || nodeName2 === "textarea") {
            dest.defaultValue = src.defaultValue;
          }
        }
        function domManip(collection, args, callback, ignored) {
          args = flat(args);
          var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
          if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
            return collection.each(function(index) {
              var self2 = collection.eq(index);
              if (valueIsFunction) {
                args[0] = value.call(this, index, self2.html());
              }
              domManip(self2, args, callback, ignored);
            });
          }
          if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }
            if (first || ignored) {
              scripts = jQuery2.map(getAll(fragment, "script"), disableScript);
              hasScripts = scripts.length;
              for (; i < l; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = jQuery2.clone(node, true, true);
                  if (hasScripts) {
                    jQuery2.merge(scripts, getAll(node, "script"));
                  }
                }
                callback.call(collection[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery2.map(scripts, restoreScript);
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery2.contains(doc, node)) {
                    if (node.src && (node.type || "").toLowerCase() !== "module") {
                      if (jQuery2._evalUrl && !node.noModule) {
                        jQuery2._evalUrl(node.src, {
                          nonce: node.nonce || node.getAttribute("nonce")
                        }, doc);
                      }
                    } else {
                      DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                    }
                  }
                }
              }
            }
          }
          return collection;
        }
        function remove(elem, selector, keepData) {
          var node, nodes = selector ? jQuery2.filter(selector, elem) : elem, i = 0;
          for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
              jQuery2.cleanData(getAll(node));
            }
            if (node.parentNode) {
              if (keepData && isAttached(node)) {
                setGlobalEval(getAll(node, "script"));
              }
              node.parentNode.removeChild(node);
            }
          }
          return elem;
        }
        jQuery2.extend({
          htmlPrefilter: function(html) {
            return html;
          },
          clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery2.isXMLDoc(elem)) {
              destElements = getAll(clone);
              srcElements = getAll(elem);
              for (i = 0, l = srcElements.length; i < l; i++) {
                fixInput(srcElements[i], destElements[i]);
              }
            }
            if (dataAndEvents) {
              if (deepDataAndEvents) {
                srcElements = srcElements || getAll(elem);
                destElements = destElements || getAll(clone);
                for (i = 0, l = srcElements.length; i < l; i++) {
                  cloneCopyEvent(srcElements[i], destElements[i]);
                }
              } else {
                cloneCopyEvent(elem, clone);
              }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
              setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }
            return clone;
          },
          cleanData: function(elems) {
            var data, elem, type, special = jQuery2.event.special, i = 0;
            for (; (elem = elems[i]) !== void 0; i++) {
              if (acceptData(elem)) {
                if (data = elem[dataPriv.expando]) {
                  if (data.events) {
                    for (type in data.events) {
                      if (special[type]) {
                        jQuery2.event.remove(elem, type);
                      } else {
                        jQuery2.removeEvent(elem, type, data.handle);
                      }
                    }
                  }
                  elem[dataPriv.expando] = void 0;
                }
                if (elem[dataUser.expando]) {
                  elem[dataUser.expando] = void 0;
                }
              }
            }
          }
        });
        jQuery2.fn.extend({
          detach: function(selector) {
            return remove(this, selector, true);
          },
          remove: function(selector) {
            return remove(this, selector);
          },
          text: function(value) {
            return access(this, function(value2) {
              return value2 === void 0 ? jQuery2.text(this) : this.empty().each(function() {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                  this.textContent = value2;
                }
              });
            }, null, value, arguments.length);
          },
          append: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.appendChild(elem);
              }
            });
          },
          prepend: function() {
            return domManip(this, arguments, function(elem) {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                var target = manipulationTarget(this, elem);
                target.insertBefore(elem, target.firstChild);
              }
            });
          },
          before: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this);
              }
            });
          },
          after: function() {
            return domManip(this, arguments, function(elem) {
              if (this.parentNode) {
                this.parentNode.insertBefore(elem, this.nextSibling);
              }
            });
          },
          empty: function() {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
              if (elem.nodeType === 1) {
                jQuery2.cleanData(getAll(elem, false));
                elem.textContent = "";
              }
            }
            return this;
          },
          clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
              return jQuery2.clone(this, dataAndEvents, deepDataAndEvents);
            });
          },
          html: function(value) {
            return access(this, function(value2) {
              var elem = this[0] || {}, i = 0, l = this.length;
              if (value2 === void 0 && elem.nodeType === 1) {
                return elem.innerHTML;
              }
              if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
                value2 = jQuery2.htmlPrefilter(value2);
                try {
                  for (; i < l; i++) {
                    elem = this[i] || {};
                    if (elem.nodeType === 1) {
                      jQuery2.cleanData(getAll(elem, false));
                      elem.innerHTML = value2;
                    }
                  }
                  elem = 0;
                } catch (e) {
                }
              }
              if (elem) {
                this.empty().append(value2);
              }
            }, null, value, arguments.length);
          },
          replaceWith: function() {
            var ignored = [];
            return domManip(this, arguments, function(elem) {
              var parent = this.parentNode;
              if (jQuery2.inArray(this, ignored) < 0) {
                jQuery2.cleanData(getAll(this));
                if (parent) {
                  parent.replaceChild(elem, this);
                }
              }
            }, ignored);
          }
        });
        jQuery2.each({
          appendTo: "append",
          prependTo: "prepend",
          insertBefore: "before",
          insertAfter: "after",
          replaceAll: "replaceWith"
        }, function(name, original) {
          jQuery2.fn[name] = function(selector) {
            var elems, ret = [], insert = jQuery2(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
              elems = i === last ? this : this.clone(true);
              jQuery2(insert[i])[original](elems);
              push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
          };
        });
        var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
        var rcustomProp = /^--/;
        var getStyles = function(elem) {
          var view = elem.ownerDocument.defaultView;
          if (!view || !view.opener) {
            view = window2;
          }
          return view.getComputedStyle(elem);
        };
        var swap = function(elem, options, callback) {
          var ret, name, old = {};
          for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
          }
          ret = callback.call(elem);
          for (name in options) {
            elem.style[name] = old[name];
          }
          return ret;
        };
        var rboxStyle = new RegExp(cssExpand.join("|"), "i");
        var whitespace = "[\\x20\\t\\r\\n\\f]";
        var rtrimCSS = new RegExp(
          "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
          "g"
        );
        (function() {
          function computeStyleTests() {
            if (!div) {
              return;
            }
            container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
            div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window2.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            div = null;
          }
          function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
          }
          var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
          if (!div.style) {
            return;
          }
          div.style.backgroundClip = "content-box";
          div.cloneNode(true).style.backgroundClip = "";
          support.clearCloneStyle = div.style.backgroundClip === "content-box";
          jQuery2.extend(support, {
            boxSizingReliable: function() {
              computeStyleTests();
              return boxSizingReliableVal;
            },
            pixelBoxStyles: function() {
              computeStyleTests();
              return pixelBoxStylesVal;
            },
            pixelPosition: function() {
              computeStyleTests();
              return pixelPositionVal;
            },
            reliableMarginLeft: function() {
              computeStyleTests();
              return reliableMarginLeftVal;
            },
            scrollboxSize: function() {
              computeStyleTests();
              return scrollboxSizeVal;
            },
            // Support: IE 9 - 11+, Edge 15 - 18+
            // IE/Edge misreport `getComputedStyle` of table rows with width/height
            // set in CSS while `offset*` properties report correct values.
            // Behavior in IE 9 is more subtle than in newer versions & it passes
            // some versions of this test; make sure not to make it pass there!
            //
            // Support: Firefox 70+
            // Only Firefox includes border widths
            // in computed dimensions. (gh-4529)
            reliableTrDimensions: function() {
              var table, tr, trChild, trStyle;
              if (reliableTrDimensionsVal == null) {
                table = document2.createElement("table");
                tr = document2.createElement("tr");
                trChild = document2.createElement("div");
                table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                tr.style.cssText = "border:1px solid";
                tr.style.height = "1px";
                trChild.style.height = "9px";
                trChild.style.display = "block";
                documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
                trStyle = window2.getComputedStyle(tr);
                reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
                documentElement.removeChild(table);
              }
              return reliableTrDimensionsVal;
            }
          });
        })();
        function curCSS(elem, name, computed) {
          var width, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name), style = elem.style;
          computed = computed || getStyles(elem);
          if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (isCustomProp && ret) {
              ret = ret.replace(rtrimCSS, "$1") || void 0;
            }
            if (ret === "" && !isAttached(elem)) {
              ret = jQuery2.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
              width = style.width;
              minWidth = style.minWidth;
              maxWidth = style.maxWidth;
              style.minWidth = style.maxWidth = style.width = ret;
              ret = computed.width;
              style.width = width;
              style.minWidth = minWidth;
              style.maxWidth = maxWidth;
            }
          }
          return ret !== void 0 ? (
            // Support: IE <=9 - 11 only
            // IE returns zIndex value as an integer.
            ret + ""
          ) : ret;
        }
        function addGetHookIf(conditionFn, hookFn) {
          return {
            get: function() {
              if (conditionFn()) {
                delete this.get;
                return;
              }
              return (this.get = hookFn).apply(this, arguments);
            }
          };
        }
        var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
        function vendorPropName(name) {
          var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
          while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
              return name;
            }
          }
        }
        function finalPropName(name) {
          var final = jQuery2.cssProps[name] || vendorProps[name];
          if (final) {
            return final;
          }
          if (name in emptyStyle) {
            return name;
          }
          return vendorProps[name] = vendorPropName(name) || name;
        }
        var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
          letterSpacing: "0",
          fontWeight: "400"
        };
        function setPositiveNumber(_elem, value, subtract) {
          var matches = rcssNum.exec(value);
          return matches ? (
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px")
          ) : value;
        }
        function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
          var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0;
          if (box === (isBorderBox ? "border" : "content")) {
            return 0;
          }
          for (; i < 4; i += 2) {
            if (box === "margin") {
              delta += jQuery2.css(elem, box + cssExpand[i], true, styles);
            }
            if (!isBorderBox) {
              delta += jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
              if (box !== "padding") {
                delta += jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              } else {
                extra += jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            } else {
              if (box === "content") {
                delta -= jQuery2.css(elem, "padding" + cssExpand[i], true, styles);
              }
              if (box !== "margin") {
                delta -= jQuery2.css(elem, "border" + cssExpand[i] + "Width", true, styles);
              }
            }
          }
          if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(
              elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5
              // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
              // Use an explicit zero to avoid NaN (gh-3964)
            )) || 0;
          }
          return delta;
        }
        function getWidthOrHeight(elem, dimension, extra) {
          var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
          if (rnumnonpx.test(val)) {
            if (!extra) {
              return val;
            }
            val = "auto";
          }
          if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
          // IE/Edge misreport `getComputedStyle` of table rows with width/height
          // set in CSS while `offset*` properties report correct values.
          // Interestingly, in some cases IE 9 doesn't suffer from this issue.
          !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
          // This happens for inline elements with no explicit setting (gh-3571)
          val === "auto" || // Support: Android <=4.1 - 4.3 only
          // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
          !parseFloat(val) && jQuery2.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
          elem.getClientRects().length) {
            isBorderBox = jQuery2.css(elem, "boxSizing", false, styles) === "border-box";
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
              val = elem[offsetProp];
            }
          }
          val = parseFloat(val) || 0;
          return val + boxModelAdjustment(
            elem,
            dimension,
            extra || (isBorderBox ? "border" : "content"),
            valueIsBorderBox,
            styles,
            // Provide the current computed size to request scroll gutter calculation (gh-3589)
            val
          ) + "px";
        }
        jQuery2.extend({
          // Add in style property hooks for overriding the default
          // behavior of getting and setting a style property
          cssHooks: {
            opacity: {
              get: function(elem, computed) {
                if (computed) {
                  var ret = curCSS(elem, "opacity");
                  return ret === "" ? "1" : ret;
                }
              }
            }
          },
          // Don't automatically add "px" to these possibly-unitless properties
          cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "gridArea": true,
            "gridColumn": true,
            "gridColumnEnd": true,
            "gridColumnStart": true,
            "gridRow": true,
            "gridRowEnd": true,
            "gridRowStart": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
          },
          // Add in properties whose names you wish to fix before
          // setting or getting the value
          cssProps: {},
          // Get and set the style property on a DOM Node
          style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
              return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery2.cssHooks[name] || jQuery2.cssHooks[origName];
            if (value !== void 0) {
              type = typeof value;
              if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                value = adjustCSS(elem, name, ret);
                type = "number";
              }
              if (value == null || value !== value) {
                return;
              }
              if (type === "number" && !isCustomProp) {
                value += ret && ret[3] || (jQuery2.cssNumber[origName] ? "" : "px");
              }
              if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                style[name] = "inherit";
              }
              if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
                if (isCustomProp) {
                  style.setProperty(name, value);
                } else {
                  style[name] = value;
                }
              }
            } else {
              if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
                return ret;
              }
              return style[name];
            }
          },
          css: function(elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
              name = finalPropName(origName);
            }
            hooks = jQuery2.cssHooks[name] || jQuery2.cssHooks[origName];
            if (hooks && "get" in hooks) {
              val = hooks.get(elem, true, extra);
            }
            if (val === void 0) {
              val = curCSS(elem, name, styles);
            }
            if (val === "normal" && name in cssNormalTransform) {
              val = cssNormalTransform[name];
            }
            if (extra === "" || extra) {
              num = parseFloat(val);
              return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
          }
        });
        jQuery2.each(["height", "width"], function(_i, dimension) {
          jQuery2.cssHooks[dimension] = {
            get: function(elem, computed, extra) {
              if (computed) {
                return rdisplayswap.test(jQuery2.css(elem, "display")) && // Support: Safari 8+
                // Table columns in Safari have non-zero offsetWidth & zero
                // getBoundingClientRect().width unless display is changed.
                // Support: IE <=11 only
                // Running getBoundingClientRect on a disconnected node
                // in IE throws an error.
                (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                  return getWidthOrHeight(elem, dimension, extra);
                }) : getWidthOrHeight(elem, dimension, extra);
              }
            },
            set: function(elem, value, extra) {
              var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery2.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(
                elem,
                dimension,
                extra,
                isBorderBox,
                styles
              ) : 0;
              if (isBorderBox && scrollboxSizeBuggy) {
                subtract -= Math.ceil(
                  elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5
                );
              }
              if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
                elem.style[dimension] = value;
                value = jQuery2.css(elem, dimension);
              }
              return setPositiveNumber(elem, value, subtract);
            }
          };
        });
        jQuery2.cssHooks.marginLeft = addGetHookIf(
          support.reliableMarginLeft,
          function(elem, computed) {
            if (computed) {
              return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
                return elem.getBoundingClientRect().left;
              })) + "px";
            }
          }
        );
        jQuery2.each({
          margin: "",
          padding: "",
          border: "Width"
        }, function(prefix, suffix) {
          jQuery2.cssHooks[prefix + suffix] = {
            expand: function(value) {
              var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
              for (; i < 4; i++) {
                expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
              }
              return expanded;
            }
          };
          if (prefix !== "margin") {
            jQuery2.cssHooks[prefix + suffix].set = setPositiveNumber;
          }
        });
        jQuery2.fn.extend({
          css: function(name, value) {
            return access(this, function(elem, name2, value2) {
              var styles, len, map = {}, i = 0;
              if (Array.isArray(name2)) {
                styles = getStyles(elem);
                len = name2.length;
                for (; i < len; i++) {
                  map[name2[i]] = jQuery2.css(elem, name2[i], false, styles);
                }
                return map;
              }
              return value2 !== void 0 ? jQuery2.style(elem, name2, value2) : jQuery2.css(elem, name2);
            }, name, value, arguments.length > 1);
          }
        });
        function Tween(elem, options, prop, end2, easing) {
          return new Tween.prototype.init(elem, options, prop, end2, easing);
        }
        jQuery2.Tween = Tween;
        Tween.prototype = {
          constructor: Tween,
          init: function(elem, options, prop, end2, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery2.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end2;
            this.unit = unit || (jQuery2.cssNumber[prop] ? "" : "px");
          },
          cur: function() {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
          },
          run: function(percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
              this.pos = eased = jQuery2.easing[this.easing](
                percent,
                this.options.duration * percent,
                0,
                1,
                this.options.duration
              );
            } else {
              this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
              this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
              hooks.set(this);
            } else {
              Tween.propHooks._default.set(this);
            }
            return this;
          }
        };
        Tween.prototype.init.prototype = Tween.prototype;
        Tween.propHooks = {
          _default: {
            get: function(tween) {
              var result;
              if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                return tween.elem[tween.prop];
              }
              result = jQuery2.css(tween.elem, tween.prop, "");
              return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {
              if (jQuery2.fx.step[tween.prop]) {
                jQuery2.fx.step[tween.prop](tween);
              } else if (tween.elem.nodeType === 1 && (jQuery2.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                jQuery2.style(tween.elem, tween.prop, tween.now + tween.unit);
              } else {
                tween.elem[tween.prop] = tween.now;
              }
            }
          }
        };
        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
          set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
              tween.elem[tween.prop] = tween.now;
            }
          }
        };
        jQuery2.easing = {
          linear: function(p) {
            return p;
          },
          swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
          },
          _default: "swing"
        };
        jQuery2.fx = Tween.prototype.init;
        jQuery2.fx.step = {};
        var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
        function schedule() {
          if (inProgress) {
            if (document2.hidden === false && window2.requestAnimationFrame) {
              window2.requestAnimationFrame(schedule);
            } else {
              window2.setTimeout(schedule, jQuery2.fx.interval);
            }
            jQuery2.fx.tick();
          }
        }
        function createFxNow() {
          window2.setTimeout(function() {
            fxNow = void 0;
          });
          return fxNow = Date.now();
        }
        function genFx(type, includeWidth) {
          var which, i = 0, attrs = { height: type };
          includeWidth = includeWidth ? 1 : 0;
          for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
          }
          if (includeWidth) {
            attrs.opacity = attrs.width = type;
          }
          return attrs;
        }
        function createTween(value, prop, animation) {
          var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
          for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
              return tween;
            }
          }
        }
        function defaultPrefilter(elem, props, opts) {
          var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
          if (!opts.queue) {
            hooks = jQuery2._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
              hooks.unqueued = 0;
              oldfire = hooks.empty.fire;
              hooks.empty.fire = function() {
                if (!hooks.unqueued) {
                  oldfire();
                }
              };
            }
            hooks.unqueued++;
            anim.always(function() {
              anim.always(function() {
                hooks.unqueued--;
                if (!jQuery2.queue(elem, "fx").length) {
                  hooks.empty.fire();
                }
              });
            });
          }
          for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
              delete props[prop];
              toggle = toggle || value === "toggle";
              if (value === (hidden ? "hide" : "show")) {
                if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                  hidden = true;
                } else {
                  continue;
                }
              }
              orig[prop] = dataShow && dataShow[prop] || jQuery2.style(elem, prop);
            }
          }
          propTween = !jQuery2.isEmptyObject(props);
          if (!propTween && jQuery2.isEmptyObject(orig)) {
            return;
          }
          if (isBox && elem.nodeType === 1) {
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
              restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery2.css(elem, "display");
            if (display === "none") {
              if (restoreDisplay) {
                display = restoreDisplay;
              } else {
                showHide([elem], true);
                restoreDisplay = elem.style.display || restoreDisplay;
                display = jQuery2.css(elem, "display");
                showHide([elem]);
              }
            }
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
              if (jQuery2.css(elem, "float") === "none") {
                if (!propTween) {
                  anim.done(function() {
                    style.display = restoreDisplay;
                  });
                  if (restoreDisplay == null) {
                    display = style.display;
                    restoreDisplay = display === "none" ? "" : display;
                  }
                }
                style.display = "inline-block";
              }
            }
          }
          if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }
          propTween = false;
          for (prop in orig) {
            if (!propTween) {
              if (dataShow) {
                if ("hidden" in dataShow) {
                  hidden = dataShow.hidden;
                }
              } else {
                dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
              }
              if (toggle) {
                dataShow.hidden = !hidden;
              }
              if (hidden) {
                showHide([elem], true);
              }
              anim.done(function() {
                if (!hidden) {
                  showHide([elem]);
                }
                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                  jQuery2.style(elem, prop, orig[prop]);
                }
              });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = propTween.start;
              if (hidden) {
                propTween.end = propTween.start;
                propTween.start = 0;
              }
            }
          }
        }
        function propFilter(props, specialEasing) {
          var index, name, easing, value, hooks;
          for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
              easing = value[1];
              value = props[index] = value[0];
            }
            if (index !== name) {
              props[name] = value;
              delete props[index];
            }
            hooks = jQuery2.cssHooks[name];
            if (hooks && "expand" in hooks) {
              value = hooks.expand(value);
              delete props[name];
              for (index in value) {
                if (!(index in props)) {
                  props[index] = value[index];
                  specialEasing[index] = easing;
                }
              }
            } else {
              specialEasing[name] = easing;
            }
          }
        }
        function Animation(elem, properties, options) {
          var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery2.Deferred().always(function() {
            delete tick.elem;
          }), tick = function() {
            if (stopped) {
              return false;
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(percent);
            }
            deferred.notifyWith(elem, [animation, percent, remaining]);
            if (percent < 1 && length2) {
              return remaining;
            }
            if (!length2) {
              deferred.notifyWith(elem, [animation, 1, 0]);
            }
            deferred.resolveWith(elem, [animation]);
            return false;
          }, animation = deferred.promise({
            elem,
            props: jQuery2.extend({}, properties),
            opts: jQuery2.extend(true, {
              specialEasing: {},
              easing: jQuery2.easing._default
            }, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end2) {
              var tween = jQuery2.Tween(
                elem,
                animation.opts,
                prop,
                end2,
                animation.opts.specialEasing[prop] || animation.opts.easing
              );
              animation.tweens.push(tween);
              return tween;
            },
            stop: function(gotoEnd) {
              var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
              if (stopped) {
                return this;
              }
              stopped = true;
              for (; index2 < length2; index2++) {
                animation.tweens[index2].run(1);
              }
              if (gotoEnd) {
                deferred.notifyWith(elem, [animation, 1, 0]);
                deferred.resolveWith(elem, [animation, gotoEnd]);
              } else {
                deferred.rejectWith(elem, [animation, gotoEnd]);
              }
              return this;
            }
          }), props = animation.props;
          propFilter(props, animation.opts.specialEasing);
          for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
              if (isFunction(result.stop)) {
                jQuery2._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
              }
              return result;
            }
          }
          jQuery2.map(props, createTween, animation);
          if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
          }
          animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
          jQuery2.fx.timer(
            jQuery2.extend(tick, {
              elem,
              anim: animation,
              queue: animation.opts.queue
            })
          );
          return animation;
        }
        jQuery2.Animation = jQuery2.extend(Animation, {
          tweeners: {
            "*": [function(prop, value) {
              var tween = this.createTween(prop, value);
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
              return tween;
            }]
          },
          tweener: function(props, callback) {
            if (isFunction(props)) {
              callback = props;
              props = ["*"];
            } else {
              props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
              prop = props[index];
              Animation.tweeners[prop] = Animation.tweeners[prop] || [];
              Animation.tweeners[prop].unshift(callback);
            }
          },
          prefilters: [defaultPrefilter],
          prefilter: function(callback, prepend) {
            if (prepend) {
              Animation.prefilters.unshift(callback);
            } else {
              Animation.prefilters.push(callback);
            }
          }
        });
        jQuery2.speed = function(speed, easing, fn2) {
          var opt = speed && typeof speed === "object" ? jQuery2.extend({}, speed) : {
            complete: fn2 || !fn2 && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn2 && easing || easing && !isFunction(easing) && easing
          };
          if (jQuery2.fx.off) {
            opt.duration = 0;
          } else {
            if (typeof opt.duration !== "number") {
              if (opt.duration in jQuery2.fx.speeds) {
                opt.duration = jQuery2.fx.speeds[opt.duration];
              } else {
                opt.duration = jQuery2.fx.speeds._default;
              }
            }
          }
          if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
          }
          opt.old = opt.complete;
          opt.complete = function() {
            if (isFunction(opt.old)) {
              opt.old.call(this);
            }
            if (opt.queue) {
              jQuery2.dequeue(this, opt.queue);
            }
          };
          return opt;
        };
        jQuery2.fn.extend({
          fadeTo: function(speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
          },
          animate: function(prop, speed, easing, callback) {
            var empty = jQuery2.isEmptyObject(prop), optall = jQuery2.speed(speed, easing, callback), doAnimation = function() {
              var anim = Animation(this, jQuery2.extend({}, prop), optall);
              if (empty || dataPriv.get(this, "finish")) {
                anim.stop(true);
              }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
          },
          stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
              var stop = hooks.stop;
              delete hooks.stop;
              stop(gotoEnd);
            };
            if (typeof type !== "string") {
              gotoEnd = clearQueue;
              clearQueue = type;
              type = void 0;
            }
            if (clearQueue) {
              this.queue(type || "fx", []);
            }
            return this.each(function() {
              var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery2.timers, data = dataPriv.get(this);
              if (index) {
                if (data[index] && data[index].stop) {
                  stopQueue(data[index]);
                }
              } else {
                for (index in data) {
                  if (data[index] && data[index].stop && rrun.test(index)) {
                    stopQueue(data[index]);
                  }
                }
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                  timers[index].anim.stop(gotoEnd);
                  dequeue = false;
                  timers.splice(index, 1);
                }
              }
              if (dequeue || !gotoEnd) {
                jQuery2.dequeue(this, type);
              }
            });
          },
          finish: function(type) {
            if (type !== false) {
              type = type || "fx";
            }
            return this.each(function() {
              var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery2.timers, length = queue ? queue.length : 0;
              data.finish = true;
              jQuery2.queue(this, type, []);
              if (hooks && hooks.stop) {
                hooks.stop.call(this, true);
              }
              for (index = timers.length; index--; ) {
                if (timers[index].elem === this && timers[index].queue === type) {
                  timers[index].anim.stop(true);
                  timers.splice(index, 1);
                }
              }
              for (index = 0; index < length; index++) {
                if (queue[index] && queue[index].finish) {
                  queue[index].finish.call(this);
                }
              }
              delete data.finish;
            });
          }
        });
        jQuery2.each(["toggle", "show", "hide"], function(_i, name) {
          var cssFn = jQuery2.fn[name];
          jQuery2.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
          };
        });
        jQuery2.each({
          slideDown: genFx("show"),
          slideUp: genFx("hide"),
          slideToggle: genFx("toggle"),
          fadeIn: { opacity: "show" },
          fadeOut: { opacity: "hide" },
          fadeToggle: { opacity: "toggle" }
        }, function(name, props) {
          jQuery2.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
          };
        });
        jQuery2.timers = [];
        jQuery2.fx.tick = function() {
          var timer, i = 0, timers = jQuery2.timers;
          fxNow = Date.now();
          for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
              timers.splice(i--, 1);
            }
          }
          if (!timers.length) {
            jQuery2.fx.stop();
          }
          fxNow = void 0;
        };
        jQuery2.fx.timer = function(timer) {
          jQuery2.timers.push(timer);
          jQuery2.fx.start();
        };
        jQuery2.fx.interval = 13;
        jQuery2.fx.start = function() {
          if (inProgress) {
            return;
          }
          inProgress = true;
          schedule();
        };
        jQuery2.fx.stop = function() {
          inProgress = null;
        };
        jQuery2.fx.speeds = {
          slow: 600,
          fast: 200,
          // Default speed
          _default: 400
        };
        jQuery2.fn.delay = function(time, type) {
          time = jQuery2.fx ? jQuery2.fx.speeds[time] || time : time;
          type = type || "fx";
          return this.queue(type, function(next, hooks) {
            var timeout = window2.setTimeout(next, time);
            hooks.stop = function() {
              window2.clearTimeout(timeout);
            };
          });
        };
        (function() {
          var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
          input.type = "checkbox";
          support.checkOn = input.value !== "";
          support.optSelected = opt.selected;
          input = document2.createElement("input");
          input.value = "t";
          input.type = "radio";
          support.radioValue = input.value === "t";
        })();
        var boolHook, attrHandle = jQuery2.expr.attrHandle;
        jQuery2.fn.extend({
          attr: function(name, value) {
            return access(this, jQuery2.attr, name, value, arguments.length > 1);
          },
          removeAttr: function(name) {
            return this.each(function() {
              jQuery2.removeAttr(this, name);
            });
          }
        });
        jQuery2.extend({
          attr: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (typeof elem.getAttribute === "undefined") {
              return jQuery2.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
              hooks = jQuery2.attrHooks[name.toLowerCase()] || (jQuery2.expr.match.bool.test(name) ? boolHook : void 0);
            }
            if (value !== void 0) {
              if (value === null) {
                jQuery2.removeAttr(elem, name);
                return;
              }
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              elem.setAttribute(name, value + "");
              return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            ret = jQuery2.find.attr(elem, name);
            return ret == null ? void 0 : ret;
          },
          attrHooks: {
            type: {
              set: function(elem, value) {
                if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                  var val = elem.value;
                  elem.setAttribute("type", value);
                  if (val) {
                    elem.value = val;
                  }
                  return value;
                }
              }
            }
          },
          removeAttr: function(elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
              while (name = attrNames[i++]) {
                elem.removeAttribute(name);
              }
            }
          }
        });
        boolHook = {
          set: function(elem, value, name) {
            if (value === false) {
              jQuery2.removeAttr(elem, name);
            } else {
              elem.setAttribute(name, name);
            }
            return name;
          }
        };
        jQuery2.each(jQuery2.expr.match.bool.source.match(/\w+/g), function(_i, name) {
          var getter = attrHandle[name] || jQuery2.find.attr;
          attrHandle[name] = function(elem, name2, isXML) {
            var ret, handle, lowercaseName = name2.toLowerCase();
            if (!isXML) {
              handle = attrHandle[lowercaseName];
              attrHandle[lowercaseName] = ret;
              ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
              attrHandle[lowercaseName] = handle;
            }
            return ret;
          };
        });
        var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
        jQuery2.fn.extend({
          prop: function(name, value) {
            return access(this, jQuery2.prop, name, value, arguments.length > 1);
          },
          removeProp: function(name) {
            return this.each(function() {
              delete this[jQuery2.propFix[name] || name];
            });
          }
        });
        jQuery2.extend({
          prop: function(elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
              return;
            }
            if (nType !== 1 || !jQuery2.isXMLDoc(elem)) {
              name = jQuery2.propFix[name] || name;
              hooks = jQuery2.propHooks[name];
            }
            if (value !== void 0) {
              if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
                return ret;
              }
              return elem[name] = value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
              return ret;
            }
            return elem[name];
          },
          propHooks: {
            tabIndex: {
              get: function(elem) {
                var tabindex = jQuery2.find.attr(elem, "tabindex");
                if (tabindex) {
                  return parseInt(tabindex, 10);
                }
                if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                  return 0;
                }
                return -1;
              }
            }
          },
          propFix: {
            "for": "htmlFor",
            "class": "className"
          }
        });
        if (!support.optSelected) {
          jQuery2.propHooks.selected = {
            get: function(elem) {
              var parent = elem.parentNode;
              if (parent && parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
              return null;
            },
            set: function(elem) {
              var parent = elem.parentNode;
              if (parent) {
                parent.selectedIndex;
                if (parent.parentNode) {
                  parent.parentNode.selectedIndex;
                }
              }
            }
          };
        }
        jQuery2.each([
          "tabIndex",
          "readOnly",
          "maxLength",
          "cellSpacing",
          "cellPadding",
          "rowSpan",
          "colSpan",
          "useMap",
          "frameBorder",
          "contentEditable"
        ], function() {
          jQuery2.propFix[this.toLowerCase()] = this;
        });
        function stripAndCollapse(value) {
          var tokens = value.match(rnothtmlwhite) || [];
          return tokens.join(" ");
        }
        function getClass(elem) {
          return elem.getAttribute && elem.getAttribute("class") || "";
        }
        function classesToArray(value) {
          if (Array.isArray(value)) {
            return value;
          }
          if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
          }
          return [];
        }
        jQuery2.fn.extend({
          addClass: function(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value)) {
              return this.each(function(j) {
                jQuery2(this).addClass(value.call(this, j, getClass(this)));
              });
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    if (cur.indexOf(" " + className + " ") < 0) {
                      cur += className + " ";
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          removeClass: function(value) {
            var classNames, cur, curValue, className, i, finalValue;
            if (isFunction(value)) {
              return this.each(function(j) {
                jQuery2(this).removeClass(value.call(this, j, getClass(this)));
              });
            }
            if (!arguments.length) {
              return this.attr("class", "");
            }
            classNames = classesToArray(value);
            if (classNames.length) {
              return this.each(function() {
                curValue = getClass(this);
                cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
                if (cur) {
                  for (i = 0; i < classNames.length; i++) {
                    className = classNames[i];
                    while (cur.indexOf(" " + className + " ") > -1) {
                      cur = cur.replace(" " + className + " ", " ");
                    }
                  }
                  finalValue = stripAndCollapse(cur);
                  if (curValue !== finalValue) {
                    this.setAttribute("class", finalValue);
                  }
                }
              });
            }
            return this;
          },
          toggleClass: function(value, stateVal) {
            var classNames, className, i, self2, type = typeof value, isValidValue = type === "string" || Array.isArray(value);
            if (isFunction(value)) {
              return this.each(function(i2) {
                jQuery2(this).toggleClass(
                  value.call(this, i2, getClass(this), stateVal),
                  stateVal
                );
              });
            }
            if (typeof stateVal === "boolean" && isValidValue) {
              return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            classNames = classesToArray(value);
            return this.each(function() {
              if (isValidValue) {
                self2 = jQuery2(this);
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  if (self2.hasClass(className)) {
                    self2.removeClass(className);
                  } else {
                    self2.addClass(className);
                  }
                }
              } else if (value === void 0 || type === "boolean") {
                className = getClass(this);
                if (className) {
                  dataPriv.set(this, "__className__", className);
                }
                if (this.setAttribute) {
                  this.setAttribute(
                    "class",
                    className || value === false ? "" : dataPriv.get(this, "__className__") || ""
                  );
                }
              }
            });
          },
          hasClass: function(selector) {
            var className, elem, i = 0;
            className = " " + selector + " ";
            while (elem = this[i++]) {
              if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                return true;
              }
            }
            return false;
          }
        });
        var rreturn = /\r/g;
        jQuery2.fn.extend({
          val: function(value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
              if (elem) {
                hooks = jQuery2.valHooks[elem.type] || jQuery2.valHooks[elem.nodeName.toLowerCase()];
                if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                  return ret;
                }
                ret = elem.value;
                if (typeof ret === "string") {
                  return ret.replace(rreturn, "");
                }
                return ret == null ? "" : ret;
              }
              return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function(i) {
              var val;
              if (this.nodeType !== 1) {
                return;
              }
              if (valueIsFunction) {
                val = value.call(this, i, jQuery2(this).val());
              } else {
                val = value;
              }
              if (val == null) {
                val = "";
              } else if (typeof val === "number") {
                val += "";
              } else if (Array.isArray(val)) {
                val = jQuery2.map(val, function(value2) {
                  return value2 == null ? "" : value2 + "";
                });
              }
              hooks = jQuery2.valHooks[this.type] || jQuery2.valHooks[this.nodeName.toLowerCase()];
              if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
                this.value = val;
              }
            });
          }
        });
        jQuery2.extend({
          valHooks: {
            option: {
              get: function(elem) {
                var val = jQuery2.find.attr(elem, "value");
                return val != null ? val : (
                  // Support: IE <=10 - 11 only
                  // option.text throws exceptions (trac-14686, trac-14858)
                  // Strip and collapse whitespace
                  // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                  stripAndCollapse(jQuery2.text(elem))
                );
              }
            },
            select: {
              get: function(elem) {
                var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max2 = one ? index + 1 : options.length;
                if (index < 0) {
                  i = max2;
                } else {
                  i = one ? index : 0;
                }
                for (; i < max2; i++) {
                  option = options[i];
                  if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
                  !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                    value = jQuery2(option).val();
                    if (one) {
                      return value;
                    }
                    values.push(value);
                  }
                }
                return values;
              },
              set: function(elem, value) {
                var optionSet, option, options = elem.options, values = jQuery2.makeArray(value), i = options.length;
                while (i--) {
                  option = options[i];
                  if (option.selected = jQuery2.inArray(jQuery2.valHooks.option.get(option), values) > -1) {
                    optionSet = true;
                  }
                }
                if (!optionSet) {
                  elem.selectedIndex = -1;
                }
                return values;
              }
            }
          }
        });
        jQuery2.each(["radio", "checkbox"], function() {
          jQuery2.valHooks[this] = {
            set: function(elem, value) {
              if (Array.isArray(value)) {
                return elem.checked = jQuery2.inArray(jQuery2(elem).val(), value) > -1;
              }
            }
          };
          if (!support.checkOn) {
            jQuery2.valHooks[this].get = function(elem) {
              return elem.getAttribute("value") === null ? "on" : elem.value;
            };
          }
        });
        support.focusin = "onfocusin" in window2;
        var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
          e.stopPropagation();
        };
        jQuery2.extend(jQuery2.event, {
          trigger: function(event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = lastElement = tmp = elem = elem || document2;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
              return;
            }
            if (rfocusMorph.test(type + jQuery2.event.triggered)) {
              return;
            }
            if (type.indexOf(".") > -1) {
              namespaces = type.split(".");
              type = namespaces.shift();
              namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery2.expando] ? event : new jQuery2.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = void 0;
            if (!event.target) {
              event.target = elem;
            }
            data = data == null ? [event] : jQuery2.makeArray(data, [event]);
            special = jQuery2.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
              return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
              bubbleType = special.delegateType || type;
              if (!rfocusMorph.test(bubbleType + type)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }
              if (tmp === (elem.ownerDocument || document2)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
              }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
              lastElement = cur;
              event.type = i > 1 ? bubbleType : special.bindType || type;
              handle = (dataPriv.get(cur, "events") || /* @__PURE__ */ Object.create(null))[event.type] && dataPriv.get(cur, "handle");
              if (handle) {
                handle.apply(cur, data);
              }
              handle = ontype && cur[ontype];
              if (handle && handle.apply && acceptData(cur)) {
                event.result = handle.apply(cur, data);
                if (event.result === false) {
                  event.preventDefault();
                }
              }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                  tmp = elem[ontype];
                  if (tmp) {
                    elem[ontype] = null;
                  }
                  jQuery2.event.triggered = type;
                  if (event.isPropagationStopped()) {
                    lastElement.addEventListener(type, stopPropagationCallback);
                  }
                  elem[type]();
                  if (event.isPropagationStopped()) {
                    lastElement.removeEventListener(type, stopPropagationCallback);
                  }
                  jQuery2.event.triggered = void 0;
                  if (tmp) {
                    elem[ontype] = tmp;
                  }
                }
              }
            }
            return event.result;
          },
          // Piggyback on a donor event to simulate a different one
          // Used only for `focus(in | out)` events
          simulate: function(type, elem, event) {
            var e = jQuery2.extend(
              new jQuery2.Event(),
              event,
              {
                type,
                isSimulated: true
              }
            );
            jQuery2.event.trigger(e, null, elem);
          }
        });
        jQuery2.fn.extend({
          trigger: function(type, data) {
            return this.each(function() {
              jQuery2.event.trigger(type, data, this);
            });
          },
          triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
              return jQuery2.event.trigger(type, data, elem, true);
            }
          }
        });
        if (!support.focusin) {
          jQuery2.each({ focus: "focusin", blur: "focusout" }, function(orig, fix) {
            var handler = function(event) {
              jQuery2.event.simulate(fix, event.target, jQuery2.event.fix(event));
            };
            jQuery2.event.special[fix] = {
              setup: function() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix);
                if (!attaches) {
                  doc.addEventListener(orig, handler, true);
                }
                dataPriv.access(doc, fix, (attaches || 0) + 1);
              },
              teardown: function() {
                var doc = this.ownerDocument || this.document || this, attaches = dataPriv.access(doc, fix) - 1;
                if (!attaches) {
                  doc.removeEventListener(orig, handler, true);
                  dataPriv.remove(doc, fix);
                } else {
                  dataPriv.access(doc, fix, attaches);
                }
              }
            };
          });
        }
        var location2 = window2.location;
        var nonce = { guid: Date.now() };
        var rquery = /\?/;
        jQuery2.parseXML = function(data) {
          var xml, parserErrorElem;
          if (!data || typeof data !== "string") {
            return null;
          }
          try {
            xml = new window2.DOMParser().parseFromString(data, "text/xml");
          } catch (e) {
          }
          parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
          if (!xml || parserErrorElem) {
            jQuery2.error("Invalid XML: " + (parserErrorElem ? jQuery2.map(parserErrorElem.childNodes, function(el) {
              return el.textContent;
            }).join("\n") : data));
          }
          return xml;
        };
        var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
        function buildParams(prefix, obj, traditional, add) {
          var name;
          if (Array.isArray(obj)) {
            jQuery2.each(obj, function(i, v) {
              if (traditional || rbracket.test(prefix)) {
                add(prefix, v);
              } else {
                buildParams(
                  prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                  v,
                  traditional,
                  add
                );
              }
            });
          } else if (!traditional && toType2(obj) === "object") {
            for (name in obj) {
              buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }
          } else {
            add(prefix, obj);
          }
        }
        jQuery2.param = function(a, traditional) {
          var prefix, s = [], add = function(key, valueOrFunction) {
            var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
          };
          if (a == null) {
            return "";
          }
          if (Array.isArray(a) || a.jquery && !jQuery2.isPlainObject(a)) {
            jQuery2.each(a, function() {
              add(this.name, this.value);
            });
          } else {
            for (prefix in a) {
              buildParams(prefix, a[prefix], traditional, add);
            }
          }
          return s.join("&");
        };
        jQuery2.fn.extend({
          serialize: function() {
            return jQuery2.param(this.serializeArray());
          },
          serializeArray: function() {
            return this.map(function() {
              var elements = jQuery2.prop(this, "elements");
              return elements ? jQuery2.makeArray(elements) : this;
            }).filter(function() {
              var type = this.type;
              return this.name && !jQuery2(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function(_i, elem) {
              var val = jQuery2(this).val();
              if (val == null) {
                return null;
              }
              if (Array.isArray(val)) {
                return jQuery2.map(val, function(val2) {
                  return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
                });
              }
              return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
            }).get();
          }
        });
        var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
        originAnchor.href = location2.href;
        function addToPrefiltersOrTransports(structure) {
          return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
              func = dataTypeExpression;
              dataTypeExpression = "*";
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
              while (dataType = dataTypes[i++]) {
                if (dataType[0] === "+") {
                  dataType = dataType.slice(1) || "*";
                  (structure[dataType] = structure[dataType] || []).unshift(func);
                } else {
                  (structure[dataType] = structure[dataType] || []).push(func);
                }
              }
            }
          };
        }
        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
          var inspected = {}, seekingTransport = structure === transports;
          function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery2.each(structure[dataType] || [], function(_, prefilterOrFactory) {
              var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
              if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                options.dataTypes.unshift(dataTypeOrTransport);
                inspect(dataTypeOrTransport);
                return false;
              } else if (seekingTransport) {
                return !(selected = dataTypeOrTransport);
              }
            });
            return selected;
          }
          return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
        }
        function ajaxExtend(target, src) {
          var key, deep, flatOptions = jQuery2.ajaxSettings.flatOptions || {};
          for (key in src) {
            if (src[key] !== void 0) {
              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
          }
          if (deep) {
            jQuery2.extend(true, target, deep);
          }
          return target;
        }
        function ajaxHandleResponses(s, jqXHR, responses) {
          var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
          while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === void 0) {
              ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
          }
          if (ct) {
            for (type in contents) {
              if (contents[type] && contents[type].test(ct)) {
                dataTypes.unshift(type);
                break;
              }
            }
          }
          if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
          } else {
            for (type in responses) {
              if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                finalDataType = type;
                break;
              }
              if (!firstDataType) {
                firstDataType = type;
              }
            }
            finalDataType = finalDataType || firstDataType;
          }
          if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
              dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
          }
        }
        function ajaxConvert(s, response, jqXHR, isSuccess) {
          var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
          if (dataTypes[1]) {
            for (conv in s.converters) {
              converters[conv.toLowerCase()] = s.converters[conv];
            }
          }
          current = dataTypes.shift();
          while (current) {
            if (s.responseFields[current]) {
              jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
              response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
              if (current === "*") {
                current = prev;
              } else if (prev !== "*" && prev !== current) {
                conv = converters[prev + " " + current] || converters["* " + current];
                if (!conv) {
                  for (conv2 in converters) {
                    tmp = conv2.split(" ");
                    if (tmp[1] === current) {
                      conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                      if (conv) {
                        if (conv === true) {
                          conv = converters[conv2];
                        } else if (converters[conv2] !== true) {
                          current = tmp[0];
                          dataTypes.unshift(tmp[1]);
                        }
                        break;
                      }
                    }
                  }
                }
                if (conv !== true) {
                  if (conv && s.throws) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e) {
                      return {
                        state: "parsererror",
                        error: conv ? e : "No conversion from " + prev + " to " + current
                      };
                    }
                  }
                }
              }
            }
          }
          return { state: "success", data: response };
        }
        jQuery2.extend({
          // Counter for holding the number of active queries
          active: 0,
          // Last-Modified header cache for next request
          lastModified: {},
          etag: {},
          ajaxSettings: {
            url: location2.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location2.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
            accepts: {
              "*": allTypes,
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript"
            },
            contents: {
              xml: /\bxml\b/,
              html: /\bhtml/,
              json: /\bjson\b/
            },
            responseFields: {
              xml: "responseXML",
              text: "responseText",
              json: "responseJSON"
            },
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
              // Convert anything to text
              "* text": String,
              // Text to html (true = no transformation)
              "text html": true,
              // Evaluate text as a json expression
              "text json": JSON.parse,
              // Parse text as xml
              "text xml": jQuery2.parseXML
            },
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
              url: true,
              context: true
            }
          },
          // Creates a full fledged settings object into target
          // with both ajaxSettings and settings fields.
          // If target is omitted, writes into ajaxSettings.
          ajaxSetup: function(target, settings) {
            return settings ? (
              // Building a settings object
              ajaxExtend(ajaxExtend(target, jQuery2.ajaxSettings), settings)
            ) : (
              // Extending ajaxSettings
              ajaxExtend(jQuery2.ajaxSettings, target)
            );
          },
          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
          ajaxTransport: addToPrefiltersOrTransports(transports),
          // Main method
          ajax: function(url, options) {
            if (typeof url === "object") {
              options = url;
              url = void 0;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery2.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery2(callbackContext) : jQuery2.event, deferred = jQuery2.Deferred(), completeDeferred = jQuery2.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
              readyState: 0,
              // Builds headers hashtable if needed
              getResponseHeader: function(key) {
                var match;
                if (completed2) {
                  if (!responseHeaders) {
                    responseHeaders = {};
                    while (match = rheaders.exec(responseHeadersString)) {
                      responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                    }
                  }
                  match = responseHeaders[key.toLowerCase() + " "];
                }
                return match == null ? null : match.join(", ");
              },
              // Raw string
              getAllResponseHeaders: function() {
                return completed2 ? responseHeadersString : null;
              },
              // Caches the header
              setRequestHeader: function(name, value) {
                if (completed2 == null) {
                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                  requestHeaders[name] = value;
                }
                return this;
              },
              // Overrides response content-type header
              overrideMimeType: function(type) {
                if (completed2 == null) {
                  s.mimeType = type;
                }
                return this;
              },
              // Status-dependent callbacks
              statusCode: function(map) {
                var code;
                if (map) {
                  if (completed2) {
                    jqXHR.always(map[jqXHR.status]);
                  } else {
                    for (code in map) {
                      statusCode[code] = [statusCode[code], map[code]];
                    }
                  }
                }
                return this;
              },
              // Cancel the request
              abort: function(statusText) {
                var finalText = statusText || strAbort;
                if (transport) {
                  transport.abort(finalText);
                }
                done(0, finalText);
                return this;
              }
            };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location2.href) + "").replace(rprotocol, location2.protocol + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
            if (s.crossDomain == null) {
              urlAnchor = document2.createElement("a");
              try {
                urlAnchor.href = s.url;
                urlAnchor.href = urlAnchor.href;
                s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
              } catch (e) {
                s.crossDomain = true;
              }
            }
            if (s.data && s.processData && typeof s.data !== "string") {
              s.data = jQuery2.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed2) {
              return jqXHR;
            }
            fireGlobals = jQuery2.event && s.global;
            if (fireGlobals && jQuery2.active++ === 0) {
              jQuery2.event.trigger("ajaxStart");
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, "");
            if (!s.hasContent) {
              uncached = s.url.slice(cacheURL.length);
              if (s.data && (s.processData || typeof s.data === "string")) {
                cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                delete s.data;
              }
              if (s.cache === false) {
                cacheURL = cacheURL.replace(rantiCache, "$1");
                uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
              }
              s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
              s.data = s.data.replace(r20, "+");
            }
            if (s.ifModified) {
              if (jQuery2.lastModified[cacheURL]) {
                jqXHR.setRequestHeader("If-Modified-Since", jQuery2.lastModified[cacheURL]);
              }
              if (jQuery2.etag[cacheURL]) {
                jqXHR.setRequestHeader("If-None-Match", jQuery2.etag[cacheURL]);
              }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
              jqXHR.setRequestHeader("Content-Type", s.contentType);
            }
            jqXHR.setRequestHeader(
              "Accept",
              s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]
            );
            for (i in s.headers) {
              jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
              return jqXHR.abort();
            }
            strAbort = "abort";
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
              done(-1, "No Transport");
            } else {
              jqXHR.readyState = 1;
              if (fireGlobals) {
                globalEventContext.trigger("ajaxSend", [jqXHR, s]);
              }
              if (completed2) {
                return jqXHR;
              }
              if (s.async && s.timeout > 0) {
                timeoutTimer = window2.setTimeout(function() {
                  jqXHR.abort("timeout");
                }, s.timeout);
              }
              try {
                completed2 = false;
                transport.send(requestHeaders, done);
              } catch (e) {
                if (completed2) {
                  throw e;
                }
                done(-1, e);
              }
            }
            function done(status, nativeStatusText, responses, headers) {
              var isSuccess, success, error, response, modified, statusText = nativeStatusText;
              if (completed2) {
                return;
              }
              completed2 = true;
              if (timeoutTimer) {
                window2.clearTimeout(timeoutTimer);
              }
              transport = void 0;
              responseHeadersString = headers || "";
              jqXHR.readyState = status > 0 ? 4 : 0;
              isSuccess = status >= 200 && status < 300 || status === 304;
              if (responses) {
                response = ajaxHandleResponses(s, jqXHR, responses);
              }
              if (!isSuccess && jQuery2.inArray("script", s.dataTypes) > -1 && jQuery2.inArray("json", s.dataTypes) < 0) {
                s.converters["text script"] = function() {
                };
              }
              response = ajaxConvert(s, response, jqXHR, isSuccess);
              if (isSuccess) {
                if (s.ifModified) {
                  modified = jqXHR.getResponseHeader("Last-Modified");
                  if (modified) {
                    jQuery2.lastModified[cacheURL] = modified;
                  }
                  modified = jqXHR.getResponseHeader("etag");
                  if (modified) {
                    jQuery2.etag[cacheURL] = modified;
                  }
                }
                if (status === 204 || s.type === "HEAD") {
                  statusText = "nocontent";
                } else if (status === 304) {
                  statusText = "notmodified";
                } else {
                  statusText = response.state;
                  success = response.data;
                  error = response.error;
                  isSuccess = !error;
                }
              } else {
                error = statusText;
                if (status || !statusText) {
                  statusText = "error";
                  if (status < 0) {
                    status = 0;
                  }
                }
              }
              jqXHR.status = status;
              jqXHR.statusText = (nativeStatusText || statusText) + "";
              if (isSuccess) {
                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
              } else {
                deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
              }
              jqXHR.statusCode(statusCode);
              statusCode = void 0;
              if (fireGlobals) {
                globalEventContext.trigger(
                  isSuccess ? "ajaxSuccess" : "ajaxError",
                  [jqXHR, s, isSuccess ? success : error]
                );
              }
              completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
              if (fireGlobals) {
                globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                if (!--jQuery2.active) {
                  jQuery2.event.trigger("ajaxStop");
                }
              }
            }
            return jqXHR;
          },
          getJSON: function(url, data, callback) {
            return jQuery2.get(url, data, callback, "json");
          },
          getScript: function(url, callback) {
            return jQuery2.get(url, void 0, callback, "script");
          }
        });
        jQuery2.each(["get", "post"], function(_i, method) {
          jQuery2[method] = function(url, data, callback, type) {
            if (isFunction(data)) {
              type = type || callback;
              callback = data;
              data = void 0;
            }
            return jQuery2.ajax(jQuery2.extend({
              url,
              type: method,
              dataType: type,
              data,
              success: callback
            }, jQuery2.isPlainObject(url) && url));
          };
        });
        jQuery2.ajaxPrefilter(function(s) {
          var i;
          for (i in s.headers) {
            if (i.toLowerCase() === "content-type") {
              s.contentType = s.headers[i] || "";
            }
          }
        });
        jQuery2._evalUrl = function(url, options, doc) {
          return jQuery2.ajax({
            url,
            // Make this explicit, since user can override this through ajaxSetup (trac-11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
              "text script": function() {
              }
            },
            dataFilter: function(response) {
              jQuery2.globalEval(response, options, doc);
            }
          });
        };
        jQuery2.fn.extend({
          wrapAll: function(html) {
            var wrap;
            if (this[0]) {
              if (isFunction(html)) {
                html = html.call(this[0]);
              }
              wrap = jQuery2(html, this[0].ownerDocument).eq(0).clone(true);
              if (this[0].parentNode) {
                wrap.insertBefore(this[0]);
              }
              wrap.map(function() {
                var elem = this;
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild;
                }
                return elem;
              }).append(this);
            }
            return this;
          },
          wrapInner: function(html) {
            if (isFunction(html)) {
              return this.each(function(i) {
                jQuery2(this).wrapInner(html.call(this, i));
              });
            }
            return this.each(function() {
              var self2 = jQuery2(this), contents = self2.contents();
              if (contents.length) {
                contents.wrapAll(html);
              } else {
                self2.append(html);
              }
            });
          },
          wrap: function(html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function(i) {
              jQuery2(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
          },
          unwrap: function(selector) {
            this.parent(selector).not("body").each(function() {
              jQuery2(this).replaceWith(this.childNodes);
            });
            return this;
          }
        });
        jQuery2.expr.pseudos.hidden = function(elem) {
          return !jQuery2.expr.pseudos.visible(elem);
        };
        jQuery2.expr.pseudos.visible = function(elem) {
          return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
        };
        jQuery2.ajaxSettings.xhr = function() {
          try {
            return new window2.XMLHttpRequest();
          } catch (e) {
          }
        };
        var xhrSuccessStatus = {
          // File protocol always yields status code 0, assume 200
          0: 200,
          // Support: IE <=9 only
          // trac-1450: sometimes IE returns 1223 when it should be 204
          1223: 204
        }, xhrSupported = jQuery2.ajaxSettings.xhr();
        support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
        support.ajax = xhrSupported = !!xhrSupported;
        jQuery2.ajaxTransport(function(options) {
          var callback, errorCallback;
          if (support.cors || xhrSupported && !options.crossDomain) {
            return {
              send: function(headers, complete) {
                var i, xhr = options.xhr();
                xhr.open(
                  options.type,
                  options.url,
                  options.async,
                  options.username,
                  options.password
                );
                if (options.xhrFields) {
                  for (i in options.xhrFields) {
                    xhr[i] = options.xhrFields[i];
                  }
                }
                if (options.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(options.mimeType);
                }
                if (!options.crossDomain && !headers["X-Requested-With"]) {
                  headers["X-Requested-With"] = "XMLHttpRequest";
                }
                for (i in headers) {
                  xhr.setRequestHeader(i, headers[i]);
                }
                callback = function(type) {
                  return function() {
                    if (callback) {
                      callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                      if (type === "abort") {
                        xhr.abort();
                      } else if (type === "error") {
                        if (typeof xhr.status !== "number") {
                          complete(0, "error");
                        } else {
                          complete(
                            // File: protocol always yields status 0; see trac-8605, trac-14207
                            xhr.status,
                            xhr.statusText
                          );
                        }
                      } else {
                        complete(
                          xhrSuccessStatus[xhr.status] || xhr.status,
                          xhr.statusText,
                          // Support: IE <=9 only
                          // IE9 has no XHR2 but throws on binary (trac-11426)
                          // For XHR2 non-text, let the caller handle it (gh-2498)
                          (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText },
                          xhr.getAllResponseHeaders()
                        );
                      }
                    }
                  };
                };
                xhr.onload = callback();
                errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
                if (xhr.onabort !== void 0) {
                  xhr.onabort = errorCallback;
                } else {
                  xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                      window2.setTimeout(function() {
                        if (callback) {
                          errorCallback();
                        }
                      });
                    }
                  };
                }
                callback = callback("abort");
                try {
                  xhr.send(options.hasContent && options.data || null);
                } catch (e) {
                  if (callback) {
                    throw e;
                  }
                }
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        jQuery2.ajaxPrefilter(function(s) {
          if (s.crossDomain) {
            s.contents.script = false;
          }
        });
        jQuery2.ajaxSetup({
          accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
          },
          contents: {
            script: /\b(?:java|ecma)script\b/
          },
          converters: {
            "text script": function(text) {
              jQuery2.globalEval(text);
              return text;
            }
          }
        });
        jQuery2.ajaxPrefilter("script", function(s) {
          if (s.cache === void 0) {
            s.cache = false;
          }
          if (s.crossDomain) {
            s.type = "GET";
          }
        });
        jQuery2.ajaxTransport("script", function(s) {
          if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
              send: function(_, complete) {
                script = jQuery2("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", callback = function(evt) {
                  script.remove();
                  callback = null;
                  if (evt) {
                    complete(evt.type === "error" ? 404 : 200, evt.type);
                  }
                });
                document2.head.appendChild(script[0]);
              },
              abort: function() {
                if (callback) {
                  callback();
                }
              }
            };
          }
        });
        var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
        jQuery2.ajaxSetup({
          jsonp: "callback",
          jsonpCallback: function() {
            var callback = oldCallbacks.pop() || jQuery2.expando + "_" + nonce.guid++;
            this[callback] = true;
            return callback;
          }
        });
        jQuery2.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
          var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
          if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
              s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
              s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }
            s.converters["script json"] = function() {
              if (!responseContainer) {
                jQuery2.error(callbackName + " was not called");
              }
              return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            overwritten = window2[callbackName];
            window2[callbackName] = function() {
              responseContainer = arguments;
            };
            jqXHR.always(function() {
              if (overwritten === void 0) {
                jQuery2(window2).removeProp(callbackName);
              } else {
                window2[callbackName] = overwritten;
              }
              if (s[callbackName]) {
                s.jsonpCallback = originalSettings.jsonpCallback;
                oldCallbacks.push(callbackName);
              }
              if (responseContainer && isFunction(overwritten)) {
                overwritten(responseContainer[0]);
              }
              responseContainer = overwritten = void 0;
            });
            return "script";
          }
        });
        support.createHTMLDocument = function() {
          var body = document2.implementation.createHTMLDocument("").body;
          body.innerHTML = "<form></form><form></form>";
          return body.childNodes.length === 2;
        }();
        jQuery2.parseHTML = function(data, context, keepScripts) {
          if (typeof data !== "string") {
            return [];
          }
          if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
          }
          var base, parsed, scripts;
          if (!context) {
            if (support.createHTMLDocument) {
              context = document2.implementation.createHTMLDocument("");
              base = context.createElement("base");
              base.href = document2.location.href;
              context.head.appendChild(base);
            } else {
              context = document2;
            }
          }
          parsed = rsingleTag.exec(data);
          scripts = !keepScripts && [];
          if (parsed) {
            return [context.createElement(parsed[1])];
          }
          parsed = buildFragment([data], context, scripts);
          if (scripts && scripts.length) {
            jQuery2(scripts).remove();
          }
          return jQuery2.merge([], parsed.childNodes);
        };
        jQuery2.fn.load = function(url, params, callback) {
          var selector, type, response, self2 = this, off = url.indexOf(" ");
          if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
          }
          if (isFunction(params)) {
            callback = params;
            params = void 0;
          } else if (params && typeof params === "object") {
            type = "POST";
          }
          if (self2.length > 0) {
            jQuery2.ajax({
              url,
              // If "type" variable is undefined, then "GET" method will be used.
              // Make value of this field explicit since
              // user can override it through ajaxSetup method
              type: type || "GET",
              dataType: "html",
              data: params
            }).done(function(responseText) {
              response = arguments;
              self2.html(selector ? (
                // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery2("<div>").append(jQuery2.parseHTML(responseText)).find(selector)
              ) : (
                // Otherwise use the full result
                responseText
              ));
            }).always(callback && function(jqXHR, status) {
              self2.each(function() {
                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
              });
            });
          }
          return this;
        };
        jQuery2.expr.pseudos.animated = function(elem) {
          return jQuery2.grep(jQuery2.timers, function(fn2) {
            return elem === fn2.elem;
          }).length;
        };
        jQuery2.offset = {
          setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery2.css(elem, "position"), curElem = jQuery2(elem), props = {};
            if (position === "static") {
              elem.style.position = "relative";
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery2.css(elem, "top");
            curCSSLeft = jQuery2.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
            if (calculatePosition) {
              curPosition = curElem.position();
              curTop = curPosition.top;
              curLeft = curPosition.left;
            } else {
              curTop = parseFloat(curCSSTop) || 0;
              curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) {
              options = options.call(elem, i, jQuery2.extend({}, curOffset));
            }
            if (options.top != null) {
              props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
              props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
              options.using.call(elem, props);
            } else {
              curElem.css(props);
            }
          }
        };
        jQuery2.fn.extend({
          // offset() relates an element's border box to the document origin
          offset: function(options) {
            if (arguments.length) {
              return options === void 0 ? this : this.each(function(i) {
                jQuery2.offset.setOffset(this, options, i);
              });
            }
            var rect, win, elem = this[0];
            if (!elem) {
              return;
            }
            if (!elem.getClientRects().length) {
              return { top: 0, left: 0 };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
              top: rect.top + win.pageYOffset,
              left: rect.left + win.pageXOffset
            };
          },
          // position() relates an element's margin box to its offset parent's padding box
          // This corresponds to the behavior of CSS absolute positioning
          position: function() {
            if (!this[0]) {
              return;
            }
            var offsetParent, offset2, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
            if (jQuery2.css(elem, "position") === "fixed") {
              offset2 = elem.getBoundingClientRect();
            } else {
              offset2 = this.offset();
              doc = elem.ownerDocument;
              offsetParent = elem.offsetParent || doc.documentElement;
              while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.parentNode;
              }
              if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                parentOffset = jQuery2(offsetParent).offset();
                parentOffset.top += jQuery2.css(offsetParent, "borderTopWidth", true);
                parentOffset.left += jQuery2.css(offsetParent, "borderLeftWidth", true);
              }
            }
            return {
              top: offset2.top - parentOffset.top - jQuery2.css(elem, "marginTop", true),
              left: offset2.left - parentOffset.left - jQuery2.css(elem, "marginLeft", true)
            };
          },
          // This method will return documentElement in the following cases:
          // 1) For the element inside the iframe without offsetParent, this method will return
          //    documentElement of the parent window
          // 2) For the hidden or detached element
          // 3) For body or html element, i.e. in case of the html node - it will return itself
          //
          // but those exceptions were never presented as a real life use-cases
          // and might be considered as more preferable results.
          //
          // This logic, however, is not guaranteed and can change at any point in the future
          offsetParent: function() {
            return this.map(function() {
              var offsetParent = this.offsetParent;
              while (offsetParent && jQuery2.css(offsetParent, "position") === "static") {
                offsetParent = offsetParent.offsetParent;
              }
              return offsetParent || documentElement;
            });
          }
        });
        jQuery2.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
          var top2 = "pageYOffset" === prop;
          jQuery2.fn[method] = function(val) {
            return access(this, function(elem, method2, val2) {
              var win;
              if (isWindow(elem)) {
                win = elem;
              } else if (elem.nodeType === 9) {
                win = elem.defaultView;
              }
              if (val2 === void 0) {
                return win ? win[prop] : elem[method2];
              }
              if (win) {
                win.scrollTo(
                  !top2 ? val2 : win.pageXOffset,
                  top2 ? val2 : win.pageYOffset
                );
              } else {
                elem[method2] = val2;
              }
            }, method, val, arguments.length);
          };
        });
        jQuery2.each(["top", "left"], function(_i, prop) {
          jQuery2.cssHooks[prop] = addGetHookIf(
            support.pixelPosition,
            function(elem, computed) {
              if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery2(elem).position()[prop] + "px" : computed;
              }
            }
          );
        });
        jQuery2.each({ Height: "height", Width: "width" }, function(name, type) {
          jQuery2.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
          }, function(defaultExtra, funcName) {
            jQuery2.fn[funcName] = function(margin, value) {
              var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
              return access(this, function(elem, type2, value2) {
                var doc;
                if (isWindow(elem)) {
                  return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
                }
                if (elem.nodeType === 9) {
                  doc = elem.documentElement;
                  return Math.max(
                    elem.body["scroll" + name],
                    doc["scroll" + name],
                    elem.body["offset" + name],
                    doc["offset" + name],
                    doc["client" + name]
                  );
                }
                return value2 === void 0 ? (
                  // Get width or height on the element, requesting but not forcing parseFloat
                  jQuery2.css(elem, type2, extra)
                ) : (
                  // Set width or height on the element
                  jQuery2.style(elem, type2, value2, extra)
                );
              }, type, chainable ? margin : void 0, chainable);
            };
          });
        });
        jQuery2.each([
          "ajaxStart",
          "ajaxStop",
          "ajaxComplete",
          "ajaxError",
          "ajaxSuccess",
          "ajaxSend"
        ], function(_i, type) {
          jQuery2.fn[type] = function(fn2) {
            return this.on(type, fn2);
          };
        });
        jQuery2.fn.extend({
          bind: function(types, data, fn2) {
            return this.on(types, null, data, fn2);
          },
          unbind: function(types, fn2) {
            return this.off(types, null, fn2);
          },
          delegate: function(selector, types, data, fn2) {
            return this.on(types, selector, data, fn2);
          },
          undelegate: function(selector, types, fn2) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn2);
          },
          hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
          }
        });
        jQuery2.each(
          "blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),
          function(_i, name) {
            jQuery2.fn[name] = function(data, fn2) {
              return arguments.length > 0 ? this.on(name, null, data, fn2) : this.trigger(name);
            };
          }
        );
        var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
        jQuery2.proxy = function(fn2, context) {
          var tmp, args, proxy;
          if (typeof context === "string") {
            tmp = fn2[context];
            context = fn2;
            fn2 = tmp;
          }
          if (!isFunction(fn2)) {
            return void 0;
          }
          args = slice.call(arguments, 2);
          proxy = function() {
            return fn2.apply(context || this, args.concat(slice.call(arguments)));
          };
          proxy.guid = fn2.guid = fn2.guid || jQuery2.guid++;
          return proxy;
        };
        jQuery2.holdReady = function(hold) {
          if (hold) {
            jQuery2.readyWait++;
          } else {
            jQuery2.ready(true);
          }
        };
        jQuery2.isArray = Array.isArray;
        jQuery2.parseJSON = JSON.parse;
        jQuery2.nodeName = nodeName;
        jQuery2.isFunction = isFunction;
        jQuery2.isWindow = isWindow;
        jQuery2.camelCase = camelCase;
        jQuery2.type = toType2;
        jQuery2.now = Date.now;
        jQuery2.isNumeric = function(obj) {
          var type = jQuery2.type(obj);
          return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
          // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
          // subtraction forces infinities to NaN
          !isNaN(obj - parseFloat(obj));
        };
        jQuery2.trim = function(text) {
          return text == null ? "" : (text + "").replace(rtrim, "$1");
        };
        if (typeof define === "function" && define.amd) {
          define("jquery", [], function() {
            return jQuery2;
          });
        }
        var _jQuery = window2.jQuery, _$ = window2.$;
        jQuery2.noConflict = function(deep) {
          if (window2.$ === jQuery2) {
            window2.$ = _$;
          }
          if (deep && window2.jQuery === jQuery2) {
            window2.jQuery = _jQuery;
          }
          return jQuery2;
        };
        if (typeof noGlobal === "undefined") {
          window2.jQuery = window2.$ = jQuery2;
        }
        return jQuery2;
      });
    }
  });

  // node_modules/bootstrap-select/dist/js/bootstrap-select.js
  var require_bootstrap_select = __commonJS({
    "node_modules/bootstrap-select/dist/js/bootstrap-select.js"(exports, module) {
      (function(root, factory) {
        if (root === void 0 && window !== void 0)
          root = window;
        if (typeof define === "function" && define.amd) {
          define(["jquery"], function(a0) {
            return factory(a0);
          });
        } else if (typeof module === "object" && module.exports) {
          module.exports = factory(require_jquery());
        } else {
          factory(root["jQuery"]);
        }
      })(exports, function(jQuery2) {
        (function($2) {
          "use strict";
          var DISALLOWED_ATTRIBUTES2 = ["sanitize", "whiteList", "sanitizeFn"];
          var uriAttrs = [
            "background",
            "cite",
            "href",
            "itemtype",
            "longdesc",
            "poster",
            "src",
            "xlink:href"
          ];
          var ARIA_ATTRIBUTE_PATTERN2 = /^aria-[\w-]*$/i;
          var DefaultWhitelist = {
            // Global attributes allowed on any supplied element below.
            "*": ["class", "dir", "id", "lang", "role", "tabindex", "style", ARIA_ATTRIBUTE_PATTERN2],
            a: ["target", "href", "title", "rel"],
            area: [],
            b: [],
            br: [],
            col: [],
            code: [],
            div: [],
            em: [],
            hr: [],
            h1: [],
            h2: [],
            h3: [],
            h4: [],
            h5: [],
            h6: [],
            i: [],
            img: ["src", "alt", "title", "width", "height"],
            li: [],
            ol: [],
            p: [],
            pre: [],
            s: [],
            small: [],
            span: [],
            sub: [],
            sup: [],
            strong: [],
            u: [],
            ul: []
          };
          var SAFE_URL_PATTERN2 = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
          var DATA_URL_PATTERN2 = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;
          function allowedAttribute2(attr, allowedAttributeList) {
            var attrName = attr.nodeName.toLowerCase();
            if ($2.inArray(attrName, allowedAttributeList) !== -1) {
              if ($2.inArray(attrName, uriAttrs) !== -1) {
                return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN2) || attr.nodeValue.match(DATA_URL_PATTERN2));
              }
              return true;
            }
            var regExp = $2(allowedAttributeList).filter(function(index, value) {
              return value instanceof RegExp;
            });
            for (var i = 0, l = regExp.length; i < l; i++) {
              if (attrName.match(regExp[i])) {
                return true;
              }
            }
            return false;
          }
          function sanitizeHtml2(unsafeElements, whiteList, sanitizeFn) {
            if (sanitizeFn && typeof sanitizeFn === "function") {
              return sanitizeFn(unsafeElements);
            }
            var whitelistKeys = Object.keys(whiteList);
            for (var i = 0, len = unsafeElements.length; i < len; i++) {
              var elements = unsafeElements[i].querySelectorAll("*");
              for (var j = 0, len2 = elements.length; j < len2; j++) {
                var el = elements[j];
                var elName = el.nodeName.toLowerCase();
                if (whitelistKeys.indexOf(elName) === -1) {
                  el.parentNode.removeChild(el);
                  continue;
                }
                var attributeList = [].slice.call(el.attributes);
                var whitelistedAttributes = [].concat(whiteList["*"] || [], whiteList[elName] || []);
                for (var k = 0, len3 = attributeList.length; k < len3; k++) {
                  var attr = attributeList[k];
                  if (!allowedAttribute2(attr, whitelistedAttributes)) {
                    el.removeAttribute(attr.nodeName);
                  }
                }
              }
            }
          }
          if (!("classList" in document.createElement("_"))) {
            (function(view) {
              if (!("Element" in view))
                return;
              var classListProp = "classList", protoProp = "prototype", elemCtrProto = view.Element[protoProp], objCtr = Object, classListGetter = function() {
                var $elem = $2(this);
                return {
                  add: function(classes) {
                    classes = Array.prototype.slice.call(arguments).join(" ");
                    return $elem.addClass(classes);
                  },
                  remove: function(classes) {
                    classes = Array.prototype.slice.call(arguments).join(" ");
                    return $elem.removeClass(classes);
                  },
                  toggle: function(classes, force) {
                    return $elem.toggleClass(classes, force);
                  },
                  contains: function(classes) {
                    return $elem.hasClass(classes);
                  }
                };
              };
              if (objCtr.defineProperty) {
                var classListPropDesc = {
                  get: classListGetter,
                  enumerable: true,
                  configurable: true
                };
                try {
                  objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
                } catch (ex) {
                  if (ex.number === void 0 || ex.number === -2146823252) {
                    classListPropDesc.enumerable = false;
                    objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
                  }
                }
              } else if (objCtr[protoProp].__defineGetter__) {
                elemCtrProto.__defineGetter__(classListProp, classListGetter);
              }
            })(window);
          }
          var testElement = document.createElement("_");
          testElement.classList.add("c1", "c2");
          if (!testElement.classList.contains("c2")) {
            var _add = DOMTokenList.prototype.add, _remove = DOMTokenList.prototype.remove;
            DOMTokenList.prototype.add = function() {
              Array.prototype.forEach.call(arguments, _add.bind(this));
            };
            DOMTokenList.prototype.remove = function() {
              Array.prototype.forEach.call(arguments, _remove.bind(this));
            };
          }
          testElement.classList.toggle("c3", false);
          if (testElement.classList.contains("c3")) {
            var _toggle = DOMTokenList.prototype.toggle;
            DOMTokenList.prototype.toggle = function(token, force) {
              if (1 in arguments && !this.contains(token) === !force) {
                return force;
              } else {
                return _toggle.call(this, token);
              }
            };
          }
          testElement = null;
          function isEqual(array1, array2) {
            return array1.length === array2.length && array1.every(function(element, index) {
              return element === array2[index];
            });
          }
          ;
          if (!String.prototype.startsWith) {
            (function() {
              "use strict";
              var defineProperty = function() {
                try {
                  var object = {};
                  var $defineProperty = Object.defineProperty;
                  var result = $defineProperty(object, object, object) && $defineProperty;
                } catch (error) {
                }
                return result;
              }();
              var toString = {}.toString;
              var startsWith = function(search) {
                if (this == null) {
                  throw new TypeError();
                }
                var string = String(this);
                if (search && toString.call(search) == "[object RegExp]") {
                  throw new TypeError();
                }
                var stringLength = string.length;
                var searchString = String(search);
                var searchLength = searchString.length;
                var position = arguments.length > 1 ? arguments[1] : void 0;
                var pos = position ? Number(position) : 0;
                if (pos != pos) {
                  pos = 0;
                }
                var start2 = Math.min(Math.max(pos, 0), stringLength);
                if (searchLength + start2 > stringLength) {
                  return false;
                }
                var index = -1;
                while (++index < searchLength) {
                  if (string.charCodeAt(start2 + index) != searchString.charCodeAt(index)) {
                    return false;
                  }
                }
                return true;
              };
              if (defineProperty) {
                defineProperty(String.prototype, "startsWith", {
                  "value": startsWith,
                  "configurable": true,
                  "writable": true
                });
              } else {
                String.prototype.startsWith = startsWith;
              }
            })();
          }
          if (!Object.keys) {
            Object.keys = function(o, k, r) {
              r = [];
              for (k in o) {
                r.hasOwnProperty.call(o, k) && r.push(k);
              }
              return r;
            };
          }
          if (HTMLSelectElement && !HTMLSelectElement.prototype.hasOwnProperty("selectedOptions")) {
            Object.defineProperty(HTMLSelectElement.prototype, "selectedOptions", {
              get: function() {
                return this.querySelectorAll(":checked");
              }
            });
          }
          function getSelectedOptions(select, ignoreDisabled) {
            var selectedOptions = select.selectedOptions, options = [], opt;
            if (ignoreDisabled) {
              for (var i = 0, len = selectedOptions.length; i < len; i++) {
                opt = selectedOptions[i];
                if (!(opt.disabled || opt.parentNode.tagName === "OPTGROUP" && opt.parentNode.disabled)) {
                  options.push(opt);
                }
              }
              return options;
            }
            return selectedOptions;
          }
          function getSelectValues(select, selectedOptions) {
            var value = [], options = selectedOptions || select.selectedOptions, opt;
            for (var i = 0, len = options.length; i < len; i++) {
              opt = options[i];
              if (!(opt.disabled || opt.parentNode.tagName === "OPTGROUP" && opt.parentNode.disabled)) {
                value.push(opt.value);
              }
            }
            if (!select.multiple) {
              return !value.length ? null : value[0];
            }
            return value;
          }
          var valHooks = {
            useDefault: false,
            _set: $2.valHooks.select.set
          };
          $2.valHooks.select.set = function(elem, value) {
            if (value && !valHooks.useDefault)
              $2(elem).data("selected", true);
            return valHooks._set.apply(this, arguments);
          };
          var changedArguments = null;
          var EventIsSupported = function() {
            try {
              new Event("change");
              return true;
            } catch (e) {
              return false;
            }
          }();
          $2.fn.triggerNative = function(eventName) {
            var el = this[0], event;
            if (el.dispatchEvent) {
              if (EventIsSupported) {
                event = new Event(eventName, {
                  bubbles: true
                });
              } else {
                event = document.createEvent("Event");
                event.initEvent(eventName, true, false);
              }
              el.dispatchEvent(event);
            } else if (el.fireEvent) {
              event = document.createEventObject();
              event.eventType = eventName;
              el.fireEvent("on" + eventName, event);
            } else {
              this.trigger(eventName);
            }
          };
          function stringSearch(li, searchString, method, normalize) {
            var stringTypes = [
              "display",
              "subtext",
              "tokens"
            ], searchSuccess = false;
            for (var i = 0; i < stringTypes.length; i++) {
              var stringType = stringTypes[i], string = li[stringType];
              if (string) {
                string = string.toString();
                if (stringType === "display") {
                  string = string.replace(/<[^>]+>/g, "");
                }
                if (normalize)
                  string = normalizeToBase(string);
                string = string.toUpperCase();
                if (method === "contains") {
                  searchSuccess = string.indexOf(searchString) >= 0;
                } else {
                  searchSuccess = string.startsWith(searchString);
                }
                if (searchSuccess)
                  break;
              }
            }
            return searchSuccess;
          }
          function toInteger(value) {
            return parseInt(value, 10) || 0;
          }
          var deburredLetters = {
            // Latin-1 Supplement block.
            "\xC0": "A",
            "\xC1": "A",
            "\xC2": "A",
            "\xC3": "A",
            "\xC4": "A",
            "\xC5": "A",
            "\xE0": "a",
            "\xE1": "a",
            "\xE2": "a",
            "\xE3": "a",
            "\xE4": "a",
            "\xE5": "a",
            "\xC7": "C",
            "\xE7": "c",
            "\xD0": "D",
            "\xF0": "d",
            "\xC8": "E",
            "\xC9": "E",
            "\xCA": "E",
            "\xCB": "E",
            "\xE8": "e",
            "\xE9": "e",
            "\xEA": "e",
            "\xEB": "e",
            "\xCC": "I",
            "\xCD": "I",
            "\xCE": "I",
            "\xCF": "I",
            "\xEC": "i",
            "\xED": "i",
            "\xEE": "i",
            "\xEF": "i",
            "\xD1": "N",
            "\xF1": "n",
            "\xD2": "O",
            "\xD3": "O",
            "\xD4": "O",
            "\xD5": "O",
            "\xD6": "O",
            "\xD8": "O",
            "\xF2": "o",
            "\xF3": "o",
            "\xF4": "o",
            "\xF5": "o",
            "\xF6": "o",
            "\xF8": "o",
            "\xD9": "U",
            "\xDA": "U",
            "\xDB": "U",
            "\xDC": "U",
            "\xF9": "u",
            "\xFA": "u",
            "\xFB": "u",
            "\xFC": "u",
            "\xDD": "Y",
            "\xFD": "y",
            "\xFF": "y",
            "\xC6": "Ae",
            "\xE6": "ae",
            "\xDE": "Th",
            "\xFE": "th",
            "\xDF": "ss",
            // Latin Extended-A block.
            "\u0100": "A",
            "\u0102": "A",
            "\u0104": "A",
            "\u0101": "a",
            "\u0103": "a",
            "\u0105": "a",
            "\u0106": "C",
            "\u0108": "C",
            "\u010A": "C",
            "\u010C": "C",
            "\u0107": "c",
            "\u0109": "c",
            "\u010B": "c",
            "\u010D": "c",
            "\u010E": "D",
            "\u0110": "D",
            "\u010F": "d",
            "\u0111": "d",
            "\u0112": "E",
            "\u0114": "E",
            "\u0116": "E",
            "\u0118": "E",
            "\u011A": "E",
            "\u0113": "e",
            "\u0115": "e",
            "\u0117": "e",
            "\u0119": "e",
            "\u011B": "e",
            "\u011C": "G",
            "\u011E": "G",
            "\u0120": "G",
            "\u0122": "G",
            "\u011D": "g",
            "\u011F": "g",
            "\u0121": "g",
            "\u0123": "g",
            "\u0124": "H",
            "\u0126": "H",
            "\u0125": "h",
            "\u0127": "h",
            "\u0128": "I",
            "\u012A": "I",
            "\u012C": "I",
            "\u012E": "I",
            "\u0130": "I",
            "\u0129": "i",
            "\u012B": "i",
            "\u012D": "i",
            "\u012F": "i",
            "\u0131": "i",
            "\u0134": "J",
            "\u0135": "j",
            "\u0136": "K",
            "\u0137": "k",
            "\u0138": "k",
            "\u0139": "L",
            "\u013B": "L",
            "\u013D": "L",
            "\u013F": "L",
            "\u0141": "L",
            "\u013A": "l",
            "\u013C": "l",
            "\u013E": "l",
            "\u0140": "l",
            "\u0142": "l",
            "\u0143": "N",
            "\u0145": "N",
            "\u0147": "N",
            "\u014A": "N",
            "\u0144": "n",
            "\u0146": "n",
            "\u0148": "n",
            "\u014B": "n",
            "\u014C": "O",
            "\u014E": "O",
            "\u0150": "O",
            "\u014D": "o",
            "\u014F": "o",
            "\u0151": "o",
            "\u0154": "R",
            "\u0156": "R",
            "\u0158": "R",
            "\u0155": "r",
            "\u0157": "r",
            "\u0159": "r",
            "\u015A": "S",
            "\u015C": "S",
            "\u015E": "S",
            "\u0160": "S",
            "\u015B": "s",
            "\u015D": "s",
            "\u015F": "s",
            "\u0161": "s",
            "\u0162": "T",
            "\u0164": "T",
            "\u0166": "T",
            "\u0163": "t",
            "\u0165": "t",
            "\u0167": "t",
            "\u0168": "U",
            "\u016A": "U",
            "\u016C": "U",
            "\u016E": "U",
            "\u0170": "U",
            "\u0172": "U",
            "\u0169": "u",
            "\u016B": "u",
            "\u016D": "u",
            "\u016F": "u",
            "\u0171": "u",
            "\u0173": "u",
            "\u0174": "W",
            "\u0175": "w",
            "\u0176": "Y",
            "\u0177": "y",
            "\u0178": "Y",
            "\u0179": "Z",
            "\u017B": "Z",
            "\u017D": "Z",
            "\u017A": "z",
            "\u017C": "z",
            "\u017E": "z",
            "\u0132": "IJ",
            "\u0133": "ij",
            "\u0152": "Oe",
            "\u0153": "oe",
            "\u0149": "'n",
            "\u017F": "s"
          };
          var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
          var rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboMarksExtendedRange = "\\u1ab0-\\u1aff", rsComboMarksSupplementRange = "\\u1dc0-\\u1dff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange;
          var rsCombo = "[" + rsComboRange + "]";
          var reComboMark = RegExp(rsCombo, "g");
          function deburrLetter(key) {
            return deburredLetters[key];
          }
          ;
          function normalizeToBase(string) {
            string = string.toString();
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          var escapeMap = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "`": "&#x60;"
          };
          var createEscaper = function(map) {
            var escaper = function(match) {
              return map[match];
            };
            var source = "(?:" + Object.keys(map).join("|") + ")";
            var testRegexp = RegExp(source);
            var replaceRegexp = RegExp(source, "g");
            return function(string) {
              string = string == null ? "" : "" + string;
              return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
            };
          };
          var htmlEscape = createEscaper(escapeMap);
          var keyCodeMap = {
            32: " ",
            48: "0",
            49: "1",
            50: "2",
            51: "3",
            52: "4",
            53: "5",
            54: "6",
            55: "7",
            56: "8",
            57: "9",
            59: ";",
            65: "A",
            66: "B",
            67: "C",
            68: "D",
            69: "E",
            70: "F",
            71: "G",
            72: "H",
            73: "I",
            74: "J",
            75: "K",
            76: "L",
            77: "M",
            78: "N",
            79: "O",
            80: "P",
            81: "Q",
            82: "R",
            83: "S",
            84: "T",
            85: "U",
            86: "V",
            87: "W",
            88: "X",
            89: "Y",
            90: "Z",
            96: "0",
            97: "1",
            98: "2",
            99: "3",
            100: "4",
            101: "5",
            102: "6",
            103: "7",
            104: "8",
            105: "9"
          };
          var keyCodes = {
            ESCAPE: 27,
            // KeyboardEvent.which value for Escape (Esc) key
            ENTER: 13,
            // KeyboardEvent.which value for Enter key
            SPACE: 32,
            // KeyboardEvent.which value for space key
            TAB: 9,
            // KeyboardEvent.which value for tab key
            ARROW_UP: 38,
            // KeyboardEvent.which value for up arrow key
            ARROW_DOWN: 40
            // KeyboardEvent.which value for down arrow key
          };
          var version = {
            success: false,
            major: "3"
          };
          try {
            version.full = ($2.fn.dropdown.Constructor.VERSION || "").split(" ")[0].split(".");
            version.major = version.full[0];
            version.success = true;
          } catch (err) {
          }
          var selectId = 0;
          var EVENT_KEY2 = ".bs.select";
          var classNames = {
            DISABLED: "disabled",
            DIVIDER: "divider",
            SHOW: "open",
            DROPUP: "dropup",
            MENU: "dropdown-menu",
            MENURIGHT: "dropdown-menu-right",
            MENULEFT: "dropdown-menu-left",
            // to-do: replace with more advanced template/customization options
            BUTTONCLASS: "btn-default",
            POPOVERHEADER: "popover-title",
            ICONBASE: "glyphicon",
            TICKICON: "glyphicon-ok"
          };
          var Selector = {
            MENU: "." + classNames.MENU
          };
          var elementTemplates = {
            div: document.createElement("div"),
            span: document.createElement("span"),
            i: document.createElement("i"),
            subtext: document.createElement("small"),
            a: document.createElement("a"),
            li: document.createElement("li"),
            whitespace: document.createTextNode("\xA0"),
            fragment: document.createDocumentFragment()
          };
          elementTemplates.noResults = elementTemplates.li.cloneNode(false);
          elementTemplates.noResults.className = "no-results";
          elementTemplates.a.setAttribute("role", "option");
          elementTemplates.a.className = "dropdown-item";
          elementTemplates.subtext.className = "text-muted";
          elementTemplates.text = elementTemplates.span.cloneNode(false);
          elementTemplates.text.className = "text";
          elementTemplates.checkMark = elementTemplates.span.cloneNode(false);
          var REGEXP_ARROW = new RegExp(keyCodes.ARROW_UP + "|" + keyCodes.ARROW_DOWN);
          var REGEXP_TAB_OR_ESCAPE = new RegExp("^" + keyCodes.TAB + "$|" + keyCodes.ESCAPE);
          var generateOption = {
            li: function(content, classes, optgroup) {
              var li = elementTemplates.li.cloneNode(false);
              if (content) {
                if (content.nodeType === 1 || content.nodeType === 11) {
                  li.appendChild(content);
                } else {
                  li.innerHTML = content;
                }
              }
              if (typeof classes !== "undefined" && classes !== "")
                li.className = classes;
              if (typeof optgroup !== "undefined" && optgroup !== null)
                li.classList.add("optgroup-" + optgroup);
              return li;
            },
            a: function(text, classes, inline) {
              var a = elementTemplates.a.cloneNode(true);
              if (text) {
                if (text.nodeType === 11) {
                  a.appendChild(text);
                } else {
                  a.insertAdjacentHTML("beforeend", text);
                }
              }
              if (typeof classes !== "undefined" && classes !== "")
                a.classList.add.apply(a.classList, classes.split(/\s+/));
              if (inline)
                a.setAttribute("style", inline);
              return a;
            },
            text: function(options, useFragment) {
              var textElement = elementTemplates.text.cloneNode(false), subtextElement, iconElement;
              if (options.content) {
                textElement.innerHTML = options.content;
              } else {
                textElement.textContent = options.text;
                if (options.icon) {
                  var whitespace = elementTemplates.whitespace.cloneNode(false);
                  iconElement = (useFragment === true ? elementTemplates.i : elementTemplates.span).cloneNode(false);
                  iconElement.className = this.options.iconBase + " " + options.icon;
                  elementTemplates.fragment.appendChild(iconElement);
                  elementTemplates.fragment.appendChild(whitespace);
                }
                if (options.subtext) {
                  subtextElement = elementTemplates.subtext.cloneNode(false);
                  subtextElement.textContent = options.subtext;
                  textElement.appendChild(subtextElement);
                }
              }
              if (useFragment === true) {
                while (textElement.childNodes.length > 0) {
                  elementTemplates.fragment.appendChild(textElement.childNodes[0]);
                }
              } else {
                elementTemplates.fragment.appendChild(textElement);
              }
              return elementTemplates.fragment;
            },
            label: function(options) {
              var textElement = elementTemplates.text.cloneNode(false), subtextElement, iconElement;
              textElement.innerHTML = options.display;
              if (options.icon) {
                var whitespace = elementTemplates.whitespace.cloneNode(false);
                iconElement = elementTemplates.span.cloneNode(false);
                iconElement.className = this.options.iconBase + " " + options.icon;
                elementTemplates.fragment.appendChild(iconElement);
                elementTemplates.fragment.appendChild(whitespace);
              }
              if (options.subtext) {
                subtextElement = elementTemplates.subtext.cloneNode(false);
                subtextElement.textContent = options.subtext;
                textElement.appendChild(subtextElement);
              }
              elementTemplates.fragment.appendChild(textElement);
              return elementTemplates.fragment;
            }
          };
          function showNoResults(searchMatch, searchValue) {
            if (!searchMatch.length) {
              elementTemplates.noResults.innerHTML = this.options.noneResultsText.replace("{0}", '"' + htmlEscape(searchValue) + '"');
              this.$menuInner[0].firstChild.appendChild(elementTemplates.noResults);
            }
          }
          var Selectpicker = function(element, options) {
            var that = this;
            if (!valHooks.useDefault) {
              $2.valHooks.select.set = valHooks._set;
              valHooks.useDefault = true;
            }
            this.$element = $2(element);
            this.$newElement = null;
            this.$button = null;
            this.$menu = null;
            this.options = options;
            this.selectpicker = {
              main: {},
              search: {},
              current: {},
              // current changes if a search is in progress
              view: {},
              isSearching: false,
              keydown: {
                keyHistory: "",
                resetKeyHistory: {
                  start: function() {
                    return setTimeout(function() {
                      that.selectpicker.keydown.keyHistory = "";
                    }, 800);
                  }
                }
              }
            };
            this.sizeInfo = {};
            if (this.options.title === null) {
              this.options.title = this.$element.attr("title");
            }
            var winPad = this.options.windowPadding;
            if (typeof winPad === "number") {
              this.options.windowPadding = [winPad, winPad, winPad, winPad];
            }
            this.val = Selectpicker.prototype.val;
            this.render = Selectpicker.prototype.render;
            this.refresh = Selectpicker.prototype.refresh;
            this.setStyle = Selectpicker.prototype.setStyle;
            this.selectAll = Selectpicker.prototype.selectAll;
            this.deselectAll = Selectpicker.prototype.deselectAll;
            this.destroy = Selectpicker.prototype.destroy;
            this.remove = Selectpicker.prototype.remove;
            this.show = Selectpicker.prototype.show;
            this.hide = Selectpicker.prototype.hide;
            this.init();
          };
          Selectpicker.VERSION = "1.13.18";
          Selectpicker.DEFAULTS = {
            noneSelectedText: "Nothing selected",
            noneResultsText: "No results matched {0}",
            countSelectedText: function(numSelected, numTotal) {
              return numSelected == 1 ? "{0} item selected" : "{0} items selected";
            },
            maxOptionsText: function(numAll, numGroup) {
              return [
                numAll == 1 ? "Limit reached ({n} item max)" : "Limit reached ({n} items max)",
                numGroup == 1 ? "Group limit reached ({n} item max)" : "Group limit reached ({n} items max)"
              ];
            },
            selectAllText: "Select All",
            deselectAllText: "Deselect All",
            doneButton: false,
            doneButtonText: "Close",
            multipleSeparator: ", ",
            styleBase: "btn",
            style: classNames.BUTTONCLASS,
            size: "auto",
            title: null,
            selectedTextFormat: "values",
            width: false,
            container: false,
            hideDisabled: false,
            showSubtext: false,
            showIcon: true,
            showContent: true,
            dropupAuto: true,
            header: false,
            liveSearch: false,
            liveSearchPlaceholder: null,
            liveSearchNormalize: false,
            liveSearchStyle: "contains",
            actionsBox: false,
            iconBase: classNames.ICONBASE,
            tickIcon: classNames.TICKICON,
            showTick: false,
            template: {
              caret: '<span class="caret"></span>'
            },
            maxOptions: false,
            mobile: false,
            selectOnTab: false,
            dropdownAlignRight: false,
            windowPadding: 0,
            virtualScroll: 600,
            display: false,
            sanitize: true,
            sanitizeFn: null,
            whiteList: DefaultWhitelist
          };
          Selectpicker.prototype = {
            constructor: Selectpicker,
            init: function() {
              var that = this, id = this.$element.attr("id"), element = this.$element[0], form = element.form;
              selectId++;
              this.selectId = "bs-select-" + selectId;
              element.classList.add("bs-select-hidden");
              this.multiple = this.$element.prop("multiple");
              this.autofocus = this.$element.prop("autofocus");
              if (element.classList.contains("show-tick")) {
                this.options.showTick = true;
              }
              this.$newElement = this.createDropdown();
              this.buildData();
              this.$element.after(this.$newElement).prependTo(this.$newElement);
              if (form && element.form === null) {
                if (!form.id)
                  form.id = "form-" + this.selectId;
                element.setAttribute("form", form.id);
              }
              this.$button = this.$newElement.children("button");
              this.$menu = this.$newElement.children(Selector.MENU);
              this.$menuInner = this.$menu.children(".inner");
              this.$searchbox = this.$menu.find("input");
              element.classList.remove("bs-select-hidden");
              if (this.options.dropdownAlignRight === true)
                this.$menu[0].classList.add(classNames.MENURIGHT);
              if (typeof id !== "undefined") {
                this.$button.attr("data-id", id);
              }
              this.checkDisabled();
              this.clickListener();
              if (this.options.liveSearch) {
                this.liveSearchListener();
                this.focusedParent = this.$searchbox[0];
              } else {
                this.focusedParent = this.$menuInner[0];
              }
              this.setStyle();
              this.render();
              this.setWidth();
              if (this.options.container) {
                this.selectPosition();
              } else {
                this.$element.on("hide" + EVENT_KEY2, function() {
                  if (that.isVirtual()) {
                    var menuInner = that.$menuInner[0], emptyMenu = menuInner.firstChild.cloneNode(false);
                    menuInner.replaceChild(emptyMenu, menuInner.firstChild);
                    menuInner.scrollTop = 0;
                  }
                });
              }
              this.$menu.data("this", this);
              this.$newElement.data("this", this);
              if (this.options.mobile)
                this.mobile();
              this.$newElement.on({
                "hide.bs.dropdown": function(e) {
                  that.$element.trigger("hide" + EVENT_KEY2, e);
                },
                "hidden.bs.dropdown": function(e) {
                  that.$element.trigger("hidden" + EVENT_KEY2, e);
                },
                "show.bs.dropdown": function(e) {
                  that.$element.trigger("show" + EVENT_KEY2, e);
                },
                "shown.bs.dropdown": function(e) {
                  that.$element.trigger("shown" + EVENT_KEY2, e);
                }
              });
              if (element.hasAttribute("required")) {
                this.$element.on("invalid" + EVENT_KEY2, function() {
                  that.$button[0].classList.add("bs-invalid");
                  that.$element.on("shown" + EVENT_KEY2 + ".invalid", function() {
                    that.$element.val(that.$element.val()).off("shown" + EVENT_KEY2 + ".invalid");
                  }).on("rendered" + EVENT_KEY2, function() {
                    if (this.validity.valid)
                      that.$button[0].classList.remove("bs-invalid");
                    that.$element.off("rendered" + EVENT_KEY2);
                  });
                  that.$button.on("blur" + EVENT_KEY2, function() {
                    that.$element.trigger("focus").trigger("blur");
                    that.$button.off("blur" + EVENT_KEY2);
                  });
                });
              }
              setTimeout(function() {
                that.buildList();
                that.$element.trigger("loaded" + EVENT_KEY2);
              });
            },
            createDropdown: function() {
              var showTick = this.multiple || this.options.showTick ? " show-tick" : "", multiselectable = this.multiple ? ' aria-multiselectable="true"' : "", inputGroup = "", autofocus = this.autofocus ? " autofocus" : "";
              if (version.major < 4 && this.$element.parent().hasClass("input-group")) {
                inputGroup = " input-group-btn";
              }
              var drop, header = "", searchbox = "", actionsbox = "", donebutton = "";
              if (this.options.header) {
                header = '<div class="' + classNames.POPOVERHEADER + '"><button type="button" class="close" aria-hidden="true">&times;</button>' + this.options.header + "</div>";
              }
              if (this.options.liveSearch) {
                searchbox = '<div class="bs-searchbox"><input type="search" class="form-control" autocomplete="off"' + (this.options.liveSearchPlaceholder === null ? "" : ' placeholder="' + htmlEscape(this.options.liveSearchPlaceholder) + '"') + ' role="combobox" aria-label="Search" aria-controls="' + this.selectId + '" aria-autocomplete="list"></div>';
              }
              if (this.multiple && this.options.actionsBox) {
                actionsbox = '<div class="bs-actionsbox"><div class="btn-group btn-group-sm btn-block"><button type="button" class="actions-btn bs-select-all btn ' + classNames.BUTTONCLASS + '">' + this.options.selectAllText + '</button><button type="button" class="actions-btn bs-deselect-all btn ' + classNames.BUTTONCLASS + '">' + this.options.deselectAllText + "</button></div></div>";
              }
              if (this.multiple && this.options.doneButton) {
                donebutton = '<div class="bs-donebutton"><div class="btn-group btn-block"><button type="button" class="btn btn-sm ' + classNames.BUTTONCLASS + '">' + this.options.doneButtonText + "</button></div></div>";
              }
              drop = '<div class="dropdown bootstrap-select' + showTick + inputGroup + '"><button type="button" tabindex="-1" class="' + this.options.styleBase + ' dropdown-toggle" ' + (this.options.display === "static" ? 'data-display="static"' : "") + 'data-toggle="dropdown"' + autofocus + ' role="combobox" aria-owns="' + this.selectId + '" aria-haspopup="listbox" aria-expanded="false"><div class="filter-option"><div class="filter-option-inner"><div class="filter-option-inner-inner"></div></div> </div>' + (version.major === "4" ? "" : '<span class="bs-caret">' + this.options.template.caret + "</span>") + '</button><div class="' + classNames.MENU + " " + (version.major === "4" ? "" : classNames.SHOW) + '">' + header + searchbox + actionsbox + '<div class="inner ' + classNames.SHOW + '" role="listbox" id="' + this.selectId + '" tabindex="-1" ' + multiselectable + '><ul class="' + classNames.MENU + " inner " + (version.major === "4" ? classNames.SHOW : "") + '" role="presentation"></ul></div>' + donebutton + "</div></div>";
              return $2(drop);
            },
            setPositionData: function() {
              this.selectpicker.view.canHighlight = [];
              this.selectpicker.view.size = 0;
              this.selectpicker.view.firstHighlightIndex = false;
              for (var i = 0; i < this.selectpicker.current.data.length; i++) {
                var li = this.selectpicker.current.data[i], canHighlight = true;
                if (li.type === "divider") {
                  canHighlight = false;
                  li.height = this.sizeInfo.dividerHeight;
                } else if (li.type === "optgroup-label") {
                  canHighlight = false;
                  li.height = this.sizeInfo.dropdownHeaderHeight;
                } else {
                  li.height = this.sizeInfo.liHeight;
                }
                if (li.disabled)
                  canHighlight = false;
                this.selectpicker.view.canHighlight.push(canHighlight);
                if (canHighlight) {
                  this.selectpicker.view.size++;
                  li.posinset = this.selectpicker.view.size;
                  if (this.selectpicker.view.firstHighlightIndex === false)
                    this.selectpicker.view.firstHighlightIndex = i;
                }
                li.position = (i === 0 ? 0 : this.selectpicker.current.data[i - 1].position) + li.height;
              }
            },
            isVirtual: function() {
              return this.options.virtualScroll !== false && this.selectpicker.main.elements.length >= this.options.virtualScroll || this.options.virtualScroll === true;
            },
            createView: function(isSearching, setSize, refresh) {
              var that = this, scrollTop = 0, active = [], selected, prevActive;
              this.selectpicker.isSearching = isSearching;
              this.selectpicker.current = isSearching ? this.selectpicker.search : this.selectpicker.main;
              this.setPositionData();
              if (setSize) {
                if (refresh) {
                  scrollTop = this.$menuInner[0].scrollTop;
                } else if (!that.multiple) {
                  var element = that.$element[0], selectedIndex = (element.options[element.selectedIndex] || {}).liIndex;
                  if (typeof selectedIndex === "number" && that.options.size !== false) {
                    var selectedData = that.selectpicker.main.data[selectedIndex], position = selectedData && selectedData.position;
                    if (position) {
                      scrollTop = position - (that.sizeInfo.menuInnerHeight + that.sizeInfo.liHeight) / 2;
                    }
                  }
                }
              }
              scroll(scrollTop, true);
              this.$menuInner.off("scroll.createView").on("scroll.createView", function(e, updateValue) {
                if (!that.noScroll)
                  scroll(this.scrollTop, updateValue);
                that.noScroll = false;
              });
              function scroll(scrollTop2, init) {
                var size = that.selectpicker.current.elements.length, chunks = [], chunkSize, chunkCount, firstChunk, lastChunk, currentChunk, prevPositions, positionIsDifferent, previousElements, menuIsDifferent = true, isVirtual = that.isVirtual();
                that.selectpicker.view.scrollTop = scrollTop2;
                chunkSize = Math.ceil(that.sizeInfo.menuInnerHeight / that.sizeInfo.liHeight * 1.5);
                chunkCount = Math.round(size / chunkSize) || 1;
                for (var i = 0; i < chunkCount; i++) {
                  var endOfChunk = (i + 1) * chunkSize;
                  if (i === chunkCount - 1) {
                    endOfChunk = size;
                  }
                  chunks[i] = [
                    i * chunkSize + (!i ? 0 : 1),
                    endOfChunk
                  ];
                  if (!size)
                    break;
                  if (currentChunk === void 0 && scrollTop2 - 1 <= that.selectpicker.current.data[endOfChunk - 1].position - that.sizeInfo.menuInnerHeight) {
                    currentChunk = i;
                  }
                }
                if (currentChunk === void 0)
                  currentChunk = 0;
                prevPositions = [that.selectpicker.view.position0, that.selectpicker.view.position1];
                firstChunk = Math.max(0, currentChunk - 1);
                lastChunk = Math.min(chunkCount - 1, currentChunk + 1);
                that.selectpicker.view.position0 = isVirtual === false ? 0 : Math.max(0, chunks[firstChunk][0]) || 0;
                that.selectpicker.view.position1 = isVirtual === false ? size : Math.min(size, chunks[lastChunk][1]) || 0;
                positionIsDifferent = prevPositions[0] !== that.selectpicker.view.position0 || prevPositions[1] !== that.selectpicker.view.position1;
                if (that.activeIndex !== void 0) {
                  prevActive = that.selectpicker.main.elements[that.prevActiveIndex];
                  active = that.selectpicker.main.elements[that.activeIndex];
                  selected = that.selectpicker.main.elements[that.selectedIndex];
                  if (init) {
                    if (that.activeIndex !== that.selectedIndex) {
                      that.defocusItem(active);
                    }
                    that.activeIndex = void 0;
                  }
                  if (that.activeIndex && that.activeIndex !== that.selectedIndex) {
                    that.defocusItem(selected);
                  }
                }
                if (that.prevActiveIndex !== void 0 && that.prevActiveIndex !== that.activeIndex && that.prevActiveIndex !== that.selectedIndex) {
                  that.defocusItem(prevActive);
                }
                if (init || positionIsDifferent) {
                  previousElements = that.selectpicker.view.visibleElements ? that.selectpicker.view.visibleElements.slice() : [];
                  if (isVirtual === false) {
                    that.selectpicker.view.visibleElements = that.selectpicker.current.elements;
                  } else {
                    that.selectpicker.view.visibleElements = that.selectpicker.current.elements.slice(that.selectpicker.view.position0, that.selectpicker.view.position1);
                  }
                  that.setOptionStatus();
                  if (isSearching || isVirtual === false && init)
                    menuIsDifferent = !isEqual(previousElements, that.selectpicker.view.visibleElements);
                  if ((init || isVirtual === true) && menuIsDifferent) {
                    var menuInner = that.$menuInner[0], menuFragment = document.createDocumentFragment(), emptyMenu = menuInner.firstChild.cloneNode(false), marginTop, marginBottom, elements = that.selectpicker.view.visibleElements, toSanitize = [];
                    menuInner.replaceChild(emptyMenu, menuInner.firstChild);
                    for (var i = 0, visibleElementsLen = elements.length; i < visibleElementsLen; i++) {
                      var element2 = elements[i], elText, elementData;
                      if (that.options.sanitize) {
                        elText = element2.lastChild;
                        if (elText) {
                          elementData = that.selectpicker.current.data[i + that.selectpicker.view.position0];
                          if (elementData && elementData.content && !elementData.sanitized) {
                            toSanitize.push(elText);
                            elementData.sanitized = true;
                          }
                        }
                      }
                      menuFragment.appendChild(element2);
                    }
                    if (that.options.sanitize && toSanitize.length) {
                      sanitizeHtml2(toSanitize, that.options.whiteList, that.options.sanitizeFn);
                    }
                    if (isVirtual === true) {
                      marginTop = that.selectpicker.view.position0 === 0 ? 0 : that.selectpicker.current.data[that.selectpicker.view.position0 - 1].position;
                      marginBottom = that.selectpicker.view.position1 > size - 1 ? 0 : that.selectpicker.current.data[size - 1].position - that.selectpicker.current.data[that.selectpicker.view.position1 - 1].position;
                      menuInner.firstChild.style.marginTop = marginTop + "px";
                      menuInner.firstChild.style.marginBottom = marginBottom + "px";
                    } else {
                      menuInner.firstChild.style.marginTop = 0;
                      menuInner.firstChild.style.marginBottom = 0;
                    }
                    menuInner.firstChild.appendChild(menuFragment);
                    if (isVirtual === true && that.sizeInfo.hasScrollBar) {
                      var menuInnerInnerWidth = menuInner.firstChild.offsetWidth;
                      if (init && menuInnerInnerWidth < that.sizeInfo.menuInnerInnerWidth && that.sizeInfo.totalMenuWidth > that.sizeInfo.selectWidth) {
                        menuInner.firstChild.style.minWidth = that.sizeInfo.menuInnerInnerWidth + "px";
                      } else if (menuInnerInnerWidth > that.sizeInfo.menuInnerInnerWidth) {
                        that.$menu[0].style.minWidth = 0;
                        var actualMenuWidth = menuInner.firstChild.offsetWidth;
                        if (actualMenuWidth > that.sizeInfo.menuInnerInnerWidth) {
                          that.sizeInfo.menuInnerInnerWidth = actualMenuWidth;
                          menuInner.firstChild.style.minWidth = that.sizeInfo.menuInnerInnerWidth + "px";
                        }
                        that.$menu[0].style.minWidth = "";
                      }
                    }
                  }
                }
                that.prevActiveIndex = that.activeIndex;
                if (!that.options.liveSearch) {
                  that.$menuInner.trigger("focus");
                } else if (isSearching && init) {
                  var index = 0, newActive;
                  if (!that.selectpicker.view.canHighlight[index]) {
                    index = 1 + that.selectpicker.view.canHighlight.slice(1).indexOf(true);
                  }
                  newActive = that.selectpicker.view.visibleElements[index];
                  that.defocusItem(that.selectpicker.view.currentActive);
                  that.activeIndex = (that.selectpicker.current.data[index] || {}).index;
                  that.focusItem(newActive);
                }
              }
              $2(window).off("resize" + EVENT_KEY2 + "." + this.selectId + ".createView").on("resize" + EVENT_KEY2 + "." + this.selectId + ".createView", function() {
                var isActive = that.$newElement.hasClass(classNames.SHOW);
                if (isActive)
                  scroll(that.$menuInner[0].scrollTop);
              });
            },
            focusItem: function(li, liData, noStyle) {
              if (li) {
                liData = liData || this.selectpicker.main.data[this.activeIndex];
                var a = li.firstChild;
                if (a) {
                  a.setAttribute("aria-setsize", this.selectpicker.view.size);
                  a.setAttribute("aria-posinset", liData.posinset);
                  if (noStyle !== true) {
                    this.focusedParent.setAttribute("aria-activedescendant", a.id);
                    li.classList.add("active");
                    a.classList.add("active");
                  }
                }
              }
            },
            defocusItem: function(li) {
              if (li) {
                li.classList.remove("active");
                if (li.firstChild)
                  li.firstChild.classList.remove("active");
              }
            },
            setPlaceholder: function() {
              var that = this, updateIndex = false;
              if (this.options.title && !this.multiple) {
                if (!this.selectpicker.view.titleOption)
                  this.selectpicker.view.titleOption = document.createElement("option");
                updateIndex = true;
                var element = this.$element[0], selectTitleOption = false, titleNotAppended = !this.selectpicker.view.titleOption.parentNode, selectedIndex = element.selectedIndex, selectedOption = element.options[selectedIndex], navigation = window.performance && window.performance.getEntriesByType("navigation"), isNotBackForward = navigation && navigation.length ? navigation[0].type !== "back_forward" : window.performance.navigation.type !== 2;
                if (titleNotAppended) {
                  this.selectpicker.view.titleOption.className = "bs-title-option";
                  this.selectpicker.view.titleOption.value = "";
                  selectTitleOption = !selectedOption || selectedIndex === 0 && selectedOption.defaultSelected === false && this.$element.data("selected") === void 0;
                }
                if (titleNotAppended || this.selectpicker.view.titleOption.index !== 0) {
                  element.insertBefore(this.selectpicker.view.titleOption, element.firstChild);
                }
                if (selectTitleOption && isNotBackForward) {
                  element.selectedIndex = 0;
                } else if (document.readyState !== "complete") {
                  window.addEventListener("pageshow", function() {
                    if (that.selectpicker.view.displayedValue !== element.value)
                      that.render();
                  });
                }
              }
              return updateIndex;
            },
            buildData: function() {
              var optionSelector = ':not([hidden]):not([data-hidden="true"])', mainData = [], optID = 0, startIndex = this.setPlaceholder() ? 1 : 0;
              if (this.options.hideDisabled)
                optionSelector += ":not(:disabled)";
              var selectOptions = this.$element[0].querySelectorAll("select > *" + optionSelector);
              function addDivider(config) {
                var previousData = mainData[mainData.length - 1];
                if (previousData && previousData.type === "divider" && (previousData.optID || config.optID)) {
                  return;
                }
                config = config || {};
                config.type = "divider";
                mainData.push(config);
              }
              function addOption(option, config) {
                config = config || {};
                config.divider = option.getAttribute("data-divider") === "true";
                if (config.divider) {
                  addDivider({
                    optID: config.optID
                  });
                } else {
                  var liIndex = mainData.length, cssText = option.style.cssText, inlineStyle = cssText ? htmlEscape(cssText) : "", optionClass = (option.className || "") + (config.optgroupClass || "");
                  if (config.optID)
                    optionClass = "opt " + optionClass;
                  config.optionClass = optionClass.trim();
                  config.inlineStyle = inlineStyle;
                  config.text = option.textContent;
                  config.content = option.getAttribute("data-content");
                  config.tokens = option.getAttribute("data-tokens");
                  config.subtext = option.getAttribute("data-subtext");
                  config.icon = option.getAttribute("data-icon");
                  option.liIndex = liIndex;
                  config.display = config.content || config.text;
                  config.type = "option";
                  config.index = liIndex;
                  config.option = option;
                  config.selected = !!option.selected;
                  config.disabled = config.disabled || !!option.disabled;
                  mainData.push(config);
                }
              }
              function addOptgroup(index, selectOptions2) {
                var optgroup = selectOptions2[index], previous = index - 1 < startIndex ? false : selectOptions2[index - 1], next = selectOptions2[index + 1], options = optgroup.querySelectorAll("option" + optionSelector);
                if (!options.length)
                  return;
                var config = {
                  display: htmlEscape(optgroup.label),
                  subtext: optgroup.getAttribute("data-subtext"),
                  icon: optgroup.getAttribute("data-icon"),
                  type: "optgroup-label",
                  optgroupClass: " " + (optgroup.className || "")
                }, headerIndex, lastIndex;
                optID++;
                if (previous) {
                  addDivider({ optID });
                }
                config.optID = optID;
                mainData.push(config);
                for (var j = 0, len2 = options.length; j < len2; j++) {
                  var option = options[j];
                  if (j === 0) {
                    headerIndex = mainData.length - 1;
                    lastIndex = headerIndex + len2;
                  }
                  addOption(option, {
                    headerIndex,
                    lastIndex,
                    optID: config.optID,
                    optgroupClass: config.optgroupClass,
                    disabled: optgroup.disabled
                  });
                }
                if (next) {
                  addDivider({ optID });
                }
              }
              for (var len = selectOptions.length, i = startIndex; i < len; i++) {
                var item = selectOptions[i];
                if (item.tagName !== "OPTGROUP") {
                  addOption(item, {});
                } else {
                  addOptgroup(i, selectOptions);
                }
              }
              this.selectpicker.main.data = this.selectpicker.current.data = mainData;
            },
            buildList: function() {
              var that = this, selectData = this.selectpicker.main.data, mainElements = [], widestOptionLength = 0;
              if ((that.options.showTick || that.multiple) && !elementTemplates.checkMark.parentNode) {
                elementTemplates.checkMark.className = this.options.iconBase + " " + that.options.tickIcon + " check-mark";
                elementTemplates.a.appendChild(elementTemplates.checkMark);
              }
              function buildElement(item2) {
                var liElement, combinedLength = 0;
                switch (item2.type) {
                  case "divider":
                    liElement = generateOption.li(
                      false,
                      classNames.DIVIDER,
                      item2.optID ? item2.optID + "div" : void 0
                    );
                    break;
                  case "option":
                    liElement = generateOption.li(
                      generateOption.a(
                        generateOption.text.call(that, item2),
                        item2.optionClass,
                        item2.inlineStyle
                      ),
                      "",
                      item2.optID
                    );
                    if (liElement.firstChild) {
                      liElement.firstChild.id = that.selectId + "-" + item2.index;
                    }
                    break;
                  case "optgroup-label":
                    liElement = generateOption.li(
                      generateOption.label.call(that, item2),
                      "dropdown-header" + item2.optgroupClass,
                      item2.optID
                    );
                    break;
                }
                item2.element = liElement;
                mainElements.push(liElement);
                if (item2.display)
                  combinedLength += item2.display.length;
                if (item2.subtext)
                  combinedLength += item2.subtext.length;
                if (item2.icon)
                  combinedLength += 1;
                if (combinedLength > widestOptionLength) {
                  widestOptionLength = combinedLength;
                  that.selectpicker.view.widestOption = mainElements[mainElements.length - 1];
                }
              }
              for (var len = selectData.length, i = 0; i < len; i++) {
                var item = selectData[i];
                buildElement(item);
              }
              this.selectpicker.main.elements = this.selectpicker.current.elements = mainElements;
            },
            findLis: function() {
              return this.$menuInner.find(".inner > li");
            },
            render: function() {
              var that = this, element = this.$element[0], placeholderSelected = this.setPlaceholder() && element.selectedIndex === 0, selectedOptions = getSelectedOptions(element, this.options.hideDisabled), selectedCount = selectedOptions.length, button = this.$button[0], buttonInner = button.querySelector(".filter-option-inner-inner"), multipleSeparator = document.createTextNode(this.options.multipleSeparator), titleFragment = elementTemplates.fragment.cloneNode(false), showCount, countMax, hasContent = false;
              button.classList.toggle("bs-placeholder", that.multiple ? !selectedCount : !getSelectValues(element, selectedOptions));
              if (!that.multiple && selectedOptions.length === 1) {
                that.selectpicker.view.displayedValue = getSelectValues(element, selectedOptions);
              }
              if (this.options.selectedTextFormat === "static") {
                titleFragment = generateOption.text.call(this, { text: this.options.title }, true);
              } else {
                showCount = this.multiple && this.options.selectedTextFormat.indexOf("count") !== -1 && selectedCount > 1;
                if (showCount) {
                  countMax = this.options.selectedTextFormat.split(">");
                  showCount = countMax.length > 1 && selectedCount > countMax[1] || countMax.length === 1 && selectedCount >= 2;
                }
                if (showCount === false) {
                  if (!placeholderSelected) {
                    for (var selectedIndex = 0; selectedIndex < selectedCount; selectedIndex++) {
                      if (selectedIndex < 50) {
                        var option = selectedOptions[selectedIndex], thisData = this.selectpicker.main.data[option.liIndex], titleOptions = {};
                        if (this.multiple && selectedIndex > 0) {
                          titleFragment.appendChild(multipleSeparator.cloneNode(false));
                        }
                        if (option.title) {
                          titleOptions.text = option.title;
                        } else if (thisData) {
                          if (thisData.content && that.options.showContent) {
                            titleOptions.content = thisData.content.toString();
                            hasContent = true;
                          } else {
                            if (that.options.showIcon) {
                              titleOptions.icon = thisData.icon;
                            }
                            if (that.options.showSubtext && !that.multiple && thisData.subtext)
                              titleOptions.subtext = " " + thisData.subtext;
                            titleOptions.text = option.textContent.trim();
                          }
                        }
                        titleFragment.appendChild(generateOption.text.call(this, titleOptions, true));
                      } else {
                        break;
                      }
                    }
                    if (selectedCount > 49) {
                      titleFragment.appendChild(document.createTextNode("..."));
                    }
                  }
                } else {
                  var optionSelector = ':not([hidden]):not([data-hidden="true"]):not([data-divider="true"])';
                  if (this.options.hideDisabled)
                    optionSelector += ":not(:disabled)";
                  var totalCount = this.$element[0].querySelectorAll("select > option" + optionSelector + ", optgroup" + optionSelector + " option" + optionSelector).length, tr8nText = typeof this.options.countSelectedText === "function" ? this.options.countSelectedText(selectedCount, totalCount) : this.options.countSelectedText;
                  titleFragment = generateOption.text.call(this, {
                    text: tr8nText.replace("{0}", selectedCount.toString()).replace("{1}", totalCount.toString())
                  }, true);
                }
              }
              if (this.options.title == void 0) {
                this.options.title = this.$element.attr("title");
              }
              if (!titleFragment.childNodes.length) {
                titleFragment = generateOption.text.call(this, {
                  text: typeof this.options.title !== "undefined" ? this.options.title : this.options.noneSelectedText
                }, true);
              }
              button.title = titleFragment.textContent.replace(/<[^>]*>?/g, "").trim();
              if (this.options.sanitize && hasContent) {
                sanitizeHtml2([titleFragment], that.options.whiteList, that.options.sanitizeFn);
              }
              buttonInner.innerHTML = "";
              buttonInner.appendChild(titleFragment);
              if (version.major < 4 && this.$newElement[0].classList.contains("bs3-has-addon")) {
                var filterExpand = button.querySelector(".filter-expand"), clone = buttonInner.cloneNode(true);
                clone.className = "filter-expand";
                if (filterExpand) {
                  button.replaceChild(clone, filterExpand);
                } else {
                  button.appendChild(clone);
                }
              }
              this.$element.trigger("rendered" + EVENT_KEY2);
            },
            /**
             * @param [style]
             * @param [status]
             */
            setStyle: function(newStyle, status) {
              var button = this.$button[0], newElement = this.$newElement[0], style = this.options.style.trim(), buttonClass;
              if (this.$element.attr("class")) {
                this.$newElement.addClass(this.$element.attr("class").replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, ""));
              }
              if (version.major < 4) {
                newElement.classList.add("bs3");
                if (newElement.parentNode.classList && newElement.parentNode.classList.contains("input-group") && (newElement.previousElementSibling || newElement.nextElementSibling) && (newElement.previousElementSibling || newElement.nextElementSibling).classList.contains("input-group-addon")) {
                  newElement.classList.add("bs3-has-addon");
                }
              }
              if (newStyle) {
                buttonClass = newStyle.trim();
              } else {
                buttonClass = style;
              }
              if (status == "add") {
                if (buttonClass)
                  button.classList.add.apply(button.classList, buttonClass.split(" "));
              } else if (status == "remove") {
                if (buttonClass)
                  button.classList.remove.apply(button.classList, buttonClass.split(" "));
              } else {
                if (style)
                  button.classList.remove.apply(button.classList, style.split(" "));
                if (buttonClass)
                  button.classList.add.apply(button.classList, buttonClass.split(" "));
              }
            },
            liHeight: function(refresh) {
              if (!refresh && (this.options.size === false || Object.keys(this.sizeInfo).length))
                return;
              var newElement = elementTemplates.div.cloneNode(false), menu = elementTemplates.div.cloneNode(false), menuInner = elementTemplates.div.cloneNode(false), menuInnerInner = document.createElement("ul"), divider = elementTemplates.li.cloneNode(false), dropdownHeader = elementTemplates.li.cloneNode(false), li, a = elementTemplates.a.cloneNode(false), text = elementTemplates.span.cloneNode(false), header = this.options.header && this.$menu.find("." + classNames.POPOVERHEADER).length > 0 ? this.$menu.find("." + classNames.POPOVERHEADER)[0].cloneNode(true) : null, search = this.options.liveSearch ? elementTemplates.div.cloneNode(false) : null, actions = this.options.actionsBox && this.multiple && this.$menu.find(".bs-actionsbox").length > 0 ? this.$menu.find(".bs-actionsbox")[0].cloneNode(true) : null, doneButton = this.options.doneButton && this.multiple && this.$menu.find(".bs-donebutton").length > 0 ? this.$menu.find(".bs-donebutton")[0].cloneNode(true) : null, firstOption = this.$element.find("option")[0];
              this.sizeInfo.selectWidth = this.$newElement[0].offsetWidth;
              text.className = "text";
              a.className = "dropdown-item " + (firstOption ? firstOption.className : "");
              newElement.className = this.$menu[0].parentNode.className + " " + classNames.SHOW;
              newElement.style.width = 0;
              if (this.options.width === "auto")
                menu.style.minWidth = 0;
              menu.className = classNames.MENU + " " + classNames.SHOW;
              menuInner.className = "inner " + classNames.SHOW;
              menuInnerInner.className = classNames.MENU + " inner " + (version.major === "4" ? classNames.SHOW : "");
              divider.className = classNames.DIVIDER;
              dropdownHeader.className = "dropdown-header";
              text.appendChild(document.createTextNode("\u200B"));
              if (this.selectpicker.current.data.length) {
                for (var i = 0; i < this.selectpicker.current.data.length; i++) {
                  var data = this.selectpicker.current.data[i];
                  if (data.type === "option") {
                    li = data.element;
                    break;
                  }
                }
              } else {
                li = elementTemplates.li.cloneNode(false);
                a.appendChild(text);
                li.appendChild(a);
              }
              dropdownHeader.appendChild(text.cloneNode(true));
              if (this.selectpicker.view.widestOption) {
                menuInnerInner.appendChild(this.selectpicker.view.widestOption.cloneNode(true));
              }
              menuInnerInner.appendChild(li);
              menuInnerInner.appendChild(divider);
              menuInnerInner.appendChild(dropdownHeader);
              if (header)
                menu.appendChild(header);
              if (search) {
                var input = document.createElement("input");
                search.className = "bs-searchbox";
                input.className = "form-control";
                search.appendChild(input);
                menu.appendChild(search);
              }
              if (actions)
                menu.appendChild(actions);
              menuInner.appendChild(menuInnerInner);
              menu.appendChild(menuInner);
              if (doneButton)
                menu.appendChild(doneButton);
              newElement.appendChild(menu);
              document.body.appendChild(newElement);
              var liHeight = li.offsetHeight, dropdownHeaderHeight = dropdownHeader ? dropdownHeader.offsetHeight : 0, headerHeight = header ? header.offsetHeight : 0, searchHeight = search ? search.offsetHeight : 0, actionsHeight = actions ? actions.offsetHeight : 0, doneButtonHeight = doneButton ? doneButton.offsetHeight : 0, dividerHeight = $2(divider).outerHeight(true), menuStyle = window.getComputedStyle ? window.getComputedStyle(menu) : false, menuWidth = menu.offsetWidth, $menu = menuStyle ? null : $2(menu), menuPadding = {
                vert: toInteger(menuStyle ? menuStyle.paddingTop : $menu.css("paddingTop")) + toInteger(menuStyle ? menuStyle.paddingBottom : $menu.css("paddingBottom")) + toInteger(menuStyle ? menuStyle.borderTopWidth : $menu.css("borderTopWidth")) + toInteger(menuStyle ? menuStyle.borderBottomWidth : $menu.css("borderBottomWidth")),
                horiz: toInteger(menuStyle ? menuStyle.paddingLeft : $menu.css("paddingLeft")) + toInteger(menuStyle ? menuStyle.paddingRight : $menu.css("paddingRight")) + toInteger(menuStyle ? menuStyle.borderLeftWidth : $menu.css("borderLeftWidth")) + toInteger(menuStyle ? menuStyle.borderRightWidth : $menu.css("borderRightWidth"))
              }, menuExtras = {
                vert: menuPadding.vert + toInteger(menuStyle ? menuStyle.marginTop : $menu.css("marginTop")) + toInteger(menuStyle ? menuStyle.marginBottom : $menu.css("marginBottom")) + 2,
                horiz: menuPadding.horiz + toInteger(menuStyle ? menuStyle.marginLeft : $menu.css("marginLeft")) + toInteger(menuStyle ? menuStyle.marginRight : $menu.css("marginRight")) + 2
              }, scrollBarWidth;
              menuInner.style.overflowY = "scroll";
              scrollBarWidth = menu.offsetWidth - menuWidth;
              document.body.removeChild(newElement);
              this.sizeInfo.liHeight = liHeight;
              this.sizeInfo.dropdownHeaderHeight = dropdownHeaderHeight;
              this.sizeInfo.headerHeight = headerHeight;
              this.sizeInfo.searchHeight = searchHeight;
              this.sizeInfo.actionsHeight = actionsHeight;
              this.sizeInfo.doneButtonHeight = doneButtonHeight;
              this.sizeInfo.dividerHeight = dividerHeight;
              this.sizeInfo.menuPadding = menuPadding;
              this.sizeInfo.menuExtras = menuExtras;
              this.sizeInfo.menuWidth = menuWidth;
              this.sizeInfo.menuInnerInnerWidth = menuWidth - menuPadding.horiz;
              this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth;
              this.sizeInfo.scrollBarWidth = scrollBarWidth;
              this.sizeInfo.selectHeight = this.$newElement[0].offsetHeight;
              this.setPositionData();
            },
            getSelectPosition: function() {
              var that = this, $window = $2(window), pos = that.$newElement.offset(), $container = $2(that.options.container), containerPos;
              if (that.options.container && $container.length && !$container.is("body")) {
                containerPos = $container.offset();
                containerPos.top += parseInt($container.css("borderTopWidth"));
                containerPos.left += parseInt($container.css("borderLeftWidth"));
              } else {
                containerPos = { top: 0, left: 0 };
              }
              var winPad = that.options.windowPadding;
              this.sizeInfo.selectOffsetTop = pos.top - containerPos.top - $window.scrollTop();
              this.sizeInfo.selectOffsetBot = $window.height() - this.sizeInfo.selectOffsetTop - this.sizeInfo.selectHeight - containerPos.top - winPad[2];
              this.sizeInfo.selectOffsetLeft = pos.left - containerPos.left - $window.scrollLeft();
              this.sizeInfo.selectOffsetRight = $window.width() - this.sizeInfo.selectOffsetLeft - this.sizeInfo.selectWidth - containerPos.left - winPad[1];
              this.sizeInfo.selectOffsetTop -= winPad[0];
              this.sizeInfo.selectOffsetLeft -= winPad[3];
            },
            setMenuSize: function(isAuto) {
              this.getSelectPosition();
              var selectWidth = this.sizeInfo.selectWidth, liHeight = this.sizeInfo.liHeight, headerHeight = this.sizeInfo.headerHeight, searchHeight = this.sizeInfo.searchHeight, actionsHeight = this.sizeInfo.actionsHeight, doneButtonHeight = this.sizeInfo.doneButtonHeight, divHeight = this.sizeInfo.dividerHeight, menuPadding = this.sizeInfo.menuPadding, menuInnerHeight, menuHeight, divLength = 0, minHeight, _minHeight, maxHeight, menuInnerMinHeight, estimate, isDropup;
              if (this.options.dropupAuto) {
                estimate = liHeight * this.selectpicker.current.elements.length + menuPadding.vert;
                isDropup = this.sizeInfo.selectOffsetTop - this.sizeInfo.selectOffsetBot > this.sizeInfo.menuExtras.vert && estimate + this.sizeInfo.menuExtras.vert + 50 > this.sizeInfo.selectOffsetBot;
                if (this.selectpicker.isSearching === true) {
                  isDropup = this.selectpicker.dropup;
                }
                this.$newElement.toggleClass(classNames.DROPUP, isDropup);
                this.selectpicker.dropup = isDropup;
              }
              if (this.options.size === "auto") {
                _minHeight = this.selectpicker.current.elements.length > 3 ? this.sizeInfo.liHeight * 3 + this.sizeInfo.menuExtras.vert - 2 : 0;
                menuHeight = this.sizeInfo.selectOffsetBot - this.sizeInfo.menuExtras.vert;
                minHeight = _minHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight;
                menuInnerMinHeight = Math.max(_minHeight - menuPadding.vert, 0);
                if (this.$newElement.hasClass(classNames.DROPUP)) {
                  menuHeight = this.sizeInfo.selectOffsetTop - this.sizeInfo.menuExtras.vert;
                }
                maxHeight = menuHeight;
                menuInnerHeight = menuHeight - headerHeight - searchHeight - actionsHeight - doneButtonHeight - menuPadding.vert;
              } else if (this.options.size && this.options.size != "auto" && this.selectpicker.current.elements.length > this.options.size) {
                for (var i = 0; i < this.options.size; i++) {
                  if (this.selectpicker.current.data[i].type === "divider")
                    divLength++;
                }
                menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding.vert;
                menuInnerHeight = menuHeight - menuPadding.vert;
                maxHeight = menuHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight;
                minHeight = menuInnerMinHeight = "";
              }
              this.$menu.css({
                "max-height": maxHeight + "px",
                "overflow": "hidden",
                "min-height": minHeight + "px"
              });
              this.$menuInner.css({
                "max-height": menuInnerHeight + "px",
                "overflow-y": "auto",
                "min-height": menuInnerMinHeight + "px"
              });
              this.sizeInfo.menuInnerHeight = Math.max(menuInnerHeight, 1);
              if (this.selectpicker.current.data.length && this.selectpicker.current.data[this.selectpicker.current.data.length - 1].position > this.sizeInfo.menuInnerHeight) {
                this.sizeInfo.hasScrollBar = true;
                this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth + this.sizeInfo.scrollBarWidth;
              }
              if (this.options.dropdownAlignRight === "auto") {
                this.$menu.toggleClass(classNames.MENURIGHT, this.sizeInfo.selectOffsetLeft > this.sizeInfo.selectOffsetRight && this.sizeInfo.selectOffsetRight < this.sizeInfo.totalMenuWidth - selectWidth);
              }
              if (this.dropdown && this.dropdown._popper)
                this.dropdown._popper.update();
            },
            setSize: function(refresh) {
              this.liHeight(refresh);
              if (this.options.header)
                this.$menu.css("padding-top", 0);
              if (this.options.size !== false) {
                var that = this, $window = $2(window);
                this.setMenuSize();
                if (this.options.liveSearch) {
                  this.$searchbox.off("input.setMenuSize propertychange.setMenuSize").on("input.setMenuSize propertychange.setMenuSize", function() {
                    return that.setMenuSize();
                  });
                }
                if (this.options.size === "auto") {
                  $window.off("resize" + EVENT_KEY2 + "." + this.selectId + ".setMenuSize scroll" + EVENT_KEY2 + "." + this.selectId + ".setMenuSize").on("resize" + EVENT_KEY2 + "." + this.selectId + ".setMenuSize scroll" + EVENT_KEY2 + "." + this.selectId + ".setMenuSize", function() {
                    return that.setMenuSize();
                  });
                } else if (this.options.size && this.options.size != "auto" && this.selectpicker.current.elements.length > this.options.size) {
                  $window.off("resize" + EVENT_KEY2 + "." + this.selectId + ".setMenuSize scroll" + EVENT_KEY2 + "." + this.selectId + ".setMenuSize");
                }
              }
              this.createView(false, true, refresh);
            },
            setWidth: function() {
              var that = this;
              if (this.options.width === "auto") {
                requestAnimationFrame(function() {
                  that.$menu.css("min-width", "0");
                  that.$element.on("loaded" + EVENT_KEY2, function() {
                    that.liHeight();
                    that.setMenuSize();
                    var $selectClone = that.$newElement.clone().appendTo("body"), btnWidth = $selectClone.css("width", "auto").children("button").outerWidth();
                    $selectClone.remove();
                    that.sizeInfo.selectWidth = Math.max(that.sizeInfo.totalMenuWidth, btnWidth);
                    that.$newElement.css("width", that.sizeInfo.selectWidth + "px");
                  });
                });
              } else if (this.options.width === "fit") {
                this.$menu.css("min-width", "");
                this.$newElement.css("width", "").addClass("fit-width");
              } else if (this.options.width) {
                this.$menu.css("min-width", "");
                this.$newElement.css("width", this.options.width);
              } else {
                this.$menu.css("min-width", "");
                this.$newElement.css("width", "");
              }
              if (this.$newElement.hasClass("fit-width") && this.options.width !== "fit") {
                this.$newElement[0].classList.remove("fit-width");
              }
            },
            selectPosition: function() {
              this.$bsContainer = $2('<div class="bs-container" />');
              var that = this, $container = $2(this.options.container), pos, containerPos, actualHeight, getPlacement = function($element) {
                var containerPosition = {}, display = that.options.display || // Bootstrap 3 doesn't have $.fn.dropdown.Constructor.Default
                ($2.fn.dropdown.Constructor.Default ? $2.fn.dropdown.Constructor.Default.display : false);
                that.$bsContainer.addClass($element.attr("class").replace(/form-control|fit-width/gi, "")).toggleClass(classNames.DROPUP, $element.hasClass(classNames.DROPUP));
                pos = $element.offset();
                if (!$container.is("body")) {
                  containerPos = $container.offset();
                  containerPos.top += parseInt($container.css("borderTopWidth")) - $container.scrollTop();
                  containerPos.left += parseInt($container.css("borderLeftWidth")) - $container.scrollLeft();
                } else {
                  containerPos = { top: 0, left: 0 };
                }
                actualHeight = $element.hasClass(classNames.DROPUP) ? 0 : $element[0].offsetHeight;
                if (version.major < 4 || display === "static") {
                  containerPosition.top = pos.top - containerPos.top + actualHeight;
                  containerPosition.left = pos.left - containerPos.left;
                }
                containerPosition.width = $element[0].offsetWidth;
                that.$bsContainer.css(containerPosition);
              };
              this.$button.on("click.bs.dropdown.data-api", function() {
                if (that.isDisabled()) {
                  return;
                }
                getPlacement(that.$newElement);
                that.$bsContainer.appendTo(that.options.container).toggleClass(classNames.SHOW, !that.$button.hasClass(classNames.SHOW)).append(that.$menu);
              });
              $2(window).off("resize" + EVENT_KEY2 + "." + this.selectId + " scroll" + EVENT_KEY2 + "." + this.selectId).on("resize" + EVENT_KEY2 + "." + this.selectId + " scroll" + EVENT_KEY2 + "." + this.selectId, function() {
                var isActive = that.$newElement.hasClass(classNames.SHOW);
                if (isActive)
                  getPlacement(that.$newElement);
              });
              this.$element.on("hide" + EVENT_KEY2, function() {
                that.$menu.data("height", that.$menu.height());
                that.$bsContainer.detach();
              });
            },
            setOptionStatus: function(selectedOnly) {
              var that = this;
              that.noScroll = false;
              if (that.selectpicker.view.visibleElements && that.selectpicker.view.visibleElements.length) {
                for (var i = 0; i < that.selectpicker.view.visibleElements.length; i++) {
                  var liData = that.selectpicker.current.data[i + that.selectpicker.view.position0], option = liData.option;
                  if (option) {
                    if (selectedOnly !== true) {
                      that.setDisabled(
                        liData.index,
                        liData.disabled
                      );
                    }
                    that.setSelected(
                      liData.index,
                      option.selected
                    );
                  }
                }
              }
            },
            /**
             * @param {number} index - the index of the option that is being changed
             * @param {boolean} selected - true if the option is being selected, false if being deselected
             */
            setSelected: function(index, selected) {
              var li = this.selectpicker.main.elements[index], liData = this.selectpicker.main.data[index], activeIndexIsSet = this.activeIndex !== void 0, thisIsActive = this.activeIndex === index, prevActive, a, keepActive = thisIsActive || selected && !this.multiple && !activeIndexIsSet;
              liData.selected = selected;
              a = li.firstChild;
              if (selected) {
                this.selectedIndex = index;
              }
              li.classList.toggle("selected", selected);
              if (keepActive) {
                this.focusItem(li, liData);
                this.selectpicker.view.currentActive = li;
                this.activeIndex = index;
              } else {
                this.defocusItem(li);
              }
              if (a) {
                a.classList.toggle("selected", selected);
                if (selected) {
                  a.setAttribute("aria-selected", true);
                } else {
                  if (this.multiple) {
                    a.setAttribute("aria-selected", false);
                  } else {
                    a.removeAttribute("aria-selected");
                  }
                }
              }
              if (!keepActive && !activeIndexIsSet && selected && this.prevActiveIndex !== void 0) {
                prevActive = this.selectpicker.main.elements[this.prevActiveIndex];
                this.defocusItem(prevActive);
              }
            },
            /**
             * @param {number} index - the index of the option that is being disabled
             * @param {boolean} disabled - true if the option is being disabled, false if being enabled
             */
            setDisabled: function(index, disabled) {
              var li = this.selectpicker.main.elements[index], a;
              this.selectpicker.main.data[index].disabled = disabled;
              a = li.firstChild;
              li.classList.toggle(classNames.DISABLED, disabled);
              if (a) {
                if (version.major === "4")
                  a.classList.toggle(classNames.DISABLED, disabled);
                if (disabled) {
                  a.setAttribute("aria-disabled", disabled);
                  a.setAttribute("tabindex", -1);
                } else {
                  a.removeAttribute("aria-disabled");
                  a.setAttribute("tabindex", 0);
                }
              }
            },
            isDisabled: function() {
              return this.$element[0].disabled;
            },
            checkDisabled: function() {
              if (this.isDisabled()) {
                this.$newElement[0].classList.add(classNames.DISABLED);
                this.$button.addClass(classNames.DISABLED).attr("aria-disabled", true);
              } else {
                if (this.$button[0].classList.contains(classNames.DISABLED)) {
                  this.$newElement[0].classList.remove(classNames.DISABLED);
                  this.$button.removeClass(classNames.DISABLED).attr("aria-disabled", false);
                }
              }
            },
            clickListener: function() {
              var that = this, $document = $2(document);
              $document.data("spaceSelect", false);
              this.$button.on("keyup", function(e) {
                if (/(32)/.test(e.keyCode.toString(10)) && $document.data("spaceSelect")) {
                  e.preventDefault();
                  $document.data("spaceSelect", false);
                }
              });
              this.$newElement.on("show.bs.dropdown", function() {
                if (version.major > 3 && !that.dropdown) {
                  that.dropdown = that.$button.data("bs.dropdown");
                  that.dropdown._menu = that.$menu[0];
                }
              });
              this.$button.on("click.bs.dropdown.data-api", function() {
                if (!that.$newElement.hasClass(classNames.SHOW)) {
                  that.setSize();
                }
              });
              function setFocus() {
                if (that.options.liveSearch) {
                  that.$searchbox.trigger("focus");
                } else {
                  that.$menuInner.trigger("focus");
                }
              }
              function checkPopperExists() {
                if (that.dropdown && that.dropdown._popper && that.dropdown._popper.state.isCreated) {
                  setFocus();
                } else {
                  requestAnimationFrame(checkPopperExists);
                }
              }
              this.$element.on("shown" + EVENT_KEY2, function() {
                if (that.$menuInner[0].scrollTop !== that.selectpicker.view.scrollTop) {
                  that.$menuInner[0].scrollTop = that.selectpicker.view.scrollTop;
                }
                if (version.major > 3) {
                  requestAnimationFrame(checkPopperExists);
                } else {
                  setFocus();
                }
              });
              this.$menuInner.on("mouseenter", "li a", function(e) {
                var hoverLi = this.parentElement, position0 = that.isVirtual() ? that.selectpicker.view.position0 : 0, index = Array.prototype.indexOf.call(hoverLi.parentElement.children, hoverLi), hoverData = that.selectpicker.current.data[index + position0];
                that.focusItem(hoverLi, hoverData, true);
              });
              this.$menuInner.on("click", "li a", function(e, retainActive) {
                var $this = $2(this), element = that.$element[0], position0 = that.isVirtual() ? that.selectpicker.view.position0 : 0, clickedData = that.selectpicker.current.data[$this.parent().index() + position0], clickedIndex = clickedData.index, prevValue = getSelectValues(element), prevIndex = element.selectedIndex, prevOption = element.options[prevIndex], triggerChange = true;
                if (that.multiple && that.options.maxOptions !== 1) {
                  e.stopPropagation();
                }
                e.preventDefault();
                if (!that.isDisabled() && !$this.parent().hasClass(classNames.DISABLED)) {
                  var option = clickedData.option, $option = $2(option), state = option.selected, $optgroup = $option.parent("optgroup"), $optgroupOptions = $optgroup.find("option"), maxOptions = that.options.maxOptions, maxOptionsGrp = $optgroup.data("maxOptions") || false;
                  if (clickedIndex === that.activeIndex)
                    retainActive = true;
                  if (!retainActive) {
                    that.prevActiveIndex = that.activeIndex;
                    that.activeIndex = void 0;
                  }
                  if (!that.multiple) {
                    if (prevOption)
                      prevOption.selected = false;
                    option.selected = true;
                    that.setSelected(clickedIndex, true);
                  } else {
                    option.selected = !state;
                    that.setSelected(clickedIndex, !state);
                    that.focusedParent.focus();
                    if (maxOptions !== false || maxOptionsGrp !== false) {
                      var maxReached = maxOptions < getSelectedOptions(element).length, maxReachedGrp = maxOptionsGrp < $optgroup.find("option:selected").length;
                      if (maxOptions && maxReached || maxOptionsGrp && maxReachedGrp) {
                        if (maxOptions && maxOptions == 1) {
                          element.selectedIndex = -1;
                          option.selected = true;
                          that.setOptionStatus(true);
                        } else if (maxOptionsGrp && maxOptionsGrp == 1) {
                          for (var i = 0; i < $optgroupOptions.length; i++) {
                            var _option = $optgroupOptions[i];
                            _option.selected = false;
                            that.setSelected(_option.liIndex, false);
                          }
                          option.selected = true;
                          that.setSelected(clickedIndex, true);
                        } else {
                          var maxOptionsText = typeof that.options.maxOptionsText === "string" ? [that.options.maxOptionsText, that.options.maxOptionsText] : that.options.maxOptionsText, maxOptionsArr = typeof maxOptionsText === "function" ? maxOptionsText(maxOptions, maxOptionsGrp) : maxOptionsText, maxTxt = maxOptionsArr[0].replace("{n}", maxOptions), maxTxtGrp = maxOptionsArr[1].replace("{n}", maxOptionsGrp), $notify = $2('<div class="notify"></div>');
                          if (maxOptionsArr[2]) {
                            maxTxt = maxTxt.replace("{var}", maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);
                            maxTxtGrp = maxTxtGrp.replace("{var}", maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1]);
                          }
                          option.selected = false;
                          that.$menu.append($notify);
                          if (maxOptions && maxReached) {
                            $notify.append($2("<div>" + maxTxt + "</div>"));
                            triggerChange = false;
                            that.$element.trigger("maxReached" + EVENT_KEY2);
                          }
                          if (maxOptionsGrp && maxReachedGrp) {
                            $notify.append($2("<div>" + maxTxtGrp + "</div>"));
                            triggerChange = false;
                            that.$element.trigger("maxReachedGrp" + EVENT_KEY2);
                          }
                          setTimeout(function() {
                            that.setSelected(clickedIndex, false);
                          }, 10);
                          $notify[0].classList.add("fadeOut");
                          setTimeout(function() {
                            $notify.remove();
                          }, 1050);
                        }
                      }
                    }
                  }
                  if (!that.multiple || that.multiple && that.options.maxOptions === 1) {
                    that.$button.trigger("focus");
                  } else if (that.options.liveSearch) {
                    that.$searchbox.trigger("focus");
                  }
                  if (triggerChange) {
                    if (that.multiple || prevIndex !== element.selectedIndex) {
                      changedArguments = [option.index, $option.prop("selected"), prevValue];
                      that.$element.triggerNative("change");
                    }
                  }
                }
              });
              this.$menu.on("click", "li." + classNames.DISABLED + " a, ." + classNames.POPOVERHEADER + ", ." + classNames.POPOVERHEADER + " :not(.close)", function(e) {
                if (e.currentTarget == this) {
                  e.preventDefault();
                  e.stopPropagation();
                  if (that.options.liveSearch && !$2(e.target).hasClass("close")) {
                    that.$searchbox.trigger("focus");
                  } else {
                    that.$button.trigger("focus");
                  }
                }
              });
              this.$menuInner.on("click", ".divider, .dropdown-header", function(e) {
                e.preventDefault();
                e.stopPropagation();
                if (that.options.liveSearch) {
                  that.$searchbox.trigger("focus");
                } else {
                  that.$button.trigger("focus");
                }
              });
              this.$menu.on("click", "." + classNames.POPOVERHEADER + " .close", function() {
                that.$button.trigger("click");
              });
              this.$searchbox.on("click", function(e) {
                e.stopPropagation();
              });
              this.$menu.on("click", ".actions-btn", function(e) {
                if (that.options.liveSearch) {
                  that.$searchbox.trigger("focus");
                } else {
                  that.$button.trigger("focus");
                }
                e.preventDefault();
                e.stopPropagation();
                if ($2(this).hasClass("bs-select-all")) {
                  that.selectAll();
                } else {
                  that.deselectAll();
                }
              });
              this.$button.on("focus" + EVENT_KEY2, function(e) {
                var tabindex = that.$element[0].getAttribute("tabindex");
                if (tabindex !== void 0 && e.originalEvent && e.originalEvent.isTrusted) {
                  this.setAttribute("tabindex", tabindex);
                  that.$element[0].setAttribute("tabindex", -1);
                  that.selectpicker.view.tabindex = tabindex;
                }
              }).on("blur" + EVENT_KEY2, function(e) {
                if (that.selectpicker.view.tabindex !== void 0 && e.originalEvent && e.originalEvent.isTrusted) {
                  that.$element[0].setAttribute("tabindex", that.selectpicker.view.tabindex);
                  this.setAttribute("tabindex", -1);
                  that.selectpicker.view.tabindex = void 0;
                }
              });
              this.$element.on("change" + EVENT_KEY2, function() {
                that.render();
                that.$element.trigger("changed" + EVENT_KEY2, changedArguments);
                changedArguments = null;
              }).on("focus" + EVENT_KEY2, function() {
                if (!that.options.mobile)
                  that.$button[0].focus();
              });
            },
            liveSearchListener: function() {
              var that = this;
              this.$button.on("click.bs.dropdown.data-api", function() {
                if (!!that.$searchbox.val()) {
                  that.$searchbox.val("");
                  that.selectpicker.search.previousValue = void 0;
                }
              });
              this.$searchbox.on("click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api", function(e) {
                e.stopPropagation();
              });
              this.$searchbox.on("input propertychange", function() {
                var searchValue = that.$searchbox[0].value;
                that.selectpicker.search.elements = [];
                that.selectpicker.search.data = [];
                if (searchValue) {
                  var i, searchMatch = [], q = searchValue.toUpperCase(), cache = {}, cacheArr = [], searchStyle = that._searchStyle(), normalizeSearch = that.options.liveSearchNormalize;
                  if (normalizeSearch)
                    q = normalizeToBase(q);
                  for (var i = 0; i < that.selectpicker.main.data.length; i++) {
                    var li = that.selectpicker.main.data[i];
                    if (!cache[i]) {
                      cache[i] = stringSearch(li, q, searchStyle, normalizeSearch);
                    }
                    if (cache[i] && li.headerIndex !== void 0 && cacheArr.indexOf(li.headerIndex) === -1) {
                      if (li.headerIndex > 0) {
                        cache[li.headerIndex - 1] = true;
                        cacheArr.push(li.headerIndex - 1);
                      }
                      cache[li.headerIndex] = true;
                      cacheArr.push(li.headerIndex);
                      cache[li.lastIndex + 1] = true;
                    }
                    if (cache[i] && li.type !== "optgroup-label")
                      cacheArr.push(i);
                  }
                  for (var i = 0, cacheLen = cacheArr.length; i < cacheLen; i++) {
                    var index = cacheArr[i], prevIndex = cacheArr[i - 1], li = that.selectpicker.main.data[index], liPrev = that.selectpicker.main.data[prevIndex];
                    if (li.type !== "divider" || li.type === "divider" && liPrev && liPrev.type !== "divider" && cacheLen - 1 !== i) {
                      that.selectpicker.search.data.push(li);
                      searchMatch.push(that.selectpicker.main.elements[index]);
                    }
                  }
                  that.activeIndex = void 0;
                  that.noScroll = true;
                  that.$menuInner.scrollTop(0);
                  that.selectpicker.search.elements = searchMatch;
                  that.createView(true);
                  showNoResults.call(that, searchMatch, searchValue);
                } else if (that.selectpicker.search.previousValue) {
                  that.$menuInner.scrollTop(0);
                  that.createView(false);
                }
                that.selectpicker.search.previousValue = searchValue;
              });
            },
            _searchStyle: function() {
              return this.options.liveSearchStyle || "contains";
            },
            val: function(value) {
              var element = this.$element[0];
              if (typeof value !== "undefined") {
                var prevValue = getSelectValues(element);
                changedArguments = [null, null, prevValue];
                this.$element.val(value).trigger("changed" + EVENT_KEY2, changedArguments);
                if (this.$newElement.hasClass(classNames.SHOW)) {
                  if (this.multiple) {
                    this.setOptionStatus(true);
                  } else {
                    var liSelectedIndex = (element.options[element.selectedIndex] || {}).liIndex;
                    if (typeof liSelectedIndex === "number") {
                      this.setSelected(this.selectedIndex, false);
                      this.setSelected(liSelectedIndex, true);
                    }
                  }
                }
                this.render();
                changedArguments = null;
                return this.$element;
              } else {
                return this.$element.val();
              }
            },
            changeAll: function(status) {
              if (!this.multiple)
                return;
              if (typeof status === "undefined")
                status = true;
              var element = this.$element[0], previousSelected = 0, currentSelected = 0, prevValue = getSelectValues(element);
              element.classList.add("bs-select-hidden");
              for (var i = 0, data = this.selectpicker.current.data, len = data.length; i < len; i++) {
                var liData = data[i], option = liData.option;
                if (option && !liData.disabled && liData.type !== "divider") {
                  if (liData.selected)
                    previousSelected++;
                  option.selected = status;
                  if (status === true)
                    currentSelected++;
                }
              }
              element.classList.remove("bs-select-hidden");
              if (previousSelected === currentSelected)
                return;
              this.setOptionStatus();
              changedArguments = [null, null, prevValue];
              this.$element.triggerNative("change");
            },
            selectAll: function() {
              return this.changeAll(true);
            },
            deselectAll: function() {
              return this.changeAll(false);
            },
            toggle: function(e) {
              e = e || window.event;
              if (e)
                e.stopPropagation();
              this.$button.trigger("click.bs.dropdown.data-api");
            },
            keydown: function(e) {
              var $this = $2(this), isToggle = $this.hasClass("dropdown-toggle"), $parent = isToggle ? $this.closest(".dropdown") : $this.closest(Selector.MENU), that = $parent.data("this"), $items = that.findLis(), index, isActive, liActive, activeLi, offset2, updateScroll = false, downOnTab = e.which === keyCodes.TAB && !isToggle && !that.options.selectOnTab, isArrowKey = REGEXP_ARROW.test(e.which) || downOnTab, scrollTop = that.$menuInner[0].scrollTop, isVirtual = that.isVirtual(), position0 = isVirtual === true ? that.selectpicker.view.position0 : 0;
              if (e.which >= 112 && e.which <= 123)
                return;
              isActive = that.$newElement.hasClass(classNames.SHOW);
              if (!isActive && (isArrowKey || e.which >= 48 && e.which <= 57 || e.which >= 96 && e.which <= 105 || e.which >= 65 && e.which <= 90)) {
                that.$button.trigger("click.bs.dropdown.data-api");
                if (that.options.liveSearch) {
                  that.$searchbox.trigger("focus");
                  return;
                }
              }
              if (e.which === keyCodes.ESCAPE && isActive) {
                e.preventDefault();
                that.$button.trigger("click.bs.dropdown.data-api").trigger("focus");
              }
              if (isArrowKey) {
                if (!$items.length)
                  return;
                liActive = that.selectpicker.main.elements[that.activeIndex];
                index = liActive ? Array.prototype.indexOf.call(liActive.parentElement.children, liActive) : -1;
                if (index !== -1) {
                  that.defocusItem(liActive);
                }
                if (e.which === keyCodes.ARROW_UP) {
                  if (index !== -1)
                    index--;
                  if (index + position0 < 0)
                    index += $items.length;
                  if (!that.selectpicker.view.canHighlight[index + position0]) {
                    index = that.selectpicker.view.canHighlight.slice(0, index + position0).lastIndexOf(true) - position0;
                    if (index === -1)
                      index = $items.length - 1;
                  }
                } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) {
                  index++;
                  if (index + position0 >= that.selectpicker.view.canHighlight.length)
                    index = that.selectpicker.view.firstHighlightIndex;
                  if (!that.selectpicker.view.canHighlight[index + position0]) {
                    index = index + 1 + that.selectpicker.view.canHighlight.slice(index + position0 + 1).indexOf(true);
                  }
                }
                e.preventDefault();
                var liActiveIndex = position0 + index;
                if (e.which === keyCodes.ARROW_UP) {
                  if (position0 === 0 && index === $items.length - 1) {
                    that.$menuInner[0].scrollTop = that.$menuInner[0].scrollHeight;
                    liActiveIndex = that.selectpicker.current.elements.length - 1;
                  } else {
                    activeLi = that.selectpicker.current.data[liActiveIndex];
                    offset2 = activeLi.position - activeLi.height;
                    updateScroll = offset2 < scrollTop;
                  }
                } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) {
                  if (index === that.selectpicker.view.firstHighlightIndex) {
                    that.$menuInner[0].scrollTop = 0;
                    liActiveIndex = that.selectpicker.view.firstHighlightIndex;
                  } else {
                    activeLi = that.selectpicker.current.data[liActiveIndex];
                    offset2 = activeLi.position - that.sizeInfo.menuInnerHeight;
                    updateScroll = offset2 > scrollTop;
                  }
                }
                liActive = that.selectpicker.current.elements[liActiveIndex];
                that.activeIndex = that.selectpicker.current.data[liActiveIndex].index;
                that.focusItem(liActive);
                that.selectpicker.view.currentActive = liActive;
                if (updateScroll)
                  that.$menuInner[0].scrollTop = offset2;
                if (that.options.liveSearch) {
                  that.$searchbox.trigger("focus");
                } else {
                  $this.trigger("focus");
                }
              } else if (!$this.is("input") && !REGEXP_TAB_OR_ESCAPE.test(e.which) || e.which === keyCodes.SPACE && that.selectpicker.keydown.keyHistory) {
                var searchMatch, matches = [], keyHistory;
                e.preventDefault();
                that.selectpicker.keydown.keyHistory += keyCodeMap[e.which];
                if (that.selectpicker.keydown.resetKeyHistory.cancel)
                  clearTimeout(that.selectpicker.keydown.resetKeyHistory.cancel);
                that.selectpicker.keydown.resetKeyHistory.cancel = that.selectpicker.keydown.resetKeyHistory.start();
                keyHistory = that.selectpicker.keydown.keyHistory;
                if (/^(.)\1+$/.test(keyHistory)) {
                  keyHistory = keyHistory.charAt(0);
                }
                for (var i = 0; i < that.selectpicker.current.data.length; i++) {
                  var li = that.selectpicker.current.data[i], hasMatch;
                  hasMatch = stringSearch(li, keyHistory, "startsWith", true);
                  if (hasMatch && that.selectpicker.view.canHighlight[i]) {
                    matches.push(li.index);
                  }
                }
                if (matches.length) {
                  var matchIndex = 0;
                  $items.removeClass("active").find("a").removeClass("active");
                  if (keyHistory.length === 1) {
                    matchIndex = matches.indexOf(that.activeIndex);
                    if (matchIndex === -1 || matchIndex === matches.length - 1) {
                      matchIndex = 0;
                    } else {
                      matchIndex++;
                    }
                  }
                  searchMatch = matches[matchIndex];
                  activeLi = that.selectpicker.main.data[searchMatch];
                  if (scrollTop - activeLi.position > 0) {
                    offset2 = activeLi.position - activeLi.height;
                    updateScroll = true;
                  } else {
                    offset2 = activeLi.position - that.sizeInfo.menuInnerHeight;
                    updateScroll = activeLi.position > scrollTop + that.sizeInfo.menuInnerHeight;
                  }
                  liActive = that.selectpicker.main.elements[searchMatch];
                  that.activeIndex = matches[matchIndex];
                  that.focusItem(liActive);
                  if (liActive)
                    liActive.firstChild.focus();
                  if (updateScroll)
                    that.$menuInner[0].scrollTop = offset2;
                  $this.trigger("focus");
                }
              }
              if (isActive && (e.which === keyCodes.SPACE && !that.selectpicker.keydown.keyHistory || e.which === keyCodes.ENTER || e.which === keyCodes.TAB && that.options.selectOnTab)) {
                if (e.which !== keyCodes.SPACE)
                  e.preventDefault();
                if (!that.options.liveSearch || e.which !== keyCodes.SPACE) {
                  that.$menuInner.find(".active a").trigger("click", true);
                  $this.trigger("focus");
                  if (!that.options.liveSearch) {
                    e.preventDefault();
                    $2(document).data("spaceSelect", true);
                  }
                }
              }
            },
            mobile: function() {
              this.options.mobile = true;
              this.$element[0].classList.add("mobile-device");
            },
            refresh: function() {
              var config = $2.extend({}, this.options, this.$element.data());
              this.options = config;
              this.checkDisabled();
              this.buildData();
              this.setStyle();
              this.render();
              this.buildList();
              this.setWidth();
              this.setSize(true);
              this.$element.trigger("refreshed" + EVENT_KEY2);
            },
            hide: function() {
              this.$newElement.hide();
            },
            show: function() {
              this.$newElement.show();
            },
            remove: function() {
              this.$newElement.remove();
              this.$element.remove();
            },
            destroy: function() {
              this.$newElement.before(this.$element).remove();
              if (this.$bsContainer) {
                this.$bsContainer.remove();
              } else {
                this.$menu.remove();
              }
              if (this.selectpicker.view.titleOption && this.selectpicker.view.titleOption.parentNode) {
                this.selectpicker.view.titleOption.parentNode.removeChild(this.selectpicker.view.titleOption);
              }
              this.$element.off(EVENT_KEY2).removeData("selectpicker").removeClass("bs-select-hidden selectpicker");
              $2(window).off(EVENT_KEY2 + "." + this.selectId);
            }
          };
          function Plugin(option) {
            var args = arguments;
            var _option = option;
            [].shift.apply(args);
            if (!version.success) {
              try {
                version.full = ($2.fn.dropdown.Constructor.VERSION || "").split(" ")[0].split(".");
              } catch (err) {
                if (Selectpicker.BootstrapVersion) {
                  version.full = Selectpicker.BootstrapVersion.split(" ")[0].split(".");
                } else {
                  version.full = [version.major, "0", "0"];
                  console.warn(
                    "There was an issue retrieving Bootstrap's version. Ensure Bootstrap is being loaded before bootstrap-select and there is no namespace collision. If loading Bootstrap asynchronously, the version may need to be manually specified via $.fn.selectpicker.Constructor.BootstrapVersion.",
                    err
                  );
                }
              }
              version.major = version.full[0];
              version.success = true;
            }
            if (version.major === "4") {
              var toUpdate = [];
              if (Selectpicker.DEFAULTS.style === classNames.BUTTONCLASS)
                toUpdate.push({ name: "style", className: "BUTTONCLASS" });
              if (Selectpicker.DEFAULTS.iconBase === classNames.ICONBASE)
                toUpdate.push({ name: "iconBase", className: "ICONBASE" });
              if (Selectpicker.DEFAULTS.tickIcon === classNames.TICKICON)
                toUpdate.push({ name: "tickIcon", className: "TICKICON" });
              classNames.DIVIDER = "dropdown-divider";
              classNames.SHOW = "show";
              classNames.BUTTONCLASS = "btn-light";
              classNames.POPOVERHEADER = "popover-header";
              classNames.ICONBASE = "";
              classNames.TICKICON = "bs-ok-default";
              for (var i = 0; i < toUpdate.length; i++) {
                var option = toUpdate[i];
                Selectpicker.DEFAULTS[option.name] = classNames[option.className];
              }
            }
            var value;
            var chain = this.each(function() {
              var $this = $2(this);
              if ($this.is("select")) {
                var data = $this.data("selectpicker"), options = typeof _option == "object" && _option;
                if (!data) {
                  var dataAttributes = $this.data();
                  for (var dataAttr in dataAttributes) {
                    if (Object.prototype.hasOwnProperty.call(dataAttributes, dataAttr) && $2.inArray(dataAttr, DISALLOWED_ATTRIBUTES2) !== -1) {
                      delete dataAttributes[dataAttr];
                    }
                  }
                  var config = $2.extend({}, Selectpicker.DEFAULTS, $2.fn.selectpicker.defaults || {}, dataAttributes, options);
                  config.template = $2.extend({}, Selectpicker.DEFAULTS.template, $2.fn.selectpicker.defaults ? $2.fn.selectpicker.defaults.template : {}, dataAttributes.template, options.template);
                  $this.data("selectpicker", data = new Selectpicker(this, config));
                } else if (options) {
                  for (var i2 in options) {
                    if (Object.prototype.hasOwnProperty.call(options, i2)) {
                      data.options[i2] = options[i2];
                    }
                  }
                }
                if (typeof _option == "string") {
                  if (data[_option] instanceof Function) {
                    value = data[_option].apply(data, args);
                  } else {
                    value = data.options[_option];
                  }
                }
              }
            });
            if (typeof value !== "undefined") {
              return value;
            } else {
              return chain;
            }
          }
          var old = $2.fn.selectpicker;
          $2.fn.selectpicker = Plugin;
          $2.fn.selectpicker.Constructor = Selectpicker;
          $2.fn.selectpicker.noConflict = function() {
            $2.fn.selectpicker = old;
            return this;
          };
          function keydownHandler() {
            if ($2.fn.dropdown) {
              var bootstrapKeydown = $2.fn.dropdown.Constructor._dataApiKeydownHandler || $2.fn.dropdown.Constructor.prototype.keydown;
              return bootstrapKeydown.apply(this, arguments);
            }
          }
          $2(document).off("keydown.bs.dropdown.data-api").on("keydown.bs.dropdown.data-api", ':not(.bootstrap-select) > [data-toggle="dropdown"]', keydownHandler).on("keydown.bs.dropdown.data-api", ":not(.bootstrap-select) > .dropdown-menu", keydownHandler).on("keydown" + EVENT_KEY2, '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', Selectpicker.prototype.keydown).on("focusin.modal", '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', function(e) {
            e.stopPropagation();
          });
          $2(window).on("load" + EVENT_KEY2 + ".data-api", function() {
            $2(".selectpicker").each(function() {
              var $selectpicker = $2(this);
              Plugin.call($selectpicker, $selectpicker.data());
            });
          });
        })(jQuery2);
      });
    }
  });

  // node_modules/sweetalert2/dist/sweetalert2.all.js
  var require_sweetalert2_all = __commonJS({
    "node_modules/sweetalert2/dist/sweetalert2.all.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = global2 || self, global2.Sweetalert2 = factory());
      })(exports, function() {
        "use strict";
        var privateProps = {
          awaitingPromise: /* @__PURE__ */ new WeakMap(),
          promise: /* @__PURE__ */ new WeakMap(),
          innerParams: /* @__PURE__ */ new WeakMap(),
          domCache: /* @__PURE__ */ new WeakMap()
        };
        const swalPrefix = "swal2-";
        const prefix = (items) => {
          const result = {};
          for (const i in items) {
            result[items[i]] = swalPrefix + items[i];
          }
          return result;
        };
        const swalClasses = prefix(["container", "shown", "height-auto", "iosfix", "popup", "modal", "no-backdrop", "no-transition", "toast", "toast-shown", "show", "hide", "close", "title", "html-container", "actions", "confirm", "deny", "cancel", "default-outline", "footer", "icon", "icon-content", "image", "input", "file", "range", "select", "radio", "checkbox", "label", "textarea", "inputerror", "input-label", "validation-message", "progress-steps", "active-progress-step", "progress-step", "progress-step-line", "loader", "loading", "styled", "top", "top-start", "top-end", "top-left", "top-right", "center", "center-start", "center-end", "center-left", "center-right", "bottom", "bottom-start", "bottom-end", "bottom-left", "bottom-right", "grow-row", "grow-column", "grow-fullscreen", "rtl", "timer-progress-bar", "timer-progress-bar-container", "scrollbar-measure", "icon-success", "icon-warning", "icon-info", "icon-question", "icon-error", "no-war"]);
        const iconTypes = prefix(["success", "warning", "info", "question", "error"]);
        const consolePrefix = "SweetAlert2:";
        const uniqueArray = (arr) => {
          const result = [];
          for (let i = 0; i < arr.length; i++) {
            if (result.indexOf(arr[i]) === -1) {
              result.push(arr[i]);
            }
          }
          return result;
        };
        const capitalizeFirstLetter = (str) => str.charAt(0).toUpperCase() + str.slice(1);
        const warn = (message) => {
          console.warn("".concat(consolePrefix, " ").concat(typeof message === "object" ? message.join(" ") : message));
        };
        const error = (message) => {
          console.error("".concat(consolePrefix, " ").concat(message));
        };
        const previousWarnOnceMessages = [];
        const warnOnce = (message) => {
          if (!previousWarnOnceMessages.includes(message)) {
            previousWarnOnceMessages.push(message);
            warn(message);
          }
        };
        const warnAboutDeprecation = (deprecatedParam, useInstead) => {
          warnOnce('"'.concat(deprecatedParam, '" is deprecated and will be removed in the next major release. Please use "').concat(useInstead, '" instead.'));
        };
        const callIfFunction = (arg) => typeof arg === "function" ? arg() : arg;
        const hasToPromiseFn = (arg) => arg && typeof arg.toPromise === "function";
        const asPromise = (arg) => hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);
        const isPromise = (arg) => arg && Promise.resolve(arg) === arg;
        const getRandomElement = (arr) => arr[Math.floor(Math.random() * arr.length)];
        const getContainer = () => document.body.querySelector(".".concat(swalClasses.container));
        const elementBySelector = (selectorString) => {
          const container = getContainer();
          return container ? container.querySelector(selectorString) : null;
        };
        const elementByClass = (className) => {
          return elementBySelector(".".concat(className));
        };
        const getPopup = () => elementByClass(swalClasses.popup);
        const getIcon = () => elementByClass(swalClasses.icon);
        const getTitle = () => elementByClass(swalClasses.title);
        const getHtmlContainer = () => elementByClass(swalClasses["html-container"]);
        const getImage = () => elementByClass(swalClasses.image);
        const getProgressSteps = () => elementByClass(swalClasses["progress-steps"]);
        const getValidationMessage = () => elementByClass(swalClasses["validation-message"]);
        const getConfirmButton = () => elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.confirm));
        const getDenyButton = () => elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.deny));
        const getInputLabel = () => elementByClass(swalClasses["input-label"]);
        const getLoader = () => elementBySelector(".".concat(swalClasses.loader));
        const getCancelButton = () => elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.cancel));
        const getActions = () => elementByClass(swalClasses.actions);
        const getFooter = () => elementByClass(swalClasses.footer);
        const getTimerProgressBar = () => elementByClass(swalClasses["timer-progress-bar"]);
        const getCloseButton = () => elementByClass(swalClasses.close);
        const focusable = '\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n';
        const getFocusableElements = () => {
          const focusableElementsWithTabindex = Array.from(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort((a, b) => {
            const tabindexA = parseInt(a.getAttribute("tabindex"));
            const tabindexB = parseInt(b.getAttribute("tabindex"));
            if (tabindexA > tabindexB) {
              return 1;
            } else if (tabindexA < tabindexB) {
              return -1;
            }
            return 0;
          });
          const otherFocusableElements = Array.from(getPopup().querySelectorAll(focusable)).filter((el) => el.getAttribute("tabindex") !== "-1");
          return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter((el) => isVisible2(el));
        };
        const isModal = () => {
          return hasClass(document.body, swalClasses.shown) && !hasClass(document.body, swalClasses["toast-shown"]) && !hasClass(document.body, swalClasses["no-backdrop"]);
        };
        const isToast = () => {
          return getPopup() && hasClass(getPopup(), swalClasses.toast);
        };
        const isLoading = () => {
          return getPopup().hasAttribute("data-loading");
        };
        const states = {
          previousBodyPadding: null
        };
        const setInnerHtml = (elem, html) => {
          elem.textContent = "";
          if (html) {
            const parser = new DOMParser();
            const parsed = parser.parseFromString(html, "text/html");
            Array.from(parsed.querySelector("head").childNodes).forEach((child) => {
              elem.appendChild(child);
            });
            Array.from(parsed.querySelector("body").childNodes).forEach((child) => {
              elem.appendChild(child);
            });
          }
        };
        const hasClass = (elem, className) => {
          if (!className) {
            return false;
          }
          const classList = className.split(/\s+/);
          for (let i = 0; i < classList.length; i++) {
            if (!elem.classList.contains(classList[i])) {
              return false;
            }
          }
          return true;
        };
        const removeCustomClasses = (elem, params) => {
          Array.from(elem.classList).forEach((className) => {
            if (!Object.values(swalClasses).includes(className) && !Object.values(iconTypes).includes(className) && !Object.values(params.showClass).includes(className)) {
              elem.classList.remove(className);
            }
          });
        };
        const applyCustomClass = (elem, params, className) => {
          removeCustomClasses(elem, params);
          if (params.customClass && params.customClass[className]) {
            if (typeof params.customClass[className] !== "string" && !params.customClass[className].forEach) {
              return warn("Invalid type of customClass.".concat(className, '! Expected string or iterable object, got "').concat(typeof params.customClass[className], '"'));
            }
            addClass(elem, params.customClass[className]);
          }
        };
        const getInput = (popup, inputClass) => {
          if (!inputClass) {
            return null;
          }
          switch (inputClass) {
            case "select":
            case "textarea":
            case "file":
              return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses[inputClass]));
            case "checkbox":
              return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.checkbox, " input"));
            case "radio":
              return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.radio, " input:checked")) || popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.radio, " input:first-child"));
            case "range":
              return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.range, " input"));
            default:
              return popup.querySelector(".".concat(swalClasses.popup, " > .").concat(swalClasses.input));
          }
        };
        const focusInput = (input) => {
          input.focus();
          if (input.type !== "file") {
            const val = input.value;
            input.value = "";
            input.value = val;
          }
        };
        const toggleClass = (target, classList, condition) => {
          if (!target || !classList) {
            return;
          }
          if (typeof classList === "string") {
            classList = classList.split(/\s+/).filter(Boolean);
          }
          classList.forEach((className) => {
            if (Array.isArray(target)) {
              target.forEach((elem) => {
                condition ? elem.classList.add(className) : elem.classList.remove(className);
              });
            } else {
              condition ? target.classList.add(className) : target.classList.remove(className);
            }
          });
        };
        const addClass = (target, classList) => {
          toggleClass(target, classList, true);
        };
        const removeClass = (target, classList) => {
          toggleClass(target, classList, false);
        };
        const getDirectChildByClass = (elem, className) => {
          const children = Array.from(elem.children);
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (child instanceof HTMLElement && hasClass(child, className)) {
              return child;
            }
          }
        };
        const applyNumericalStyle = (elem, property, value) => {
          if (value === "".concat(parseInt(value))) {
            value = parseInt(value);
          }
          if (value || parseInt(value) === 0) {
            elem.style[property] = typeof value === "number" ? "".concat(value, "px") : value;
          } else {
            elem.style.removeProperty(property);
          }
        };
        const show = function(elem) {
          let display = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "flex";
          elem.style.display = display;
        };
        const hide2 = (elem) => {
          elem.style.display = "none";
        };
        const setStyle = (parent, selector, property, value) => {
          const el = parent.querySelector(selector);
          if (el) {
            el.style[property] = value;
          }
        };
        const toggle = function(elem, condition) {
          let display = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "flex";
          condition ? show(elem, display) : hide2(elem);
        };
        const isVisible2 = (elem) => !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));
        const allButtonsAreHidden = () => !isVisible2(getConfirmButton()) && !isVisible2(getDenyButton()) && !isVisible2(getCancelButton());
        const isScrollable = (elem) => !!(elem.scrollHeight > elem.clientHeight);
        const hasCssAnimation = (elem) => {
          const style = window.getComputedStyle(elem);
          const animDuration = parseFloat(style.getPropertyValue("animation-duration") || "0");
          const transDuration = parseFloat(style.getPropertyValue("transition-duration") || "0");
          return animDuration > 0 || transDuration > 0;
        };
        const animateTimerProgressBar = function(timer) {
          let reset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          const timerProgressBar = getTimerProgressBar();
          if (isVisible2(timerProgressBar)) {
            if (reset) {
              timerProgressBar.style.transition = "none";
              timerProgressBar.style.width = "100%";
            }
            setTimeout(() => {
              timerProgressBar.style.transition = "width ".concat(timer / 1e3, "s linear");
              timerProgressBar.style.width = "0%";
            }, 10);
          }
        };
        const stopTimerProgressBar = () => {
          const timerProgressBar = getTimerProgressBar();
          const timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
          timerProgressBar.style.removeProperty("transition");
          timerProgressBar.style.width = "100%";
          const timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
          const timerProgressBarPercent = timerProgressBarWidth / timerProgressBarFullWidth * 100;
          timerProgressBar.style.removeProperty("transition");
          timerProgressBar.style.width = "".concat(timerProgressBarPercent, "%");
        };
        const RESTORE_FOCUS_TIMEOUT = 100;
        const globalState = {};
        const focusPreviousActiveElement = () => {
          if (globalState.previousActiveElement instanceof HTMLElement) {
            globalState.previousActiveElement.focus();
            globalState.previousActiveElement = null;
          } else if (document.body) {
            document.body.focus();
          }
        };
        const restoreActiveElement = (returnFocus) => {
          return new Promise((resolve) => {
            if (!returnFocus) {
              return resolve();
            }
            const x = window.scrollX;
            const y = window.scrollY;
            globalState.restoreFocusTimeout = setTimeout(() => {
              focusPreviousActiveElement();
              resolve();
            }, RESTORE_FOCUS_TIMEOUT);
            window.scrollTo(x, y);
          });
        };
        const isNodeEnv = () => typeof window === "undefined" || typeof document === "undefined";
        const sweetHTML = '\n <div aria-labelledby="'.concat(swalClasses.title, '" aria-describedby="').concat(swalClasses["html-container"], '" class="').concat(swalClasses.popup, '" tabindex="-1">\n   <button type="button" class="').concat(swalClasses.close, '"></button>\n   <ul class="').concat(swalClasses["progress-steps"], '"></ul>\n   <div class="').concat(swalClasses.icon, '"></div>\n   <img class="').concat(swalClasses.image, '" />\n   <h2 class="').concat(swalClasses.title, '" id="').concat(swalClasses.title, '"></h2>\n   <div class="').concat(swalClasses["html-container"], '" id="').concat(swalClasses["html-container"], '"></div>\n   <input class="').concat(swalClasses.input, '" />\n   <input type="file" class="').concat(swalClasses.file, '" />\n   <div class="').concat(swalClasses.range, '">\n     <input type="range" />\n     <output></output>\n   </div>\n   <select class="').concat(swalClasses.select, '"></select>\n   <div class="').concat(swalClasses.radio, '"></div>\n   <label for="').concat(swalClasses.checkbox, '" class="').concat(swalClasses.checkbox, '">\n     <input type="checkbox" />\n     <span class="').concat(swalClasses.label, '"></span>\n   </label>\n   <textarea class="').concat(swalClasses.textarea, '"></textarea>\n   <div class="').concat(swalClasses["validation-message"], '" id="').concat(swalClasses["validation-message"], '"></div>\n   <div class="').concat(swalClasses.actions, '">\n     <div class="').concat(swalClasses.loader, '"></div>\n     <button type="button" class="').concat(swalClasses.confirm, '"></button>\n     <button type="button" class="').concat(swalClasses.deny, '"></button>\n     <button type="button" class="').concat(swalClasses.cancel, '"></button>\n   </div>\n   <div class="').concat(swalClasses.footer, '"></div>\n   <div class="').concat(swalClasses["timer-progress-bar-container"], '">\n     <div class="').concat(swalClasses["timer-progress-bar"], '"></div>\n   </div>\n </div>\n').replace(/(^|\n)\s*/g, "");
        const resetOldContainer = () => {
          const oldContainer = getContainer();
          if (!oldContainer) {
            return false;
          }
          oldContainer.remove();
          removeClass([document.documentElement, document.body], [swalClasses["no-backdrop"], swalClasses["toast-shown"], swalClasses["has-column"]]);
          return true;
        };
        const resetValidationMessage = () => {
          globalState.currentInstance.resetValidationMessage();
        };
        const addInputChangeListeners = () => {
          const popup = getPopup();
          const input = getDirectChildByClass(popup, swalClasses.input);
          const file = getDirectChildByClass(popup, swalClasses.file);
          const range = popup.querySelector(".".concat(swalClasses.range, " input"));
          const rangeOutput = popup.querySelector(".".concat(swalClasses.range, " output"));
          const select = getDirectChildByClass(popup, swalClasses.select);
          const checkbox = popup.querySelector(".".concat(swalClasses.checkbox, " input"));
          const textarea = getDirectChildByClass(popup, swalClasses.textarea);
          input.oninput = resetValidationMessage;
          file.onchange = resetValidationMessage;
          select.onchange = resetValidationMessage;
          checkbox.onchange = resetValidationMessage;
          textarea.oninput = resetValidationMessage;
          range.oninput = () => {
            resetValidationMessage();
            rangeOutput.value = range.value;
          };
          range.onchange = () => {
            resetValidationMessage();
            rangeOutput.value = range.value;
          };
        };
        const getTarget = (target) => typeof target === "string" ? document.querySelector(target) : target;
        const setupAccessibility = (params) => {
          const popup = getPopup();
          popup.setAttribute("role", params.toast ? "alert" : "dialog");
          popup.setAttribute("aria-live", params.toast ? "polite" : "assertive");
          if (!params.toast) {
            popup.setAttribute("aria-modal", "true");
          }
        };
        const setupRTL = (targetElement) => {
          if (window.getComputedStyle(targetElement).direction === "rtl") {
            addClass(getContainer(), swalClasses.rtl);
          }
        };
        const init = (params) => {
          const oldContainerExisted = resetOldContainer();
          if (isNodeEnv()) {
            error("SweetAlert2 requires document to initialize");
            return;
          }
          const container = document.createElement("div");
          container.className = swalClasses.container;
          if (oldContainerExisted) {
            addClass(container, swalClasses["no-transition"]);
          }
          setInnerHtml(container, sweetHTML);
          const targetElement = getTarget(params.target);
          targetElement.appendChild(container);
          setupAccessibility(params);
          setupRTL(targetElement);
          addInputChangeListeners();
        };
        const parseHtmlToContainer = (param, target) => {
          if (param instanceof HTMLElement) {
            target.appendChild(param);
          } else if (typeof param === "object") {
            handleObject(param, target);
          } else if (param) {
            setInnerHtml(target, param);
          }
        };
        const handleObject = (param, target) => {
          if (param.jquery) {
            handleJqueryElem(target, param);
          } else {
            setInnerHtml(target, param.toString());
          }
        };
        const handleJqueryElem = (target, elem) => {
          target.textContent = "";
          if (0 in elem) {
            for (let i = 0; i in elem; i++) {
              target.appendChild(elem[i].cloneNode(true));
            }
          } else {
            target.appendChild(elem.cloneNode(true));
          }
        };
        const animationEndEvent = (() => {
          if (isNodeEnv()) {
            return false;
          }
          const testEl = document.createElement("div");
          const transEndEventNames = {
            WebkitAnimation: "webkitAnimationEnd",
            // Chrome, Safari and Opera
            animation: "animationend"
            // Standard syntax
          };
          for (const i in transEndEventNames) {
            if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== "undefined") {
              return transEndEventNames[i];
            }
          }
          return false;
        })();
        const measureScrollbar = () => {
          const scrollDiv = document.createElement("div");
          scrollDiv.className = swalClasses["scrollbar-measure"];
          document.body.appendChild(scrollDiv);
          const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
          document.body.removeChild(scrollDiv);
          return scrollbarWidth;
        };
        const renderActions = (instance, params) => {
          const actions = getActions();
          const loader = getLoader();
          if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {
            hide2(actions);
          } else {
            show(actions);
          }
          applyCustomClass(actions, params, "actions");
          renderButtons(actions, loader, params);
          setInnerHtml(loader, params.loaderHtml);
          applyCustomClass(loader, params, "loader");
        };
        function renderButtons(actions, loader, params) {
          const confirmButton = getConfirmButton();
          const denyButton = getDenyButton();
          const cancelButton = getCancelButton();
          renderButton(confirmButton, "confirm", params);
          renderButton(denyButton, "deny", params);
          renderButton(cancelButton, "cancel", params);
          handleButtonsStyling(confirmButton, denyButton, cancelButton, params);
          if (params.reverseButtons) {
            if (params.toast) {
              actions.insertBefore(cancelButton, confirmButton);
              actions.insertBefore(denyButton, confirmButton);
            } else {
              actions.insertBefore(cancelButton, loader);
              actions.insertBefore(denyButton, loader);
              actions.insertBefore(confirmButton, loader);
            }
          }
        }
        function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {
          if (!params.buttonsStyling) {
            return removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);
          }
          addClass([confirmButton, denyButton, cancelButton], swalClasses.styled);
          if (params.confirmButtonColor) {
            confirmButton.style.backgroundColor = params.confirmButtonColor;
            addClass(confirmButton, swalClasses["default-outline"]);
          }
          if (params.denyButtonColor) {
            denyButton.style.backgroundColor = params.denyButtonColor;
            addClass(denyButton, swalClasses["default-outline"]);
          }
          if (params.cancelButtonColor) {
            cancelButton.style.backgroundColor = params.cancelButtonColor;
            addClass(cancelButton, swalClasses["default-outline"]);
          }
        }
        function renderButton(button, buttonType, params) {
          toggle(button, params["show".concat(capitalizeFirstLetter(buttonType), "Button")], "inline-block");
          setInnerHtml(button, params["".concat(buttonType, "ButtonText")]);
          button.setAttribute("aria-label", params["".concat(buttonType, "ButtonAriaLabel")]);
          button.className = swalClasses[buttonType];
          applyCustomClass(button, params, "".concat(buttonType, "Button"));
          addClass(button, params["".concat(buttonType, "ButtonClass")]);
        }
        const renderCloseButton = (instance, params) => {
          const closeButton = getCloseButton();
          setInnerHtml(closeButton, params.closeButtonHtml);
          applyCustomClass(closeButton, params, "closeButton");
          toggle(closeButton, params.showCloseButton);
          closeButton.setAttribute("aria-label", params.closeButtonAriaLabel);
        };
        const renderContainer = (instance, params) => {
          const container = getContainer();
          if (!container) {
            return;
          }
          handleBackdropParam(container, params.backdrop);
          handlePositionParam(container, params.position);
          handleGrowParam(container, params.grow);
          applyCustomClass(container, params, "container");
        };
        function handleBackdropParam(container, backdrop) {
          if (typeof backdrop === "string") {
            container.style.background = backdrop;
          } else if (!backdrop) {
            addClass([document.documentElement, document.body], swalClasses["no-backdrop"]);
          }
        }
        function handlePositionParam(container, position) {
          if (position in swalClasses) {
            addClass(container, swalClasses[position]);
          } else {
            warn('The "position" parameter is not valid, defaulting to "center"');
            addClass(container, swalClasses.center);
          }
        }
        function handleGrowParam(container, grow) {
          if (grow && typeof grow === "string") {
            const growClass = "grow-".concat(grow);
            if (growClass in swalClasses) {
              addClass(container, swalClasses[growClass]);
            }
          }
        }
        const inputClasses = ["input", "file", "range", "select", "radio", "checkbox", "textarea"];
        const renderInput = (instance, params) => {
          const popup = getPopup();
          const innerParams = privateProps.innerParams.get(instance);
          const rerender = !innerParams || params.input !== innerParams.input;
          inputClasses.forEach((inputClass) => {
            const inputContainer = getDirectChildByClass(popup, swalClasses[inputClass]);
            setAttributes(inputClass, params.inputAttributes);
            inputContainer.className = swalClasses[inputClass];
            if (rerender) {
              hide2(inputContainer);
            }
          });
          if (params.input) {
            if (rerender) {
              showInput(params);
            }
            setCustomClass(params);
          }
        };
        const showInput = (params) => {
          if (!renderInputType[params.input]) {
            return error('Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "'.concat(params.input, '"'));
          }
          const inputContainer = getInputContainer(params.input);
          const input = renderInputType[params.input](inputContainer, params);
          show(inputContainer);
          setTimeout(() => {
            focusInput(input);
          });
        };
        const removeAttributes = (input) => {
          for (let i = 0; i < input.attributes.length; i++) {
            const attrName = input.attributes[i].name;
            if (!["type", "value", "style"].includes(attrName)) {
              input.removeAttribute(attrName);
            }
          }
        };
        const setAttributes = (inputClass, inputAttributes) => {
          const input = getInput(getPopup(), inputClass);
          if (!input) {
            return;
          }
          removeAttributes(input);
          for (const attr in inputAttributes) {
            input.setAttribute(attr, inputAttributes[attr]);
          }
        };
        const setCustomClass = (params) => {
          const inputContainer = getInputContainer(params.input);
          if (typeof params.customClass === "object") {
            addClass(inputContainer, params.customClass.input);
          }
        };
        const setInputPlaceholder = (input, params) => {
          if (!input.placeholder || params.inputPlaceholder) {
            input.placeholder = params.inputPlaceholder;
          }
        };
        const setInputLabel = (input, prependTo, params) => {
          if (params.inputLabel) {
            input.id = swalClasses.input;
            const label = document.createElement("label");
            const labelClass = swalClasses["input-label"];
            label.setAttribute("for", input.id);
            label.className = labelClass;
            if (typeof params.customClass === "object") {
              addClass(label, params.customClass.inputLabel);
            }
            label.innerText = params.inputLabel;
            prependTo.insertAdjacentElement("beforebegin", label);
          }
        };
        const getInputContainer = (inputType) => {
          return getDirectChildByClass(getPopup(), swalClasses[inputType] || swalClasses.input);
        };
        const checkAndSetInputValue = (input, inputValue) => {
          if (["string", "number"].includes(typeof inputValue)) {
            input.value = "".concat(inputValue);
          } else if (!isPromise(inputValue)) {
            warn('Unexpected type of inputValue! Expected "string", "number" or "Promise", got "'.concat(typeof inputValue, '"'));
          }
        };
        const renderInputType = {};
        renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = (input, params) => {
          checkAndSetInputValue(input, params.inputValue);
          setInputLabel(input, input, params);
          setInputPlaceholder(input, params);
          input.type = params.input;
          return input;
        };
        renderInputType.file = (input, params) => {
          setInputLabel(input, input, params);
          setInputPlaceholder(input, params);
          return input;
        };
        renderInputType.range = (range, params) => {
          const rangeInput = range.querySelector("input");
          const rangeOutput = range.querySelector("output");
          checkAndSetInputValue(rangeInput, params.inputValue);
          rangeInput.type = params.input;
          checkAndSetInputValue(rangeOutput, params.inputValue);
          setInputLabel(rangeInput, range, params);
          return range;
        };
        renderInputType.select = (select, params) => {
          select.textContent = "";
          if (params.inputPlaceholder) {
            const placeholder = document.createElement("option");
            setInnerHtml(placeholder, params.inputPlaceholder);
            placeholder.value = "";
            placeholder.disabled = true;
            placeholder.selected = true;
            select.appendChild(placeholder);
          }
          setInputLabel(select, select, params);
          return select;
        };
        renderInputType.radio = (radio) => {
          radio.textContent = "";
          return radio;
        };
        renderInputType.checkbox = (checkboxContainer, params) => {
          const checkbox = getInput(getPopup(), "checkbox");
          checkbox.value = "1";
          checkbox.id = swalClasses.checkbox;
          checkbox.checked = Boolean(params.inputValue);
          const label = checkboxContainer.querySelector("span");
          setInnerHtml(label, params.inputPlaceholder);
          return checkbox;
        };
        renderInputType.textarea = (textarea, params) => {
          checkAndSetInputValue(textarea, params.inputValue);
          setInputPlaceholder(textarea, params);
          setInputLabel(textarea, textarea, params);
          const getMargin = (el) => parseInt(window.getComputedStyle(el).marginLeft) + parseInt(window.getComputedStyle(el).marginRight);
          setTimeout(() => {
            if ("MutationObserver" in window) {
              const initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);
              const textareaResizeHandler = () => {
                const textareaWidth = textarea.offsetWidth + getMargin(textarea);
                if (textareaWidth > initialPopupWidth) {
                  getPopup().style.width = "".concat(textareaWidth, "px");
                } else {
                  getPopup().style.width = null;
                }
              };
              new MutationObserver(textareaResizeHandler).observe(textarea, {
                attributes: true,
                attributeFilter: ["style"]
              });
            }
          });
          return textarea;
        };
        const renderContent = (instance, params) => {
          const htmlContainer = getHtmlContainer();
          applyCustomClass(htmlContainer, params, "htmlContainer");
          if (params.html) {
            parseHtmlToContainer(params.html, htmlContainer);
            show(htmlContainer, "block");
          } else if (params.text) {
            htmlContainer.textContent = params.text;
            show(htmlContainer, "block");
          } else {
            hide2(htmlContainer);
          }
          renderInput(instance, params);
        };
        const renderFooter = (instance, params) => {
          const footer = getFooter();
          toggle(footer, params.footer);
          if (params.footer) {
            parseHtmlToContainer(params.footer, footer);
          }
          applyCustomClass(footer, params, "footer");
        };
        const renderIcon = (instance, params) => {
          const innerParams = privateProps.innerParams.get(instance);
          const icon = getIcon();
          if (innerParams && params.icon === innerParams.icon) {
            setContent(icon, params);
            applyStyles2(icon, params);
            return;
          }
          if (!params.icon && !params.iconHtml) {
            hide2(icon);
            return;
          }
          if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {
            error('Unknown icon! Expected "success", "error", "warning", "info" or "question", got "'.concat(params.icon, '"'));
            hide2(icon);
            return;
          }
          show(icon);
          setContent(icon, params);
          applyStyles2(icon, params);
          addClass(icon, params.showClass.icon);
        };
        const applyStyles2 = (icon, params) => {
          for (const iconType in iconTypes) {
            if (params.icon !== iconType) {
              removeClass(icon, iconTypes[iconType]);
            }
          }
          addClass(icon, iconTypes[params.icon]);
          setColor(icon, params);
          adjustSuccessIconBackgroundColor();
          applyCustomClass(icon, params, "icon");
        };
        const adjustSuccessIconBackgroundColor = () => {
          const popup = getPopup();
          const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue("background-color");
          const successIconParts = popup.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix");
          for (let i = 0; i < successIconParts.length; i++) {
            successIconParts[i].style.backgroundColor = popupBackgroundColor;
          }
        };
        const successIconHtml = '\n  <div class="swal2-success-circular-line-left"></div>\n  <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n  <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n  <div class="swal2-success-circular-line-right"></div>\n';
        const errorIconHtml = '\n  <span class="swal2-x-mark">\n    <span class="swal2-x-mark-line-left"></span>\n    <span class="swal2-x-mark-line-right"></span>\n  </span>\n';
        const setContent = (icon, params) => {
          let oldContent = icon.innerHTML;
          let newContent;
          if (params.iconHtml) {
            newContent = iconContent(params.iconHtml);
          } else if (params.icon === "success") {
            newContent = successIconHtml;
            oldContent = oldContent.replace(/ style=".*?"/g, "");
          } else if (params.icon === "error") {
            newContent = errorIconHtml;
          } else {
            const defaultIconHtml = {
              question: "?",
              warning: "!",
              info: "i"
            };
            newContent = iconContent(defaultIconHtml[params.icon]);
          }
          if (oldContent.trim() !== newContent.trim()) {
            setInnerHtml(icon, newContent);
          }
        };
        const setColor = (icon, params) => {
          if (!params.iconColor) {
            return;
          }
          icon.style.color = params.iconColor;
          icon.style.borderColor = params.iconColor;
          for (const sel of [".swal2-success-line-tip", ".swal2-success-line-long", ".swal2-x-mark-line-left", ".swal2-x-mark-line-right"]) {
            setStyle(icon, sel, "backgroundColor", params.iconColor);
          }
          setStyle(icon, ".swal2-success-ring", "borderColor", params.iconColor);
        };
        const iconContent = (content) => '<div class="'.concat(swalClasses["icon-content"], '">').concat(content, "</div>");
        const renderImage = (instance, params) => {
          const image = getImage();
          if (!params.imageUrl) {
            return hide2(image);
          }
          show(image, "");
          image.setAttribute("src", params.imageUrl);
          image.setAttribute("alt", params.imageAlt);
          applyNumericalStyle(image, "width", params.imageWidth);
          applyNumericalStyle(image, "height", params.imageHeight);
          image.className = swalClasses.image;
          applyCustomClass(image, params, "image");
        };
        const renderPopup = (instance, params) => {
          const container = getContainer();
          const popup = getPopup();
          if (params.toast) {
            applyNumericalStyle(container, "width", params.width);
            popup.style.width = "100%";
            popup.insertBefore(getLoader(), getIcon());
          } else {
            applyNumericalStyle(popup, "width", params.width);
          }
          applyNumericalStyle(popup, "padding", params.padding);
          if (params.color) {
            popup.style.color = params.color;
          }
          if (params.background) {
            popup.style.background = params.background;
          }
          hide2(getValidationMessage());
          addClasses(popup, params);
        };
        const addClasses = (popup, params) => {
          popup.className = "".concat(swalClasses.popup, " ").concat(isVisible2(popup) ? params.showClass.popup : "");
          if (params.toast) {
            addClass([document.documentElement, document.body], swalClasses["toast-shown"]);
            addClass(popup, swalClasses.toast);
          } else {
            addClass(popup, swalClasses.modal);
          }
          applyCustomClass(popup, params, "popup");
          if (typeof params.customClass === "string") {
            addClass(popup, params.customClass);
          }
          if (params.icon) {
            addClass(popup, swalClasses["icon-".concat(params.icon)]);
          }
        };
        const renderProgressSteps = (instance, params) => {
          const progressStepsContainer = getProgressSteps();
          if (!params.progressSteps || params.progressSteps.length === 0) {
            return hide2(progressStepsContainer);
          }
          show(progressStepsContainer);
          progressStepsContainer.textContent = "";
          if (params.currentProgressStep >= params.progressSteps.length) {
            warn("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)");
          }
          params.progressSteps.forEach((step, index) => {
            const stepEl = createStepElement(step);
            progressStepsContainer.appendChild(stepEl);
            if (index === params.currentProgressStep) {
              addClass(stepEl, swalClasses["active-progress-step"]);
            }
            if (index !== params.progressSteps.length - 1) {
              const lineEl = createLineElement(params);
              progressStepsContainer.appendChild(lineEl);
            }
          });
        };
        const createStepElement = (step) => {
          const stepEl = document.createElement("li");
          addClass(stepEl, swalClasses["progress-step"]);
          setInnerHtml(stepEl, step);
          return stepEl;
        };
        const createLineElement = (params) => {
          const lineEl = document.createElement("li");
          addClass(lineEl, swalClasses["progress-step-line"]);
          if (params.progressStepsDistance) {
            applyNumericalStyle(lineEl, "width", params.progressStepsDistance);
          }
          return lineEl;
        };
        const renderTitle = (instance, params) => {
          const title = getTitle();
          toggle(title, params.title || params.titleText, "block");
          if (params.title) {
            parseHtmlToContainer(params.title, title);
          }
          if (params.titleText) {
            title.innerText = params.titleText;
          }
          applyCustomClass(title, params, "title");
        };
        const render = (instance, params) => {
          renderPopup(instance, params);
          renderContainer(instance, params);
          renderProgressSteps(instance, params);
          renderIcon(instance, params);
          renderImage(instance, params);
          renderTitle(instance, params);
          renderCloseButton(instance, params);
          renderContent(instance, params);
          renderActions(instance, params);
          renderFooter(instance, params);
          if (typeof params.didRender === "function") {
            params.didRender(getPopup());
          }
        };
        function hideLoading() {
          const innerParams = privateProps.innerParams.get(this);
          if (!innerParams) {
            return;
          }
          const domCache = privateProps.domCache.get(this);
          hide2(domCache.loader);
          if (isToast()) {
            if (innerParams.icon) {
              show(getIcon());
            }
          } else {
            showRelatedButton(domCache);
          }
          removeClass([domCache.popup, domCache.actions], swalClasses.loading);
          domCache.popup.removeAttribute("aria-busy");
          domCache.popup.removeAttribute("data-loading");
          domCache.confirmButton.disabled = false;
          domCache.denyButton.disabled = false;
          domCache.cancelButton.disabled = false;
        }
        const showRelatedButton = (domCache) => {
          const buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute("data-button-to-replace"));
          if (buttonToReplace.length) {
            show(buttonToReplace[0], "inline-block");
          } else if (allButtonsAreHidden()) {
            hide2(domCache.actions);
          }
        };
        function getInput$1(instance) {
          const innerParams = privateProps.innerParams.get(instance || this);
          const domCache = privateProps.domCache.get(instance || this);
          if (!domCache) {
            return null;
          }
          return getInput(domCache.popup, innerParams.input);
        }
        const isVisible$1 = () => {
          return isVisible2(getPopup());
        };
        const clickConfirm = () => getConfirmButton() && getConfirmButton().click();
        const clickDeny = () => getDenyButton() && getDenyButton().click();
        const clickCancel = () => getCancelButton() && getCancelButton().click();
        const DismissReason = Object.freeze({
          cancel: "cancel",
          backdrop: "backdrop",
          close: "close",
          esc: "esc",
          timer: "timer"
        });
        const removeKeydownHandler = (globalState2) => {
          if (globalState2.keydownTarget && globalState2.keydownHandlerAdded) {
            globalState2.keydownTarget.removeEventListener("keydown", globalState2.keydownHandler, {
              capture: globalState2.keydownListenerCapture
            });
            globalState2.keydownHandlerAdded = false;
          }
        };
        const addKeydownHandler = (instance, globalState2, innerParams, dismissWith) => {
          removeKeydownHandler(globalState2);
          if (!innerParams.toast) {
            globalState2.keydownHandler = (e) => keydownHandler(instance, e, dismissWith);
            globalState2.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
            globalState2.keydownListenerCapture = innerParams.keydownListenerCapture;
            globalState2.keydownTarget.addEventListener("keydown", globalState2.keydownHandler, {
              capture: globalState2.keydownListenerCapture
            });
            globalState2.keydownHandlerAdded = true;
          }
        };
        const setFocus = (innerParams, index, increment) => {
          const focusableElements = getFocusableElements();
          if (focusableElements.length) {
            index = index + increment;
            if (index === focusableElements.length) {
              index = 0;
            } else if (index === -1) {
              index = focusableElements.length - 1;
            }
            return focusableElements[index].focus();
          }
          getPopup().focus();
        };
        const arrowKeysNextButton = ["ArrowRight", "ArrowDown"];
        const arrowKeysPreviousButton = ["ArrowLeft", "ArrowUp"];
        const keydownHandler = (instance, e, dismissWith) => {
          const innerParams = privateProps.innerParams.get(instance);
          if (!innerParams) {
            return;
          }
          if (e.isComposing || e.keyCode === 229) {
            return;
          }
          if (innerParams.stopKeydownPropagation) {
            e.stopPropagation();
          }
          if (e.key === "Enter") {
            handleEnter(instance, e, innerParams);
          } else if (e.key === "Tab") {
            handleTab(e, innerParams);
          } else if ([...arrowKeysNextButton, ...arrowKeysPreviousButton].includes(e.key)) {
            handleArrows(e.key);
          } else if (e.key === "Escape") {
            handleEsc(e, innerParams, dismissWith);
          }
        };
        const handleEnter = (instance, e, innerParams) => {
          if (!callIfFunction(innerParams.allowEnterKey)) {
            return;
          }
          if (e.target && instance.getInput() && e.target instanceof HTMLElement && e.target.outerHTML === instance.getInput().outerHTML) {
            if (["textarea", "file"].includes(innerParams.input)) {
              return;
            }
            clickConfirm();
            e.preventDefault();
          }
        };
        const handleTab = (e, innerParams) => {
          const targetElement = e.target;
          const focusableElements = getFocusableElements();
          let btnIndex = -1;
          for (let i = 0; i < focusableElements.length; i++) {
            if (targetElement === focusableElements[i]) {
              btnIndex = i;
              break;
            }
          }
          if (!e.shiftKey) {
            setFocus(innerParams, btnIndex, 1);
          } else {
            setFocus(innerParams, btnIndex, -1);
          }
          e.stopPropagation();
          e.preventDefault();
        };
        const handleArrows = (key) => {
          const confirmButton = getConfirmButton();
          const denyButton = getDenyButton();
          const cancelButton = getCancelButton();
          if (document.activeElement instanceof HTMLElement && ![confirmButton, denyButton, cancelButton].includes(document.activeElement)) {
            return;
          }
          const sibling = arrowKeysNextButton.includes(key) ? "nextElementSibling" : "previousElementSibling";
          let buttonToFocus = document.activeElement;
          for (let i = 0; i < getActions().children.length; i++) {
            buttonToFocus = buttonToFocus[sibling];
            if (!buttonToFocus) {
              return;
            }
            if (buttonToFocus instanceof HTMLButtonElement && isVisible2(buttonToFocus)) {
              break;
            }
          }
          if (buttonToFocus instanceof HTMLButtonElement) {
            buttonToFocus.focus();
          }
        };
        const handleEsc = (e, innerParams, dismissWith) => {
          if (callIfFunction(innerParams.allowEscapeKey)) {
            e.preventDefault();
            dismissWith(DismissReason.esc);
          }
        };
        var privateMethods = {
          swalPromiseResolve: /* @__PURE__ */ new WeakMap(),
          swalPromiseReject: /* @__PURE__ */ new WeakMap()
        };
        const setAriaHidden = () => {
          const bodyChildren = Array.from(document.body.children);
          bodyChildren.forEach((el) => {
            if (el === getContainer() || el.contains(getContainer())) {
              return;
            }
            if (el.hasAttribute("aria-hidden")) {
              el.setAttribute("data-previous-aria-hidden", el.getAttribute("aria-hidden"));
            }
            el.setAttribute("aria-hidden", "true");
          });
        };
        const unsetAriaHidden = () => {
          const bodyChildren = Array.from(document.body.children);
          bodyChildren.forEach((el) => {
            if (el.hasAttribute("data-previous-aria-hidden")) {
              el.setAttribute("aria-hidden", el.getAttribute("data-previous-aria-hidden"));
              el.removeAttribute("data-previous-aria-hidden");
            } else {
              el.removeAttribute("aria-hidden");
            }
          });
        };
        const iOSfix = () => {
          const iOS = (
            // @ts-ignore
            /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1
          );
          if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
            const offset2 = document.body.scrollTop;
            document.body.style.top = "".concat(offset2 * -1, "px");
            addClass(document.body, swalClasses.iosfix);
            lockBodyScroll();
            addBottomPaddingForTallPopups();
          }
        };
        const addBottomPaddingForTallPopups = () => {
          const ua = navigator.userAgent;
          const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
          const webkit = !!ua.match(/WebKit/i);
          const iOSSafari = iOS && webkit && !ua.match(/CriOS/i);
          if (iOSSafari) {
            const bottomPanelHeight = 44;
            if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) {
              getContainer().style.paddingBottom = "".concat(bottomPanelHeight, "px");
            }
          }
        };
        const lockBodyScroll = () => {
          const container = getContainer();
          let preventTouchMove;
          container.ontouchstart = (e) => {
            preventTouchMove = shouldPreventTouchMove(e);
          };
          container.ontouchmove = (e) => {
            if (preventTouchMove) {
              e.preventDefault();
              e.stopPropagation();
            }
          };
        };
        const shouldPreventTouchMove = (event) => {
          const target = event.target;
          const container = getContainer();
          if (isStylus(event) || isZoom(event)) {
            return false;
          }
          if (target === container) {
            return true;
          }
          if (!isScrollable(container) && target instanceof HTMLElement && target.tagName !== "INPUT" && // #1603
          target.tagName !== "TEXTAREA" && // #2266
          !(isScrollable(getHtmlContainer()) && // #1944
          getHtmlContainer().contains(target))) {
            return true;
          }
          return false;
        };
        const isStylus = (event) => {
          return event.touches && event.touches.length && event.touches[0].touchType === "stylus";
        };
        const isZoom = (event) => {
          return event.touches && event.touches.length > 1;
        };
        const undoIOSfix = () => {
          if (hasClass(document.body, swalClasses.iosfix)) {
            const offset2 = parseInt(document.body.style.top, 10);
            removeClass(document.body, swalClasses.iosfix);
            document.body.style.top = "";
            document.body.scrollTop = offset2 * -1;
          }
        };
        const fixScrollbar = () => {
          if (states.previousBodyPadding !== null) {
            return;
          }
          if (document.body.scrollHeight > window.innerHeight) {
            states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right"));
            document.body.style.paddingRight = "".concat(states.previousBodyPadding + measureScrollbar(), "px");
          }
        };
        const undoScrollbar = () => {
          if (states.previousBodyPadding !== null) {
            document.body.style.paddingRight = "".concat(states.previousBodyPadding, "px");
            states.previousBodyPadding = null;
          }
        };
        function removePopupAndResetState(instance, container, returnFocus, didClose) {
          if (isToast()) {
            triggerDidCloseAndDispose(instance, didClose);
          } else {
            restoreActiveElement(returnFocus).then(() => triggerDidCloseAndDispose(instance, didClose));
            removeKeydownHandler(globalState);
          }
          const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
          if (isSafari) {
            container.setAttribute("style", "display:none !important");
            container.removeAttribute("class");
            container.innerHTML = "";
          } else {
            container.remove();
          }
          if (isModal()) {
            undoScrollbar();
            undoIOSfix();
            unsetAriaHidden();
          }
          removeBodyClasses();
        }
        function removeBodyClasses() {
          removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses["height-auto"], swalClasses["no-backdrop"], swalClasses["toast-shown"]]);
        }
        function close(resolveValue) {
          resolveValue = prepareResolveValue(resolveValue);
          const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
          const didClose = triggerClosePopup(this);
          if (this.isAwaitingPromise()) {
            if (!resolveValue.isDismissed) {
              handleAwaitingPromise(this);
              swalPromiseResolve(resolveValue);
            }
          } else if (didClose) {
            swalPromiseResolve(resolveValue);
          }
        }
        function isAwaitingPromise() {
          return !!privateProps.awaitingPromise.get(this);
        }
        const triggerClosePopup = (instance) => {
          const popup = getPopup();
          if (!popup) {
            return false;
          }
          const innerParams = privateProps.innerParams.get(instance);
          if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {
            return false;
          }
          removeClass(popup, innerParams.showClass.popup);
          addClass(popup, innerParams.hideClass.popup);
          const backdrop = getContainer();
          removeClass(backdrop, innerParams.showClass.backdrop);
          addClass(backdrop, innerParams.hideClass.backdrop);
          handlePopupAnimation(instance, popup, innerParams);
          return true;
        };
        function rejectPromise(error2) {
          const rejectPromise2 = privateMethods.swalPromiseReject.get(this);
          handleAwaitingPromise(this);
          if (rejectPromise2) {
            rejectPromise2(error2);
          }
        }
        const handleAwaitingPromise = (instance) => {
          if (instance.isAwaitingPromise()) {
            privateProps.awaitingPromise.delete(instance);
            if (!privateProps.innerParams.get(instance)) {
              instance._destroy();
            }
          }
        };
        const prepareResolveValue = (resolveValue) => {
          if (typeof resolveValue === "undefined") {
            return {
              isConfirmed: false,
              isDenied: false,
              isDismissed: true
            };
          }
          return Object.assign({
            isConfirmed: false,
            isDenied: false,
            isDismissed: false
          }, resolveValue);
        };
        const handlePopupAnimation = (instance, popup, innerParams) => {
          const container = getContainer();
          const animationIsSupported = animationEndEvent && hasCssAnimation(popup);
          if (typeof innerParams.willClose === "function") {
            innerParams.willClose(popup);
          }
          if (animationIsSupported) {
            animatePopup(instance, popup, container, innerParams.returnFocus, innerParams.didClose);
          } else {
            removePopupAndResetState(instance, container, innerParams.returnFocus, innerParams.didClose);
          }
        };
        const animatePopup = (instance, popup, container, returnFocus, didClose) => {
          globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, returnFocus, didClose);
          popup.addEventListener(animationEndEvent, function(e) {
            if (e.target === popup) {
              globalState.swalCloseEventFinishedCallback();
              delete globalState.swalCloseEventFinishedCallback;
            }
          });
        };
        const triggerDidCloseAndDispose = (instance, didClose) => {
          setTimeout(() => {
            if (typeof didClose === "function") {
              didClose.bind(instance.params)();
            }
            instance._destroy();
          });
        };
        function setButtonsDisabled(instance, buttons, disabled) {
          const domCache = privateProps.domCache.get(instance);
          buttons.forEach((button) => {
            domCache[button].disabled = disabled;
          });
        }
        function setInputDisabled(input, disabled) {
          if (!input) {
            return;
          }
          if (input.type === "radio") {
            const radiosContainer = input.parentNode.parentNode;
            const radios = radiosContainer.querySelectorAll("input");
            for (let i = 0; i < radios.length; i++) {
              radios[i].disabled = disabled;
            }
          } else {
            input.disabled = disabled;
          }
        }
        function enableButtons() {
          setButtonsDisabled(this, ["confirmButton", "denyButton", "cancelButton"], false);
        }
        function disableButtons() {
          setButtonsDisabled(this, ["confirmButton", "denyButton", "cancelButton"], true);
        }
        function enableInput() {
          setInputDisabled(this.getInput(), false);
        }
        function disableInput() {
          setInputDisabled(this.getInput(), true);
        }
        function showValidationMessage(error2) {
          const domCache = privateProps.domCache.get(this);
          const params = privateProps.innerParams.get(this);
          setInnerHtml(domCache.validationMessage, error2);
          domCache.validationMessage.className = swalClasses["validation-message"];
          if (params.customClass && params.customClass.validationMessage) {
            addClass(domCache.validationMessage, params.customClass.validationMessage);
          }
          show(domCache.validationMessage);
          const input = this.getInput();
          if (input) {
            input.setAttribute("aria-invalid", true);
            input.setAttribute("aria-describedby", swalClasses["validation-message"]);
            focusInput(input);
            addClass(input, swalClasses.inputerror);
          }
        }
        function resetValidationMessage$1() {
          const domCache = privateProps.domCache.get(this);
          if (domCache.validationMessage) {
            hide2(domCache.validationMessage);
          }
          const input = this.getInput();
          if (input) {
            input.removeAttribute("aria-invalid");
            input.removeAttribute("aria-describedby");
            removeClass(input, swalClasses.inputerror);
          }
        }
        function getProgressSteps$1() {
          const domCache = privateProps.domCache.get(this);
          return domCache.progressSteps;
        }
        const defaultParams = {
          title: "",
          titleText: "",
          text: "",
          html: "",
          footer: "",
          icon: void 0,
          iconColor: void 0,
          iconHtml: void 0,
          template: void 0,
          toast: false,
          showClass: {
            popup: "swal2-show",
            backdrop: "swal2-backdrop-show",
            icon: "swal2-icon-show"
          },
          hideClass: {
            popup: "swal2-hide",
            backdrop: "swal2-backdrop-hide",
            icon: "swal2-icon-hide"
          },
          customClass: {},
          target: "body",
          color: void 0,
          backdrop: true,
          heightAuto: true,
          allowOutsideClick: true,
          allowEscapeKey: true,
          allowEnterKey: true,
          stopKeydownPropagation: true,
          keydownListenerCapture: false,
          showConfirmButton: true,
          showDenyButton: false,
          showCancelButton: false,
          preConfirm: void 0,
          preDeny: void 0,
          confirmButtonText: "OK",
          confirmButtonAriaLabel: "",
          confirmButtonColor: void 0,
          denyButtonText: "No",
          denyButtonAriaLabel: "",
          denyButtonColor: void 0,
          cancelButtonText: "Cancel",
          cancelButtonAriaLabel: "",
          cancelButtonColor: void 0,
          buttonsStyling: true,
          reverseButtons: false,
          focusConfirm: true,
          focusDeny: false,
          focusCancel: false,
          returnFocus: true,
          showCloseButton: false,
          closeButtonHtml: "&times;",
          closeButtonAriaLabel: "Close this dialog",
          loaderHtml: "",
          showLoaderOnConfirm: false,
          showLoaderOnDeny: false,
          imageUrl: void 0,
          imageWidth: void 0,
          imageHeight: void 0,
          imageAlt: "",
          timer: void 0,
          timerProgressBar: false,
          width: void 0,
          padding: void 0,
          background: void 0,
          input: void 0,
          inputPlaceholder: "",
          inputLabel: "",
          inputValue: "",
          inputOptions: {},
          inputAutoTrim: true,
          inputAttributes: {},
          inputValidator: void 0,
          returnInputValueOnDeny: false,
          validationMessage: void 0,
          grow: false,
          position: "center",
          progressSteps: [],
          currentProgressStep: void 0,
          progressStepsDistance: void 0,
          willOpen: void 0,
          didOpen: void 0,
          didRender: void 0,
          willClose: void 0,
          didClose: void 0,
          didDestroy: void 0,
          scrollbarPadding: true
        };
        const updatableParams = ["allowEscapeKey", "allowOutsideClick", "background", "buttonsStyling", "cancelButtonAriaLabel", "cancelButtonColor", "cancelButtonText", "closeButtonAriaLabel", "closeButtonHtml", "color", "confirmButtonAriaLabel", "confirmButtonColor", "confirmButtonText", "currentProgressStep", "customClass", "denyButtonAriaLabel", "denyButtonColor", "denyButtonText", "didClose", "didDestroy", "footer", "hideClass", "html", "icon", "iconColor", "iconHtml", "imageAlt", "imageHeight", "imageUrl", "imageWidth", "preConfirm", "preDeny", "progressSteps", "returnFocus", "reverseButtons", "showCancelButton", "showCloseButton", "showConfirmButton", "showDenyButton", "text", "title", "titleText", "willClose"];
        const deprecatedParams = {};
        const toastIncompatibleParams = ["allowOutsideClick", "allowEnterKey", "backdrop", "focusConfirm", "focusDeny", "focusCancel", "returnFocus", "heightAuto", "keydownListenerCapture"];
        const isValidParameter = (paramName) => {
          return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
        };
        const isUpdatableParameter = (paramName) => {
          return updatableParams.indexOf(paramName) !== -1;
        };
        const isDeprecatedParameter = (paramName) => {
          return deprecatedParams[paramName];
        };
        const checkIfParamIsValid = (param) => {
          if (!isValidParameter(param)) {
            warn('Unknown parameter "'.concat(param, '"'));
          }
        };
        const checkIfToastParamIsValid = (param) => {
          if (toastIncompatibleParams.includes(param)) {
            warn('The parameter "'.concat(param, '" is incompatible with toasts'));
          }
        };
        const checkIfParamIsDeprecated = (param) => {
          if (isDeprecatedParameter(param)) {
            warnAboutDeprecation(param, isDeprecatedParameter(param));
          }
        };
        const showWarningsForParams = (params) => {
          if (!params.backdrop && params.allowOutsideClick) {
            warn('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
          }
          for (const param in params) {
            checkIfParamIsValid(param);
            if (params.toast) {
              checkIfToastParamIsValid(param);
            }
            checkIfParamIsDeprecated(param);
          }
        };
        function update(params) {
          const popup = getPopup();
          const innerParams = privateProps.innerParams.get(this);
          if (!popup || hasClass(popup, innerParams.hideClass.popup)) {
            return warn("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");
          }
          const validUpdatableParams = filterValidParams(params);
          const updatedParams = Object.assign({}, innerParams, validUpdatableParams);
          render(this, updatedParams);
          privateProps.innerParams.set(this, updatedParams);
          Object.defineProperties(this, {
            params: {
              value: Object.assign({}, this.params, params),
              writable: false,
              enumerable: true
            }
          });
        }
        const filterValidParams = (params) => {
          const validUpdatableParams = {};
          Object.keys(params).forEach((param) => {
            if (isUpdatableParameter(param)) {
              validUpdatableParams[param] = params[param];
            } else {
              warn("Invalid parameter to update: ".concat(param));
            }
          });
          return validUpdatableParams;
        };
        function _destroy() {
          const domCache = privateProps.domCache.get(this);
          const innerParams = privateProps.innerParams.get(this);
          if (!innerParams) {
            disposeWeakMaps(this);
            return;
          }
          if (domCache.popup && globalState.swalCloseEventFinishedCallback) {
            globalState.swalCloseEventFinishedCallback();
            delete globalState.swalCloseEventFinishedCallback;
          }
          if (typeof innerParams.didDestroy === "function") {
            innerParams.didDestroy();
          }
          disposeSwal(this);
        }
        const disposeSwal = (instance) => {
          disposeWeakMaps(instance);
          delete instance.params;
          delete globalState.keydownHandler;
          delete globalState.keydownTarget;
          delete globalState.currentInstance;
        };
        const disposeWeakMaps = (instance) => {
          if (instance.isAwaitingPromise()) {
            unsetWeakMaps(privateProps, instance);
            privateProps.awaitingPromise.set(instance, true);
          } else {
            unsetWeakMaps(privateMethods, instance);
            unsetWeakMaps(privateProps, instance);
          }
        };
        const unsetWeakMaps = (obj, instance) => {
          for (const i in obj) {
            obj[i].delete(instance);
          }
        };
        var instanceMethods = /* @__PURE__ */ Object.freeze({
          hideLoading,
          disableLoading: hideLoading,
          getInput: getInput$1,
          close,
          isAwaitingPromise,
          rejectPromise,
          handleAwaitingPromise,
          closePopup: close,
          closeModal: close,
          closeToast: close,
          enableButtons,
          disableButtons,
          enableInput,
          disableInput,
          showValidationMessage,
          resetValidationMessage: resetValidationMessage$1,
          getProgressSteps: getProgressSteps$1,
          update,
          _destroy
        });
        const showLoading = (buttonToReplace) => {
          let popup = getPopup();
          if (!popup) {
            new Swal6();
          }
          popup = getPopup();
          const loader = getLoader();
          if (isToast()) {
            hide2(getIcon());
          } else {
            replaceButton(popup, buttonToReplace);
          }
          show(loader);
          popup.setAttribute("data-loading", "true");
          popup.setAttribute("aria-busy", "true");
          popup.focus();
        };
        const replaceButton = (popup, buttonToReplace) => {
          const actions = getActions();
          const loader = getLoader();
          if (!buttonToReplace && isVisible2(getConfirmButton())) {
            buttonToReplace = getConfirmButton();
          }
          show(actions);
          if (buttonToReplace) {
            hide2(buttonToReplace);
            loader.setAttribute("data-button-to-replace", buttonToReplace.className);
          }
          loader.parentNode.insertBefore(loader, buttonToReplace);
          addClass([popup, actions], swalClasses.loading);
        };
        const handleInputOptionsAndValue = (instance, params) => {
          if (params.input === "select" || params.input === "radio") {
            handleInputOptions(instance, params);
          } else if (["text", "email", "number", "tel", "textarea"].includes(params.input) && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {
            showLoading(getConfirmButton());
            handleInputValue(instance, params);
          }
        };
        const getInputValue = (instance, innerParams) => {
          const input = instance.getInput();
          if (!input) {
            return null;
          }
          switch (innerParams.input) {
            case "checkbox":
              return getCheckboxValue(input);
            case "radio":
              return getRadioValue(input);
            case "file":
              return getFileValue(input);
            default:
              return innerParams.inputAutoTrim ? input.value.trim() : input.value;
          }
        };
        const getCheckboxValue = (input) => input.checked ? 1 : 0;
        const getRadioValue = (input) => input.checked ? input.value : null;
        const getFileValue = (input) => input.files.length ? input.getAttribute("multiple") !== null ? input.files : input.files[0] : null;
        const handleInputOptions = (instance, params) => {
          const popup = getPopup();
          const processInputOptions = (inputOptions) => populateInputOptions[params.input](popup, formatInputOptions(inputOptions), params);
          if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {
            showLoading(getConfirmButton());
            asPromise(params.inputOptions).then((inputOptions) => {
              instance.hideLoading();
              processInputOptions(inputOptions);
            });
          } else if (typeof params.inputOptions === "object") {
            processInputOptions(params.inputOptions);
          } else {
            error("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(typeof params.inputOptions));
          }
        };
        const handleInputValue = (instance, params) => {
          const input = instance.getInput();
          hide2(input);
          asPromise(params.inputValue).then((inputValue) => {
            input.value = params.input === "number" ? parseFloat(inputValue) || 0 : "".concat(inputValue);
            show(input);
            input.focus();
            instance.hideLoading();
          }).catch((err) => {
            error("Error in inputValue promise: ".concat(err));
            input.value = "";
            show(input);
            input.focus();
            instance.hideLoading();
          });
        };
        const populateInputOptions = {
          select: (popup, inputOptions, params) => {
            const select = getDirectChildByClass(popup, swalClasses.select);
            const renderOption = (parent, optionLabel, optionValue) => {
              const option = document.createElement("option");
              option.value = optionValue;
              setInnerHtml(option, optionLabel);
              option.selected = isSelected(optionValue, params.inputValue);
              parent.appendChild(option);
            };
            inputOptions.forEach((inputOption) => {
              const optionValue = inputOption[0];
              const optionLabel = inputOption[1];
              if (Array.isArray(optionLabel)) {
                const optgroup = document.createElement("optgroup");
                optgroup.label = optionValue;
                optgroup.disabled = false;
                select.appendChild(optgroup);
                optionLabel.forEach((o) => renderOption(optgroup, o[1], o[0]));
              } else {
                renderOption(select, optionLabel, optionValue);
              }
            });
            select.focus();
          },
          radio: (popup, inputOptions, params) => {
            const radio = getDirectChildByClass(popup, swalClasses.radio);
            inputOptions.forEach((inputOption) => {
              const radioValue = inputOption[0];
              const radioLabel = inputOption[1];
              const radioInput = document.createElement("input");
              const radioLabelElement = document.createElement("label");
              radioInput.type = "radio";
              radioInput.name = swalClasses.radio;
              radioInput.value = radioValue;
              if (isSelected(radioValue, params.inputValue)) {
                radioInput.checked = true;
              }
              const label = document.createElement("span");
              setInnerHtml(label, radioLabel);
              label.className = swalClasses.label;
              radioLabelElement.appendChild(radioInput);
              radioLabelElement.appendChild(label);
              radio.appendChild(radioLabelElement);
            });
            const radios = radio.querySelectorAll("input");
            if (radios.length) {
              radios[0].focus();
            }
          }
        };
        const formatInputOptions = (inputOptions) => {
          const result = [];
          if (typeof Map !== "undefined" && inputOptions instanceof Map) {
            inputOptions.forEach((value, key) => {
              let valueFormatted = value;
              if (typeof valueFormatted === "object") {
                valueFormatted = formatInputOptions(valueFormatted);
              }
              result.push([key, valueFormatted]);
            });
          } else {
            Object.keys(inputOptions).forEach((key) => {
              let valueFormatted = inputOptions[key];
              if (typeof valueFormatted === "object") {
                valueFormatted = formatInputOptions(valueFormatted);
              }
              result.push([key, valueFormatted]);
            });
          }
          return result;
        };
        const isSelected = (optionValue, inputValue) => {
          return inputValue && inputValue.toString() === optionValue.toString();
        };
        const handleConfirmButtonClick = (instance) => {
          const innerParams = privateProps.innerParams.get(instance);
          instance.disableButtons();
          if (innerParams.input) {
            handleConfirmOrDenyWithInput(instance, "confirm");
          } else {
            confirm2(instance, true);
          }
        };
        const handleDenyButtonClick = (instance) => {
          const innerParams = privateProps.innerParams.get(instance);
          instance.disableButtons();
          if (innerParams.returnInputValueOnDeny) {
            handleConfirmOrDenyWithInput(instance, "deny");
          } else {
            deny(instance, false);
          }
        };
        const handleCancelButtonClick = (instance, dismissWith) => {
          instance.disableButtons();
          dismissWith(DismissReason.cancel);
        };
        const handleConfirmOrDenyWithInput = (instance, type) => {
          const innerParams = privateProps.innerParams.get(instance);
          if (!innerParams.input) {
            error('The "input" parameter is needed to be set when using returnInputValueOn'.concat(capitalizeFirstLetter(type)));
            return;
          }
          const inputValue = getInputValue(instance, innerParams);
          if (innerParams.inputValidator) {
            handleInputValidator(instance, inputValue, type);
          } else if (!instance.getInput().checkValidity()) {
            instance.enableButtons();
            instance.showValidationMessage(innerParams.validationMessage);
          } else if (type === "deny") {
            deny(instance, inputValue);
          } else {
            confirm2(instance, inputValue);
          }
        };
        const handleInputValidator = (instance, inputValue, type) => {
          const innerParams = privateProps.innerParams.get(instance);
          instance.disableInput();
          const validationPromise = Promise.resolve().then(() => asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage)));
          validationPromise.then((validationMessage) => {
            instance.enableButtons();
            instance.enableInput();
            if (validationMessage) {
              instance.showValidationMessage(validationMessage);
            } else if (type === "deny") {
              deny(instance, inputValue);
            } else {
              confirm2(instance, inputValue);
            }
          });
        };
        const deny = (instance, value) => {
          const innerParams = privateProps.innerParams.get(instance || void 0);
          if (innerParams.showLoaderOnDeny) {
            showLoading(getDenyButton());
          }
          if (innerParams.preDeny) {
            privateProps.awaitingPromise.set(instance || void 0, true);
            const preDenyPromise = Promise.resolve().then(() => asPromise(innerParams.preDeny(value, innerParams.validationMessage)));
            preDenyPromise.then((preDenyValue) => {
              if (preDenyValue === false) {
                instance.hideLoading();
                handleAwaitingPromise(instance);
              } else {
                instance.close({
                  isDenied: true,
                  value: typeof preDenyValue === "undefined" ? value : preDenyValue
                });
              }
            }).catch((error$$1) => rejectWith(instance || void 0, error$$1));
          } else {
            instance.close({
              isDenied: true,
              value
            });
          }
        };
        const succeedWith = (instance, value) => {
          instance.close({
            isConfirmed: true,
            value
          });
        };
        const rejectWith = (instance, error$$1) => {
          instance.rejectPromise(error$$1);
        };
        const confirm2 = (instance, value) => {
          const innerParams = privateProps.innerParams.get(instance || void 0);
          if (innerParams.showLoaderOnConfirm) {
            showLoading();
          }
          if (innerParams.preConfirm) {
            instance.resetValidationMessage();
            privateProps.awaitingPromise.set(instance || void 0, true);
            const preConfirmPromise = Promise.resolve().then(() => asPromise(innerParams.preConfirm(value, innerParams.validationMessage)));
            preConfirmPromise.then((preConfirmValue) => {
              if (isVisible2(getValidationMessage()) || preConfirmValue === false) {
                instance.hideLoading();
                handleAwaitingPromise(instance);
              } else {
                succeedWith(instance, typeof preConfirmValue === "undefined" ? value : preConfirmValue);
              }
            }).catch((error$$1) => rejectWith(instance || void 0, error$$1));
          } else {
            succeedWith(instance, value);
          }
        };
        const handlePopupClick = (instance, domCache, dismissWith) => {
          const innerParams = privateProps.innerParams.get(instance);
          if (innerParams.toast) {
            handleToastClick(instance, domCache, dismissWith);
          } else {
            handleModalMousedown(domCache);
            handleContainerMousedown(domCache);
            handleModalClick(instance, domCache, dismissWith);
          }
        };
        const handleToastClick = (instance, domCache, dismissWith) => {
          domCache.popup.onclick = () => {
            const innerParams = privateProps.innerParams.get(instance);
            if (innerParams && (isAnyButtonShown(innerParams) || innerParams.timer || innerParams.input)) {
              return;
            }
            dismissWith(DismissReason.close);
          };
        };
        const isAnyButtonShown = (innerParams) => {
          return innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton;
        };
        let ignoreOutsideClick = false;
        const handleModalMousedown = (domCache) => {
          domCache.popup.onmousedown = () => {
            domCache.container.onmouseup = function(e) {
              domCache.container.onmouseup = void 0;
              if (e.target === domCache.container) {
                ignoreOutsideClick = true;
              }
            };
          };
        };
        const handleContainerMousedown = (domCache) => {
          domCache.container.onmousedown = () => {
            domCache.popup.onmouseup = function(e) {
              domCache.popup.onmouseup = void 0;
              if (e.target === domCache.popup || domCache.popup.contains(e.target)) {
                ignoreOutsideClick = true;
              }
            };
          };
        };
        const handleModalClick = (instance, domCache, dismissWith) => {
          domCache.container.onclick = (e) => {
            const innerParams = privateProps.innerParams.get(instance);
            if (ignoreOutsideClick) {
              ignoreOutsideClick = false;
              return;
            }
            if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {
              dismissWith(DismissReason.backdrop);
            }
          };
        };
        const isJqueryElement = (elem) => typeof elem === "object" && elem.jquery;
        const isElement3 = (elem) => elem instanceof Element || isJqueryElement(elem);
        const argsToParams = (args) => {
          const params = {};
          if (typeof args[0] === "object" && !isElement3(args[0])) {
            Object.assign(params, args[0]);
          } else {
            ["title", "html", "icon"].forEach((name, index) => {
              const arg = args[index];
              if (typeof arg === "string" || isElement3(arg)) {
                params[name] = arg;
              } else if (arg !== void 0) {
                error("Unexpected type of ".concat(name, '! Expected "string" or "Element", got ').concat(typeof arg));
              }
            });
          }
          return params;
        };
        function fire() {
          const Swal7 = this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return new Swal7(...args);
        }
        function mixin(mixinParams) {
          class MixinSwal extends this {
            _main(params, priorityMixinParams) {
              return super._main(params, Object.assign({}, mixinParams, priorityMixinParams));
            }
          }
          return MixinSwal;
        }
        const getTimerLeft = () => {
          return globalState.timeout && globalState.timeout.getTimerLeft();
        };
        const stopTimer = () => {
          if (globalState.timeout) {
            stopTimerProgressBar();
            return globalState.timeout.stop();
          }
        };
        const resumeTimer = () => {
          if (globalState.timeout) {
            const remaining = globalState.timeout.start();
            animateTimerProgressBar(remaining);
            return remaining;
          }
        };
        const toggleTimer = () => {
          const timer = globalState.timeout;
          return timer && (timer.running ? stopTimer() : resumeTimer());
        };
        const increaseTimer = (n) => {
          if (globalState.timeout) {
            const remaining = globalState.timeout.increase(n);
            animateTimerProgressBar(remaining, true);
            return remaining;
          }
        };
        const isTimerRunning = () => {
          return globalState.timeout && globalState.timeout.isRunning();
        };
        let bodyClickListenerAdded = false;
        const clickHandlers = {};
        function bindClickHandler() {
          let attr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "data-swal-template";
          clickHandlers[attr] = this;
          if (!bodyClickListenerAdded) {
            document.body.addEventListener("click", bodyClickListener);
            bodyClickListenerAdded = true;
          }
        }
        const bodyClickListener = (event) => {
          for (let el = event.target; el && el !== document; el = el.parentNode) {
            for (const attr in clickHandlers) {
              const template = el.getAttribute(attr);
              if (template) {
                clickHandlers[attr].fire({
                  template
                });
                return;
              }
            }
          }
        };
        var staticMethods = /* @__PURE__ */ Object.freeze({
          isValidParameter,
          isUpdatableParameter,
          isDeprecatedParameter,
          argsToParams,
          isVisible: isVisible$1,
          clickConfirm,
          clickDeny,
          clickCancel,
          getContainer,
          getPopup,
          getTitle,
          getHtmlContainer,
          getImage,
          getIcon,
          getInputLabel,
          getCloseButton,
          getActions,
          getConfirmButton,
          getDenyButton,
          getCancelButton,
          getLoader,
          getFooter,
          getTimerProgressBar,
          getFocusableElements,
          getValidationMessage,
          isLoading,
          fire,
          mixin,
          showLoading,
          enableLoading: showLoading,
          getTimerLeft,
          stopTimer,
          resumeTimer,
          toggleTimer,
          increaseTimer,
          isTimerRunning,
          bindClickHandler
        });
        class Timer {
          /**
           * @param {Function} callback
           * @param {number} delay
           */
          constructor(callback, delay) {
            this.callback = callback;
            this.remaining = delay;
            this.running = false;
            this.start();
          }
          start() {
            if (!this.running) {
              this.running = true;
              this.started = /* @__PURE__ */ new Date();
              this.id = setTimeout(this.callback, this.remaining);
            }
            return this.remaining;
          }
          stop() {
            if (this.running) {
              this.running = false;
              clearTimeout(this.id);
              this.remaining -= (/* @__PURE__ */ new Date()).getTime() - this.started.getTime();
            }
            return this.remaining;
          }
          increase(n) {
            const running = this.running;
            if (running) {
              this.stop();
            }
            this.remaining += n;
            if (running) {
              this.start();
            }
            return this.remaining;
          }
          getTimerLeft() {
            if (this.running) {
              this.stop();
              this.start();
            }
            return this.remaining;
          }
          isRunning() {
            return this.running;
          }
        }
        const swalStringParams = ["swal-title", "swal-html", "swal-footer"];
        const getTemplateParams = (params) => {
          const template = typeof params.template === "string" ? document.querySelector(params.template) : params.template;
          if (!template) {
            return {};
          }
          const templateContent = template.content;
          showWarningsForElements(templateContent);
          const result = Object.assign(getSwalParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));
          return result;
        };
        const getSwalParams = (templateContent) => {
          const result = {};
          const swalParams = Array.from(templateContent.querySelectorAll("swal-param"));
          swalParams.forEach((param) => {
            showWarningsForAttributes(param, ["name", "value"]);
            const paramName = param.getAttribute("name");
            const value = param.getAttribute("value");
            if (typeof defaultParams[paramName] === "boolean" && value === "false") {
              result[paramName] = false;
            }
            if (typeof defaultParams[paramName] === "object") {
              result[paramName] = JSON.parse(value);
            }
          });
          return result;
        };
        const getSwalButtons = (templateContent) => {
          const result = {};
          const swalButtons = Array.from(templateContent.querySelectorAll("swal-button"));
          swalButtons.forEach((button) => {
            showWarningsForAttributes(button, ["type", "color", "aria-label"]);
            const type = button.getAttribute("type");
            result["".concat(type, "ButtonText")] = button.innerHTML;
            result["show".concat(capitalizeFirstLetter(type), "Button")] = true;
            if (button.hasAttribute("color")) {
              result["".concat(type, "ButtonColor")] = button.getAttribute("color");
            }
            if (button.hasAttribute("aria-label")) {
              result["".concat(type, "ButtonAriaLabel")] = button.getAttribute("aria-label");
            }
          });
          return result;
        };
        const getSwalImage = (templateContent) => {
          const result = {};
          const image = templateContent.querySelector("swal-image");
          if (image) {
            showWarningsForAttributes(image, ["src", "width", "height", "alt"]);
            if (image.hasAttribute("src")) {
              result.imageUrl = image.getAttribute("src");
            }
            if (image.hasAttribute("width")) {
              result.imageWidth = image.getAttribute("width");
            }
            if (image.hasAttribute("height")) {
              result.imageHeight = image.getAttribute("height");
            }
            if (image.hasAttribute("alt")) {
              result.imageAlt = image.getAttribute("alt");
            }
          }
          return result;
        };
        const getSwalIcon = (templateContent) => {
          const result = {};
          const icon = templateContent.querySelector("swal-icon");
          if (icon) {
            showWarningsForAttributes(icon, ["type", "color"]);
            if (icon.hasAttribute("type")) {
              result.icon = icon.getAttribute("type");
            }
            if (icon.hasAttribute("color")) {
              result.iconColor = icon.getAttribute("color");
            }
            result.iconHtml = icon.innerHTML;
          }
          return result;
        };
        const getSwalInput = (templateContent) => {
          const result = {};
          const input = templateContent.querySelector("swal-input");
          if (input) {
            showWarningsForAttributes(input, ["type", "label", "placeholder", "value"]);
            result.input = input.getAttribute("type") || "text";
            if (input.hasAttribute("label")) {
              result.inputLabel = input.getAttribute("label");
            }
            if (input.hasAttribute("placeholder")) {
              result.inputPlaceholder = input.getAttribute("placeholder");
            }
            if (input.hasAttribute("value")) {
              result.inputValue = input.getAttribute("value");
            }
          }
          const inputOptions = Array.from(templateContent.querySelectorAll("swal-input-option"));
          if (inputOptions.length) {
            result.inputOptions = {};
            inputOptions.forEach((option) => {
              showWarningsForAttributes(option, ["value"]);
              const optionValue = option.getAttribute("value");
              const optionName = option.innerHTML;
              result.inputOptions[optionValue] = optionName;
            });
          }
          return result;
        };
        const getSwalStringParams = (templateContent, paramNames) => {
          const result = {};
          for (const i in paramNames) {
            const paramName = paramNames[i];
            const tag = templateContent.querySelector(paramName);
            if (tag) {
              showWarningsForAttributes(tag, []);
              result[paramName.replace(/^swal-/, "")] = tag.innerHTML.trim();
            }
          }
          return result;
        };
        const showWarningsForElements = (templateContent) => {
          const allowedElements = swalStringParams.concat(["swal-param", "swal-button", "swal-image", "swal-icon", "swal-input", "swal-input-option"]);
          Array.from(templateContent.children).forEach((el) => {
            const tagName = el.tagName.toLowerCase();
            if (!allowedElements.includes(tagName)) {
              warn("Unrecognized element <".concat(tagName, ">"));
            }
          });
        };
        const showWarningsForAttributes = (el, allowedAttributes) => {
          Array.from(el.attributes).forEach((attribute) => {
            if (allowedAttributes.indexOf(attribute.name) === -1) {
              warn(['Unrecognized attribute "'.concat(attribute.name, '" on <').concat(el.tagName.toLowerCase(), ">."), "".concat(allowedAttributes.length ? "Allowed attributes are: ".concat(allowedAttributes.join(", ")) : "To set the value, use HTML within the element.")]);
            }
          });
        };
        const SHOW_CLASS_TIMEOUT = 10;
        const openPopup = (params) => {
          const container = getContainer();
          const popup = getPopup();
          if (typeof params.willOpen === "function") {
            params.willOpen(popup);
          }
          const bodyStyles = window.getComputedStyle(document.body);
          const initialBodyOverflow = bodyStyles.overflowY;
          addClasses$1(container, popup, params);
          setTimeout(() => {
            setScrollingVisibility(container, popup);
          }, SHOW_CLASS_TIMEOUT);
          if (isModal()) {
            fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);
            setAriaHidden();
          }
          if (!isToast() && !globalState.previousActiveElement) {
            globalState.previousActiveElement = document.activeElement;
          }
          if (typeof params.didOpen === "function") {
            setTimeout(() => params.didOpen(popup));
          }
          removeClass(container, swalClasses["no-transition"]);
        };
        const swalOpenAnimationFinished = (event) => {
          const popup = getPopup();
          if (event.target !== popup) {
            return;
          }
          const container = getContainer();
          popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
          container.style.overflowY = "auto";
        };
        const setScrollingVisibility = (container, popup) => {
          if (animationEndEvent && hasCssAnimation(popup)) {
            container.style.overflowY = "hidden";
            popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);
          } else {
            container.style.overflowY = "auto";
          }
        };
        const fixScrollContainer = (container, scrollbarPadding, initialBodyOverflow) => {
          iOSfix();
          if (scrollbarPadding && initialBodyOverflow !== "hidden") {
            fixScrollbar();
          }
          setTimeout(() => {
            container.scrollTop = 0;
          });
        };
        const addClasses$1 = (container, popup, params) => {
          addClass(container, params.showClass.backdrop);
          popup.style.setProperty("opacity", "0", "important");
          show(popup, "grid");
          setTimeout(() => {
            addClass(popup, params.showClass.popup);
            popup.style.removeProperty("opacity");
          }, SHOW_CLASS_TIMEOUT);
          addClass([document.documentElement, document.body], swalClasses.shown);
          if (params.heightAuto && params.backdrop && !params.toast) {
            addClass([document.documentElement, document.body], swalClasses["height-auto"]);
          }
        };
        var defaultInputValidators = {
          /**
           * @param {string} string
           * @param {string} validationMessage
           * @returns {Promise<void | string>}
           */
          email: (string, validationMessage) => {
            return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || "Invalid email address");
          },
          /**
           * @param {string} string
           * @param {string} validationMessage
           * @returns {Promise<void | string>}
           */
          url: (string, validationMessage) => {
            return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || "Invalid URL");
          }
        };
        function setDefaultInputValidators(params) {
          if (!params.inputValidator) {
            Object.keys(defaultInputValidators).forEach((key) => {
              if (params.input === key) {
                params.inputValidator = defaultInputValidators[key];
              }
            });
          }
        }
        function validateCustomTargetElement(params) {
          if (!params.target || typeof params.target === "string" && !document.querySelector(params.target) || typeof params.target !== "string" && !params.target.appendChild) {
            warn('Target parameter is not valid, defaulting to "body"');
            params.target = "body";
          }
        }
        function setParameters(params) {
          setDefaultInputValidators(params);
          if (params.showLoaderOnConfirm && !params.preConfirm) {
            warn("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request");
          }
          validateCustomTargetElement(params);
          if (typeof params.title === "string") {
            params.title = params.title.split("\n").join("<br />");
          }
          init(params);
        }
        let currentInstance;
        class SweetAlert {
          constructor() {
            if (typeof window === "undefined") {
              return;
            }
            currentInstance = this;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            const outerParams = Object.freeze(this.constructor.argsToParams(args));
            Object.defineProperties(this, {
              params: {
                value: outerParams,
                writable: false,
                enumerable: true,
                configurable: true
              }
            });
            const promise = currentInstance._main(currentInstance.params);
            privateProps.promise.set(this, promise);
          }
          _main(userParams) {
            let mixinParams = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            showWarningsForParams(Object.assign({}, mixinParams, userParams));
            if (globalState.currentInstance) {
              globalState.currentInstance._destroy();
              if (isModal()) {
                unsetAriaHidden();
              }
            }
            globalState.currentInstance = currentInstance;
            const innerParams = prepareParams(userParams, mixinParams);
            setParameters(innerParams);
            Object.freeze(innerParams);
            if (globalState.timeout) {
              globalState.timeout.stop();
              delete globalState.timeout;
            }
            clearTimeout(globalState.restoreFocusTimeout);
            const domCache = populateDomCache(currentInstance);
            render(currentInstance, innerParams);
            privateProps.innerParams.set(currentInstance, innerParams);
            return swalPromise(currentInstance, domCache, innerParams);
          }
          // `catch` cannot be the name of a module export, so we define our thenable methods here instead
          then(onFulfilled) {
            const promise = privateProps.promise.get(this);
            return promise.then(onFulfilled);
          }
          finally(onFinally) {
            const promise = privateProps.promise.get(this);
            return promise.finally(onFinally);
          }
        }
        const swalPromise = (instance, domCache, innerParams) => {
          return new Promise((resolve, reject) => {
            const dismissWith = (dismiss) => {
              instance.close({
                isDismissed: true,
                dismiss
              });
            };
            privateMethods.swalPromiseResolve.set(instance, resolve);
            privateMethods.swalPromiseReject.set(instance, reject);
            domCache.confirmButton.onclick = () => {
              handleConfirmButtonClick(instance);
            };
            domCache.denyButton.onclick = () => {
              handleDenyButtonClick(instance);
            };
            domCache.cancelButton.onclick = () => {
              handleCancelButtonClick(instance, dismissWith);
            };
            domCache.closeButton.onclick = () => {
              dismissWith(DismissReason.close);
            };
            handlePopupClick(instance, domCache, dismissWith);
            addKeydownHandler(instance, globalState, innerParams, dismissWith);
            handleInputOptionsAndValue(instance, innerParams);
            openPopup(innerParams);
            setupTimer(globalState, innerParams, dismissWith);
            initFocus(domCache, innerParams);
            setTimeout(() => {
              domCache.container.scrollTop = 0;
            });
          });
        };
        const prepareParams = (userParams, mixinParams) => {
          const templateParams = getTemplateParams(userParams);
          const params = Object.assign({}, defaultParams, mixinParams, templateParams, userParams);
          params.showClass = Object.assign({}, defaultParams.showClass, params.showClass);
          params.hideClass = Object.assign({}, defaultParams.hideClass, params.hideClass);
          return params;
        };
        const populateDomCache = (instance) => {
          const domCache = {
            popup: getPopup(),
            container: getContainer(),
            actions: getActions(),
            confirmButton: getConfirmButton(),
            denyButton: getDenyButton(),
            cancelButton: getCancelButton(),
            loader: getLoader(),
            closeButton: getCloseButton(),
            validationMessage: getValidationMessage(),
            progressSteps: getProgressSteps()
          };
          privateProps.domCache.set(instance, domCache);
          return domCache;
        };
        const setupTimer = (globalState$$1, innerParams, dismissWith) => {
          const timerProgressBar = getTimerProgressBar();
          hide2(timerProgressBar);
          if (innerParams.timer) {
            globalState$$1.timeout = new Timer(() => {
              dismissWith("timer");
              delete globalState$$1.timeout;
            }, innerParams.timer);
            if (innerParams.timerProgressBar) {
              show(timerProgressBar);
              applyCustomClass(timerProgressBar, innerParams, "timerProgressBar");
              setTimeout(() => {
                if (globalState$$1.timeout && globalState$$1.timeout.running) {
                  animateTimerProgressBar(innerParams.timer);
                }
              });
            }
          }
        };
        const initFocus = (domCache, innerParams) => {
          if (innerParams.toast) {
            return;
          }
          if (!callIfFunction(innerParams.allowEnterKey)) {
            blurActiveElement();
            return;
          }
          if (!focusButton(domCache, innerParams)) {
            setFocus(innerParams, -1, 1);
          }
        };
        const focusButton = (domCache, innerParams) => {
          if (innerParams.focusDeny && isVisible2(domCache.denyButton)) {
            domCache.denyButton.focus();
            return true;
          }
          if (innerParams.focusCancel && isVisible2(domCache.cancelButton)) {
            domCache.cancelButton.focus();
            return true;
          }
          if (innerParams.focusConfirm && isVisible2(domCache.confirmButton)) {
            domCache.confirmButton.focus();
            return true;
          }
          return false;
        };
        const blurActiveElement = () => {
          if (document.activeElement instanceof HTMLElement && typeof document.activeElement.blur === "function") {
            document.activeElement.blur();
          }
        };
        if (typeof window !== "undefined" && /^ru\b/.test(navigator.language) && location.host.match(/\.(ru|su|xn--p1ai)$/)) {
          if (Math.random() < 0.1) {
            const noWar = document.createElement("div");
            noWar.className = "leave-russia-now-and-apply-your-skills-to-the-world";
            const video = getRandomElement([{
              text: "\u0412 \u043D\u0438\u0436\u0435\u043F\u0440\u0438\u0432\u0435\u0434\u0451\u043D\u043D\u043E\u043C \u0432\u0438\u0434\u0435\u043E \u043E\u0431\u044A\u044F\u0441\u043D\u044F\u0435\u0442\u0441\u044F \u043A\u0430\u043A \u043A\u0430\u0436\u0434\u044B\u0439 \u0438\u0437 \u043D\u0430\u0441 \u043C\u043E\u0436\u0435\u0442 \u043F\u043E\u043C\u043E\u0447\u044C \u0432 \u0442\u043E\u043C,\n        <strong>\u0447\u0442\u043E\u0431\u044B \u044D\u0442\u0430 \u0431\u0435\u0441\u0441\u043C\u044B\u0441\u043B\u0435\u043D\u043D\u0430\u044F \u0438 \u0431\u0435\u0441\u0447\u0435\u043B\u043E\u0432\u0435\u0447\u043D\u0430\u044F \u0432\u043E\u0439\u043D\u0430 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u043B\u0430\u0441\u044C</strong>:",
              id: "4CfDhaRkw7I"
            }, {
              text: "\u042D\u043C\u043F\u0430\u0442\u0438\u044F - \u0433\u043B\u0430\u0432\u043D\u043E\u0435 <strong>\u0447\u0435\u043B\u043E\u0432\u0435\u0447\u0435\u0441\u043A\u043E\u0435</strong> \u0447\u0443\u0432\u0441\u0442\u0432\u043E. \u0421\u043F\u043E\u0441\u043E\u0431\u043D\u043E\u0441\u0442\u044C \u0441\u043E\u043F\u0435\u0440\u0435\u0436\u0438\u0432\u0430\u0442\u044C. <strong>\u0421\u043F\u043E\u0441\u043E\u0431\u043D\u043E\u0441\u0442\u044C \u043F\u043E\u0441\u0442\u0430\u0432\u0438\u0442\u044C \u0441\u0435\u0431\u044F \u043D\u0430 \u043C\u0435\u0441\u0442\u043E \u0434\u0440\u0443\u0433\u043E\u0433\u043E.</strong>",
              id: "s-GLAIY4DXA"
            }]);
            setInnerHtml(noWar, "\n      <div>\n        \u0415\u0441\u043B\u0438 \u043C\u044B \u043D\u0435 \u043E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u043C \u0432\u043E\u0439\u043D\u0443, \u043E\u043D\u0430 \u043F\u0440\u0438\u0434\u0435\u0442 \u0432 \u0434\u043E\u043C <strong>\u043A\u0430\u0436\u0434\u043E\u0433\u043E \u0438\u0437 \u043D\u0430\u0441</strong> \u0438 \u0435\u0451 \u043F\u043E\u0441\u043B\u0435\u0434\u0441\u0442\u0432\u0438\u044F \u0431\u0443\u0434\u0443\u0442 <strong>\u0443\u0436\u0430\u0441\u0430\u044E\u0449\u0438\u043C\u0438</strong>.\n      </div>\n      <div>\n        \u041F\u0443\u0442\u0438\u043D\u0441\u043A\u0438\u0439 \u0440\u0435\u0436\u0438\u043C \u0437\u0430 20 \u0441 \u043B\u0438\u0448\u043D\u0438\u043C \u043B\u0435\u0442 \u0441\u0432\u043E\u0435\u0433\u043E \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u0434\u043E\u043B\u0431\u0438\u043B \u043D\u0430\u043C, \u0447\u0442\u043E \u043C\u044B \u0431\u0435\u0441\u0441\u0438\u043B\u044C\u043D\u044B \u0438 \u043E\u0434\u0438\u043D \u0447\u0435\u043B\u043E\u0432\u0435\u043A \u043D\u0435 \u043C\u043E\u0436\u0435\u0442 \u043D\u0438\u0447\u0435\u0433\u043E \u0441\u0434\u0435\u043B\u0430\u0442\u044C. <strong>\u042D\u0442\u043E \u043D\u0435 \u0442\u0430\u043A!</strong>\n      </div>\n      <div>\n        ".concat(video.text, '\n      </div>\n      <iframe width="560" height="315" src="https://www.youtube.com/embed/').concat(video.id, '" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n      <div>\n        \u041D\u0435\u0442 \u0432\u043E\u0439\u043D\u0435!\n      </div>\n      '));
            const closeButton = document.createElement("button");
            closeButton.innerHTML = "&times;";
            closeButton.onclick = () => noWar.remove();
            noWar.appendChild(closeButton);
            window.addEventListener("load", () => {
              setTimeout(() => {
                document.body.appendChild(noWar);
              }, 1e3);
            });
          }
        }
        Object.assign(SweetAlert.prototype, instanceMethods);
        Object.assign(SweetAlert, staticMethods);
        Object.keys(instanceMethods).forEach((key) => {
          SweetAlert[key] = function() {
            if (currentInstance) {
              return currentInstance[key](...arguments);
            }
          };
        });
        SweetAlert.DismissReason = DismissReason;
        SweetAlert.version = "11.4.33";
        const Swal6 = SweetAlert;
        Swal6.default = Swal6;
        return Swal6;
      });
      if (typeof exports !== "undefined" && exports.Sweetalert2) {
        exports.swal = exports.sweetAlert = exports.Swal = exports.SweetAlert = exports.Sweetalert2;
      }
      "undefined" != typeof document && function(e, t) {
        var n = e.createElement("style");
        if (e.getElementsByTagName("head")[0].appendChild(n), n.styleSheet)
          n.styleSheet.disabled || (n.styleSheet.cssText = t);
        else
          try {
            n.innerHTML = t;
          } catch (e2) {
            n.innerText = t;
          }
      }(document, '.swal2-popup.swal2-toast{box-sizing:border-box;grid-column:1/4!important;grid-row:1/4!important;grid-template-columns:1fr 99fr 1fr;padding:1em;overflow-y:hidden;background:#fff;box-shadow:0 0 1px hsla(0deg,0%,0%,.075),0 1px 2px hsla(0deg,0%,0%,.075),1px 2px 4px hsla(0deg,0%,0%,.075),1px 3px 8px hsla(0deg,0%,0%,.075),2px 4px 16px hsla(0deg,0%,0%,.075);pointer-events:all}.swal2-popup.swal2-toast>*{grid-column:2}.swal2-popup.swal2-toast .swal2-title{margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-loading{justify-content:center}.swal2-popup.swal2-toast .swal2-input{height:2em;margin:.5em;font-size:1em}.swal2-popup.swal2-toast .swal2-validation-message{font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-popup.swal2-toast .swal2-html-container{margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-popup.swal2-toast .swal2-html-container:empty{padding:0}.swal2-popup.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-popup.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:700}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-popup.swal2-toast .swal2-styled{margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-container{display:grid;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;box-sizing:border-box;grid-template-areas:"top-start     top            top-end" "center-start  center         center-end" "bottom-start  bottom-center  bottom-end";grid-template-rows:minmax(-webkit-min-content,auto) minmax(-webkit-min-content,auto) minmax(-webkit-min-content,auto);grid-template-rows:minmax(min-content,auto) minmax(min-content,auto) minmax(min-content,auto);height:100%;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:0 0!important}.swal2-container.swal2-bottom-start,.swal2-container.swal2-center-start,.swal2-container.swal2-top-start{grid-template-columns:minmax(0,1fr) auto auto}.swal2-container.swal2-bottom,.swal2-container.swal2-center,.swal2-container.swal2-top{grid-template-columns:auto minmax(0,1fr) auto}.swal2-container.swal2-bottom-end,.swal2-container.swal2-center-end,.swal2-container.swal2-top-end{grid-template-columns:auto auto minmax(0,1fr)}.swal2-container.swal2-top-start>.swal2-popup{align-self:start}.swal2-container.swal2-top>.swal2-popup{grid-column:2;align-self:start;justify-self:center}.swal2-container.swal2-top-end>.swal2-popup,.swal2-container.swal2-top-right>.swal2-popup{grid-column:3;align-self:start;justify-self:end}.swal2-container.swal2-center-left>.swal2-popup,.swal2-container.swal2-center-start>.swal2-popup{grid-row:2;align-self:center}.swal2-container.swal2-center>.swal2-popup{grid-column:2;grid-row:2;align-self:center;justify-self:center}.swal2-container.swal2-center-end>.swal2-popup,.swal2-container.swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;align-self:center;justify-self:end}.swal2-container.swal2-bottom-left>.swal2-popup,.swal2-container.swal2-bottom-start>.swal2-popup{grid-column:1;grid-row:3;align-self:end}.swal2-container.swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;justify-self:center;align-self:end}.swal2-container.swal2-bottom-end>.swal2-popup,.swal2-container.swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;align-self:end;justify-self:end}.swal2-container.swal2-grow-fullscreen>.swal2-popup,.swal2-container.swal2-grow-row>.swal2-popup{grid-column:1/4;width:100%}.swal2-container.swal2-grow-column>.swal2-popup,.swal2-container.swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}.swal2-container.swal2-no-transition{transition:none!important}.swal2-popup{display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0,100%);width:32em;max-width:100%;padding:0 0 1.25em;border:none;border-radius:5px;background:#fff;color:#545454;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-title{position:relative;max-width:100%;margin:0;padding:.8em 1em 0;color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:auto;margin:1.25em auto 0;padding:0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 transparent #2778c4 transparent}.swal2-styled{margin:.3125em;padding:.625em 1.1em;transition:box-shadow .1s;box-shadow:0 0 0 3px transparent;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#7066e0;color:#fff;font-size:1em}.swal2-styled.swal2-confirm:focus{box-shadow:0 0 0 3px rgba(112,102,224,.5)}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dc3741;color:#fff;font-size:1em}.swal2-styled.swal2-deny:focus{box-shadow:0 0 0 3px rgba(220,55,65,.5)}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#6e7881;color:#fff;font-size:1em}.swal2-styled.swal2-cancel:focus{box-shadow:0 0 0 3px rgba(110,120,129,.5)}.swal2-styled.swal2-default-outline:focus{box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-styled:focus{outline:0}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1em 0 0;padding:1em 1em 0;border-top:1px solid #eee;color:inherit;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto!important;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:2em auto 1em}.swal2-close{z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:color .1s,box-shadow .1s;border:none;border-radius:5px;background:0 0;color:#ccc;font-family:serif;font-family:monospace;font-size:2.5em;cursor:pointer;justify-self:end}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-close:focus{outline:0;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}.swal2-close::-moz-focus-inner{border:0}.swal2-html-container{z-index:1;justify-content:center;margin:1em 1.6em .3em;padding:0;overflow:auto;color:inherit;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em 2em 3px}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:auto;transition:border-color .1s,box-shadow .1s;border:1px solid #d9d9d9;border-radius:.1875em;background:0 0;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px transparent;color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:inset 0 1px 1px rgba(0,0,0,.06),0 0 0 3px rgba(100,150,200,.5)}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em 2em 3px;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-file{width:75%;margin-right:auto;margin-left:auto;background:0 0;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:0 0;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{flex-shrink:0;margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto 0}.swal2-validation-message{align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;border:.25em solid transparent;border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-warning.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-warning.swal2-icon-show .swal2-icon-content{-webkit-animation:swal2-animate-i-mark .5s;animation:swal2-animate-i-mark .5s}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-info.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-info.swal2-icon-show .swal2-icon-content{-webkit-animation:swal2-animate-i-mark .8s;animation:swal2-animate-i-mark .8s}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-question.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-question.swal2-icon-show .swal2-icon-content{-webkit-animation:swal2-animate-question-mark .8s;animation:swal2-animate-question-mark .8s}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:0 0;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}.leave-russia-now-and-apply-your-skills-to-the-world{display:flex;position:fixed;z-index:1939;top:0;right:0;bottom:0;left:0;flex-direction:column;align-items:center;justify-content:center;padding:25px 0 20px;background:#20232a;color:#fff;text-align:center}.leave-russia-now-and-apply-your-skills-to-the-world div{max-width:560px;margin:10px;line-height:146%}.leave-russia-now-and-apply-your-skills-to-the-world iframe{max-width:100%;max-height:55.5555555556vmin;margin:16px auto}.leave-russia-now-and-apply-your-skills-to-the-world strong{border-bottom:2px dashed #fff}.leave-russia-now-and-apply-your-skills-to-the-world button{display:flex;position:fixed;z-index:1940;top:0;right:0;align-items:center;justify-content:center;width:48px;height:48px;margin-right:10px;margin-bottom:-10px;border:none;background:0 0;color:#aaa;font-size:48px;font-weight:700;cursor:pointer}.leave-russia-now-and-apply-your-skills-to-the-world button:hover{color:#fff}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@-webkit-keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@-webkit-keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-container{background-color:transparent!important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:transparent;pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}');
    }
  });

  // node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js
  var require_rails_ujs = __commonJS({
    "node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js"(exports, module) {
      (function() {
        var context = this;
        (function() {
          (function() {
            this.Rails = {
              linkClickSelector: "a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]",
              buttonClickSelector: {
                selector: "button[data-remote]:not([form]), button[data-confirm]:not([form])",
                exclude: "form button"
              },
              inputChangeSelector: "select[data-remote], input[data-remote], textarea[data-remote]",
              formSubmitSelector: "form:not([data-turbo=true])",
              formInputClickSelector: "form:not([data-turbo=true]) input[type=submit], form:not([data-turbo=true]) input[type=image], form:not([data-turbo=true]) button[type=submit], form:not([data-turbo=true]) button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])",
              formDisableSelector: "input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled",
              formEnableSelector: "input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled",
              fileInputSelector: "input[name][type=file]:not([disabled])",
              linkDisableSelector: "a[data-disable-with], a[data-disable]",
              buttonDisableSelector: "button[data-remote][data-disable-with], button[data-remote][data-disable]"
            };
          }).call(this);
        }).call(context);
        var Rails2 = context.Rails;
        (function() {
          (function() {
            var nonce;
            nonce = null;
            Rails2.loadCSPNonce = function() {
              var ref;
              return nonce = (ref = document.querySelector("meta[name=csp-nonce]")) != null ? ref.content : void 0;
            };
            Rails2.cspNonce = function() {
              return nonce != null ? nonce : Rails2.loadCSPNonce();
            };
          }).call(this);
          (function() {
            var expando, m;
            m = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;
            Rails2.matches = function(element, selector) {
              if (selector.exclude != null) {
                return m.call(element, selector.selector) && !m.call(element, selector.exclude);
              } else {
                return m.call(element, selector);
              }
            };
            expando = "_ujsData";
            Rails2.getData = function(element, key) {
              var ref;
              return (ref = element[expando]) != null ? ref[key] : void 0;
            };
            Rails2.setData = function(element, key, value) {
              if (element[expando] == null) {
                element[expando] = {};
              }
              return element[expando][key] = value;
            };
            Rails2.$ = function(selector) {
              return Array.prototype.slice.call(document.querySelectorAll(selector));
            };
          }).call(this);
          (function() {
            var $2, csrfParam, csrfToken;
            $2 = Rails2.$;
            csrfToken = Rails2.csrfToken = function() {
              var meta;
              meta = document.querySelector("meta[name=csrf-token]");
              return meta && meta.content;
            };
            csrfParam = Rails2.csrfParam = function() {
              var meta;
              meta = document.querySelector("meta[name=csrf-param]");
              return meta && meta.content;
            };
            Rails2.CSRFProtection = function(xhr) {
              var token;
              token = csrfToken();
              if (token != null) {
                return xhr.setRequestHeader("X-CSRF-Token", token);
              }
            };
            Rails2.refreshCSRFTokens = function() {
              var param, token;
              token = csrfToken();
              param = csrfParam();
              if (token != null && param != null) {
                return $2('form input[name="' + param + '"]').forEach(function(input) {
                  return input.value = token;
                });
              }
            };
          }).call(this);
          (function() {
            var CustomEvent, fire, matches, preventDefault;
            matches = Rails2.matches;
            CustomEvent = window.CustomEvent;
            if (typeof CustomEvent !== "function") {
              CustomEvent = function(event, params) {
                var evt;
                evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
                return evt;
              };
              CustomEvent.prototype = window.Event.prototype;
              preventDefault = CustomEvent.prototype.preventDefault;
              CustomEvent.prototype.preventDefault = function() {
                var result;
                result = preventDefault.call(this);
                if (this.cancelable && !this.defaultPrevented) {
                  Object.defineProperty(this, "defaultPrevented", {
                    get: function() {
                      return true;
                    }
                  });
                }
                return result;
              };
            }
            fire = Rails2.fire = function(obj, name, data) {
              var event;
              event = new CustomEvent(name, {
                bubbles: true,
                cancelable: true,
                detail: data
              });
              obj.dispatchEvent(event);
              return !event.defaultPrevented;
            };
            Rails2.stopEverything = function(e) {
              fire(e.target, "ujs:everythingStopped");
              e.preventDefault();
              e.stopPropagation();
              return e.stopImmediatePropagation();
            };
            Rails2.delegate = function(element, selector, eventType, handler) {
              return element.addEventListener(eventType, function(e) {
                var target;
                target = e.target;
                while (!(!(target instanceof Element) || matches(target, selector))) {
                  target = target.parentNode;
                }
                if (target instanceof Element && handler.call(target, e) === false) {
                  e.preventDefault();
                  return e.stopPropagation();
                }
              });
            };
          }).call(this);
          (function() {
            var AcceptHeaders, CSRFProtection, createXHR, cspNonce, fire, prepareOptions, processResponse;
            cspNonce = Rails2.cspNonce, CSRFProtection = Rails2.CSRFProtection, fire = Rails2.fire;
            AcceptHeaders = {
              "*": "*/*",
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript",
              script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
            };
            Rails2.ajax = function(options) {
              var xhr;
              options = prepareOptions(options);
              xhr = createXHR(options, function() {
                var ref, response;
                response = processResponse((ref = xhr.response) != null ? ref : xhr.responseText, xhr.getResponseHeader("Content-Type"));
                if (Math.floor(xhr.status / 100) === 2) {
                  if (typeof options.success === "function") {
                    options.success(response, xhr.statusText, xhr);
                  }
                } else {
                  if (typeof options.error === "function") {
                    options.error(response, xhr.statusText, xhr);
                  }
                }
                return typeof options.complete === "function" ? options.complete(xhr, xhr.statusText) : void 0;
              });
              if (options.beforeSend != null && !options.beforeSend(xhr, options)) {
                return false;
              }
              if (xhr.readyState === XMLHttpRequest.OPENED) {
                return xhr.send(options.data);
              }
            };
            prepareOptions = function(options) {
              options.url = options.url || location.href;
              options.type = options.type.toUpperCase();
              if (options.type === "GET" && options.data) {
                if (options.url.indexOf("?") < 0) {
                  options.url += "?" + options.data;
                } else {
                  options.url += "&" + options.data;
                }
              }
              if (AcceptHeaders[options.dataType] == null) {
                options.dataType = "*";
              }
              options.accept = AcceptHeaders[options.dataType];
              if (options.dataType !== "*") {
                options.accept += ", */*; q=0.01";
              }
              return options;
            };
            createXHR = function(options, done) {
              var xhr;
              xhr = new XMLHttpRequest();
              xhr.open(options.type, options.url, true);
              xhr.setRequestHeader("Accept", options.accept);
              if (typeof options.data === "string") {
                xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
              }
              if (!options.crossDomain) {
                xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                CSRFProtection(xhr);
              }
              xhr.withCredentials = !!options.withCredentials;
              xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                  return done(xhr);
                }
              };
              return xhr;
            };
            processResponse = function(response, type) {
              var parser, script;
              if (typeof response === "string" && typeof type === "string") {
                if (type.match(/\bjson\b/)) {
                  try {
                    response = JSON.parse(response);
                  } catch (error) {
                  }
                } else if (type.match(/\b(?:java|ecma)script\b/)) {
                  script = document.createElement("script");
                  script.setAttribute("nonce", cspNonce());
                  script.text = response;
                  document.head.appendChild(script).parentNode.removeChild(script);
                } else if (type.match(/\b(xml|html|svg)\b/)) {
                  parser = new DOMParser();
                  type = type.replace(/;.+/, "");
                  try {
                    response = parser.parseFromString(response, type);
                  } catch (error) {
                  }
                }
              }
              return response;
            };
            Rails2.href = function(element) {
              return element.href;
            };
            Rails2.isCrossDomain = function(url) {
              var e, originAnchor, urlAnchor;
              originAnchor = document.createElement("a");
              originAnchor.href = location.href;
              urlAnchor = document.createElement("a");
              try {
                urlAnchor.href = url;
                return !((!urlAnchor.protocol || urlAnchor.protocol === ":") && !urlAnchor.host || originAnchor.protocol + "//" + originAnchor.host === urlAnchor.protocol + "//" + urlAnchor.host);
              } catch (error) {
                e = error;
                return true;
              }
            };
          }).call(this);
          (function() {
            var matches, toArray;
            matches = Rails2.matches;
            toArray = function(e) {
              return Array.prototype.slice.call(e);
            };
            Rails2.serializeElement = function(element, additionalParam) {
              var inputs, params;
              inputs = [element];
              if (matches(element, "form")) {
                inputs = toArray(element.elements);
              }
              params = [];
              inputs.forEach(function(input) {
                if (!input.name || input.disabled) {
                  return;
                }
                if (matches(input, "fieldset[disabled] *")) {
                  return;
                }
                if (matches(input, "select")) {
                  return toArray(input.options).forEach(function(option) {
                    if (option.selected) {
                      return params.push({
                        name: input.name,
                        value: option.value
                      });
                    }
                  });
                } else if (input.checked || ["radio", "checkbox", "submit"].indexOf(input.type) === -1) {
                  return params.push({
                    name: input.name,
                    value: input.value
                  });
                }
              });
              if (additionalParam) {
                params.push(additionalParam);
              }
              return params.map(function(param) {
                if (param.name != null) {
                  return encodeURIComponent(param.name) + "=" + encodeURIComponent(param.value);
                } else {
                  return param;
                }
              }).join("&");
            };
            Rails2.formElements = function(form, selector) {
              if (matches(form, "form")) {
                return toArray(form.elements).filter(function(el) {
                  return matches(el, selector);
                });
              } else {
                return toArray(form.querySelectorAll(selector));
              }
            };
          }).call(this);
          (function() {
            var allowAction2, fire, stopEverything;
            fire = Rails2.fire, stopEverything = Rails2.stopEverything;
            Rails2.handleConfirm = function(e) {
              if (!allowAction2(this)) {
                return stopEverything(e);
              }
            };
            Rails2.confirm = function(message, element) {
              return confirm(message);
            };
            allowAction2 = function(element) {
              var answer, callback, message;
              message = element.getAttribute("data-confirm");
              if (!message) {
                return true;
              }
              answer = false;
              if (fire(element, "confirm")) {
                try {
                  answer = Rails2.confirm(message, element);
                } catch (error) {
                }
                callback = fire(element, "confirm:complete", [answer]);
              }
              return answer && callback;
            };
          }).call(this);
          (function() {
            var disableFormElement, disableFormElements, disableLinkElement, enableFormElement, enableFormElements, enableLinkElement, formElements, getData, isXhrRedirect, matches, setData, stopEverything;
            matches = Rails2.matches, getData = Rails2.getData, setData = Rails2.setData, stopEverything = Rails2.stopEverything, formElements = Rails2.formElements;
            Rails2.handleDisabledElement = function(e) {
              var element;
              element = this;
              if (element.disabled) {
                return stopEverything(e);
              }
            };
            Rails2.enableElement = function(e) {
              var element;
              if (e instanceof Event) {
                if (isXhrRedirect(e)) {
                  return;
                }
                element = e.target;
              } else {
                element = e;
              }
              if (matches(element, Rails2.linkDisableSelector)) {
                return enableLinkElement(element);
              } else if (matches(element, Rails2.buttonDisableSelector) || matches(element, Rails2.formEnableSelector)) {
                return enableFormElement(element);
              } else if (matches(element, Rails2.formSubmitSelector)) {
                return enableFormElements(element);
              }
            };
            Rails2.disableElement = function(e) {
              var element;
              element = e instanceof Event ? e.target : e;
              if (matches(element, Rails2.linkDisableSelector)) {
                return disableLinkElement(element);
              } else if (matches(element, Rails2.buttonDisableSelector) || matches(element, Rails2.formDisableSelector)) {
                return disableFormElement(element);
              } else if (matches(element, Rails2.formSubmitSelector)) {
                return disableFormElements(element);
              }
            };
            disableLinkElement = function(element) {
              var replacement;
              if (getData(element, "ujs:disabled")) {
                return;
              }
              replacement = element.getAttribute("data-disable-with");
              if (replacement != null) {
                setData(element, "ujs:enable-with", element.innerHTML);
                element.innerHTML = replacement;
              }
              element.addEventListener("click", stopEverything);
              return setData(element, "ujs:disabled", true);
            };
            enableLinkElement = function(element) {
              var originalText;
              originalText = getData(element, "ujs:enable-with");
              if (originalText != null) {
                element.innerHTML = originalText;
                setData(element, "ujs:enable-with", null);
              }
              element.removeEventListener("click", stopEverything);
              return setData(element, "ujs:disabled", null);
            };
            disableFormElements = function(form) {
              return formElements(form, Rails2.formDisableSelector).forEach(disableFormElement);
            };
            disableFormElement = function(element) {
              var replacement;
              if (getData(element, "ujs:disabled")) {
                return;
              }
              replacement = element.getAttribute("data-disable-with");
              if (replacement != null) {
                if (matches(element, "button")) {
                  setData(element, "ujs:enable-with", element.innerHTML);
                  element.innerHTML = replacement;
                } else {
                  setData(element, "ujs:enable-with", element.value);
                  element.value = replacement;
                }
              }
              element.disabled = true;
              return setData(element, "ujs:disabled", true);
            };
            enableFormElements = function(form) {
              return formElements(form, Rails2.formEnableSelector).forEach(enableFormElement);
            };
            enableFormElement = function(element) {
              var originalText;
              originalText = getData(element, "ujs:enable-with");
              if (originalText != null) {
                if (matches(element, "button")) {
                  element.innerHTML = originalText;
                } else {
                  element.value = originalText;
                }
                setData(element, "ujs:enable-with", null);
              }
              element.disabled = false;
              return setData(element, "ujs:disabled", null);
            };
            isXhrRedirect = function(event) {
              var ref, xhr;
              xhr = (ref = event.detail) != null ? ref[0] : void 0;
              return (xhr != null ? xhr.getResponseHeader("X-Xhr-Redirect") : void 0) != null;
            };
          }).call(this);
          (function() {
            var stopEverything;
            stopEverything = Rails2.stopEverything;
            Rails2.handleMethod = function(e) {
              var csrfParam, csrfToken, form, formContent, href, link, method;
              link = this;
              method = link.getAttribute("data-method");
              if (!method) {
                return;
              }
              href = Rails2.href(link);
              csrfToken = Rails2.csrfToken();
              csrfParam = Rails2.csrfParam();
              form = document.createElement("form");
              formContent = "<input name='_method' value='" + method + "' type='hidden' />";
              if (csrfParam != null && csrfToken != null && !Rails2.isCrossDomain(href)) {
                formContent += "<input name='" + csrfParam + "' value='" + csrfToken + "' type='hidden' />";
              }
              formContent += '<input type="submit" />';
              form.method = "post";
              form.action = href;
              form.target = link.target;
              form.innerHTML = formContent;
              form.style.display = "none";
              document.body.appendChild(form);
              form.querySelector('[type="submit"]').click();
              return stopEverything(e);
            };
          }).call(this);
          (function() {
            var ajax, fire, getData, isCrossDomain, isRemote, matches, serializeElement, setData, stopEverything, slice = [].slice;
            matches = Rails2.matches, getData = Rails2.getData, setData = Rails2.setData, fire = Rails2.fire, stopEverything = Rails2.stopEverything, ajax = Rails2.ajax, isCrossDomain = Rails2.isCrossDomain, serializeElement = Rails2.serializeElement;
            isRemote = function(element) {
              var value;
              value = element.getAttribute("data-remote");
              return value != null && value !== "false";
            };
            Rails2.handleRemote = function(e) {
              var button, data, dataType, element, method, url, withCredentials;
              element = this;
              if (!isRemote(element)) {
                return true;
              }
              if (!fire(element, "ajax:before")) {
                fire(element, "ajax:stopped");
                return false;
              }
              withCredentials = element.getAttribute("data-with-credentials");
              dataType = element.getAttribute("data-type") || "script";
              if (matches(element, Rails2.formSubmitSelector)) {
                button = getData(element, "ujs:submit-button");
                method = getData(element, "ujs:submit-button-formmethod") || element.method;
                url = getData(element, "ujs:submit-button-formaction") || element.getAttribute("action") || location.href;
                if (method.toUpperCase() === "GET") {
                  url = url.replace(/\?.*$/, "");
                }
                if (element.enctype === "multipart/form-data") {
                  data = new FormData(element);
                  if (button != null) {
                    data.append(button.name, button.value);
                  }
                } else {
                  data = serializeElement(element, button);
                }
                setData(element, "ujs:submit-button", null);
                setData(element, "ujs:submit-button-formmethod", null);
                setData(element, "ujs:submit-button-formaction", null);
              } else if (matches(element, Rails2.buttonClickSelector) || matches(element, Rails2.inputChangeSelector)) {
                method = element.getAttribute("data-method");
                url = element.getAttribute("data-url");
                data = serializeElement(element, element.getAttribute("data-params"));
              } else {
                method = element.getAttribute("data-method");
                url = Rails2.href(element);
                data = element.getAttribute("data-params");
              }
              ajax({
                type: method || "GET",
                url,
                data,
                dataType,
                beforeSend: function(xhr, options) {
                  if (fire(element, "ajax:beforeSend", [xhr, options])) {
                    return fire(element, "ajax:send", [xhr]);
                  } else {
                    fire(element, "ajax:stopped");
                    return false;
                  }
                },
                success: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:success", args);
                },
                error: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:error", args);
                },
                complete: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:complete", args);
                },
                crossDomain: isCrossDomain(url),
                withCredentials: withCredentials != null && withCredentials !== "false"
              });
              return stopEverything(e);
            };
            Rails2.formSubmitButtonClick = function(e) {
              var button, form;
              button = this;
              form = button.form;
              if (!form) {
                return;
              }
              if (button.name) {
                setData(form, "ujs:submit-button", {
                  name: button.name,
                  value: button.value
                });
              }
              setData(form, "ujs:formnovalidate-button", button.formNoValidate);
              setData(form, "ujs:submit-button-formaction", button.getAttribute("formaction"));
              return setData(form, "ujs:submit-button-formmethod", button.getAttribute("formmethod"));
            };
            Rails2.preventInsignificantClick = function(e) {
              var data, insignificantMetaClick, link, metaClick, method, nonPrimaryMouseClick;
              link = this;
              method = (link.getAttribute("data-method") || "GET").toUpperCase();
              data = link.getAttribute("data-params");
              metaClick = e.metaKey || e.ctrlKey;
              insignificantMetaClick = metaClick && method === "GET" && !data;
              nonPrimaryMouseClick = e.button != null && e.button !== 0;
              if (nonPrimaryMouseClick || insignificantMetaClick) {
                return e.stopImmediatePropagation();
              }
            };
          }).call(this);
          (function() {
            var $2, CSRFProtection, delegate, disableElement, enableElement, fire, formSubmitButtonClick, getData, handleConfirm2, handleDisabledElement, handleMethod, handleRemote, loadCSPNonce, preventInsignificantClick, refreshCSRFTokens;
            fire = Rails2.fire, delegate = Rails2.delegate, getData = Rails2.getData, $2 = Rails2.$, refreshCSRFTokens = Rails2.refreshCSRFTokens, CSRFProtection = Rails2.CSRFProtection, loadCSPNonce = Rails2.loadCSPNonce, enableElement = Rails2.enableElement, disableElement = Rails2.disableElement, handleDisabledElement = Rails2.handleDisabledElement, handleConfirm2 = Rails2.handleConfirm, preventInsignificantClick = Rails2.preventInsignificantClick, handleRemote = Rails2.handleRemote, formSubmitButtonClick = Rails2.formSubmitButtonClick, handleMethod = Rails2.handleMethod;
            if (typeof jQuery !== "undefined" && jQuery !== null && jQuery.ajax != null) {
              if (jQuery.rails) {
                throw new Error("If you load both jquery_ujs and rails-ujs, use rails-ujs only.");
              }
              jQuery.rails = Rails2;
              jQuery.ajaxPrefilter(function(options, originalOptions, xhr) {
                if (!options.crossDomain) {
                  return CSRFProtection(xhr);
                }
              });
            }
            Rails2.start = function() {
              if (window._rails_loaded) {
                throw new Error("rails-ujs has already been loaded!");
              }
              window.addEventListener("pageshow", function() {
                $2(Rails2.formEnableSelector).forEach(function(el) {
                  if (getData(el, "ujs:disabled")) {
                    return enableElement(el);
                  }
                });
                return $2(Rails2.linkDisableSelector).forEach(function(el) {
                  if (getData(el, "ujs:disabled")) {
                    return enableElement(el);
                  }
                });
              });
              delegate(document, Rails2.linkDisableSelector, "ajax:complete", enableElement);
              delegate(document, Rails2.linkDisableSelector, "ajax:stopped", enableElement);
              delegate(document, Rails2.buttonDisableSelector, "ajax:complete", enableElement);
              delegate(document, Rails2.buttonDisableSelector, "ajax:stopped", enableElement);
              delegate(document, Rails2.linkClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails2.linkClickSelector, "click", handleDisabledElement);
              delegate(document, Rails2.linkClickSelector, "click", handleConfirm2);
              delegate(document, Rails2.linkClickSelector, "click", disableElement);
              delegate(document, Rails2.linkClickSelector, "click", handleRemote);
              delegate(document, Rails2.linkClickSelector, "click", handleMethod);
              delegate(document, Rails2.buttonClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails2.buttonClickSelector, "click", handleDisabledElement);
              delegate(document, Rails2.buttonClickSelector, "click", handleConfirm2);
              delegate(document, Rails2.buttonClickSelector, "click", disableElement);
              delegate(document, Rails2.buttonClickSelector, "click", handleRemote);
              delegate(document, Rails2.inputChangeSelector, "change", handleDisabledElement);
              delegate(document, Rails2.inputChangeSelector, "change", handleConfirm2);
              delegate(document, Rails2.inputChangeSelector, "change", handleRemote);
              delegate(document, Rails2.formSubmitSelector, "submit", handleDisabledElement);
              delegate(document, Rails2.formSubmitSelector, "submit", handleConfirm2);
              delegate(document, Rails2.formSubmitSelector, "submit", handleRemote);
              delegate(document, Rails2.formSubmitSelector, "submit", function(e) {
                return setTimeout(function() {
                  return disableElement(e);
                }, 13);
              });
              delegate(document, Rails2.formSubmitSelector, "ajax:send", disableElement);
              delegate(document, Rails2.formSubmitSelector, "ajax:complete", enableElement);
              delegate(document, Rails2.formInputClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails2.formInputClickSelector, "click", handleDisabledElement);
              delegate(document, Rails2.formInputClickSelector, "click", handleConfirm2);
              delegate(document, Rails2.formInputClickSelector, "click", formSubmitButtonClick);
              document.addEventListener("DOMContentLoaded", refreshCSRFTokens);
              document.addEventListener("DOMContentLoaded", loadCSPNonce);
              return window._rails_loaded = true;
            };
            if (window.Rails === Rails2 && fire(document, "rails:attachBindings")) {
              Rails2.start();
            }
          }).call(this);
        }).call(this);
        if (typeof module === "object" && module.exports) {
          module.exports = Rails2;
        } else if (typeof define === "function" && define.amd) {
          define(Rails2);
        }
      }).call(exports);
    }
  });

  // node_modules/datatables.net/js/jquery.dataTables.js
  var require_jquery_dataTables = __commonJS({
    "node_modules/datatables.net/js/jquery.dataTables.js"(exports, module) {
      (function(factory) {
        "use strict";
        if (typeof define === "function" && define.amd) {
          define(["jquery"], function($2) {
            return factory($2, window, document);
          });
        } else if (typeof exports === "object") {
          module.exports = function(root, $2) {
            if (!root) {
              root = window;
            }
            if (!$2) {
              $2 = typeof window !== "undefined" ? (
                // jQuery's factory checks for a global window
                require_jquery()
              ) : require_jquery()(root);
            }
            return factory($2, root, root.document);
          };
        } else {
          window.DataTable = factory(jQuery, window, document);
        }
      })(function($2, window2, document2, undefined2) {
        "use strict";
        var DataTable = function(selector, options) {
          if (this instanceof DataTable) {
            return $2(selector).DataTable(options);
          } else {
            options = selector;
          }
          this.$ = function(sSelector, oOpts) {
            return this.api(true).$(sSelector, oOpts);
          };
          this._ = function(sSelector, oOpts) {
            return this.api(true).rows(sSelector, oOpts).data();
          };
          this.api = function(traditional) {
            return traditional ? new _Api(
              _fnSettingsFromNode(this[_ext.iApiIndex])
            ) : new _Api(this);
          };
          this.fnAddData = function(data, redraw) {
            var api = this.api(true);
            var rows = Array.isArray(data) && (Array.isArray(data[0]) || $2.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);
            if (redraw === undefined2 || redraw) {
              api.draw();
            }
            return rows.flatten().toArray();
          };
          this.fnAdjustColumnSizing = function(bRedraw) {
            var api = this.api(true).columns.adjust();
            var settings = api.settings()[0];
            var scroll = settings.oScroll;
            if (bRedraw === undefined2 || bRedraw) {
              api.draw(false);
            } else if (scroll.sX !== "" || scroll.sY !== "") {
              _fnScrollDraw(settings);
            }
          };
          this.fnClearTable = function(bRedraw) {
            var api = this.api(true).clear();
            if (bRedraw === undefined2 || bRedraw) {
              api.draw();
            }
          };
          this.fnClose = function(nTr) {
            this.api(true).row(nTr).child.hide();
          };
          this.fnDeleteRow = function(target, callback, redraw) {
            var api = this.api(true);
            var rows = api.rows(target);
            var settings = rows.settings()[0];
            var data = settings.aoData[rows[0][0]];
            rows.remove();
            if (callback) {
              callback.call(this, settings, data);
            }
            if (redraw === undefined2 || redraw) {
              api.draw();
            }
            return data;
          };
          this.fnDestroy = function(remove) {
            this.api(true).destroy(remove);
          };
          this.fnDraw = function(complete) {
            this.api(true).draw(complete);
          };
          this.fnFilter = function(sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
            var api = this.api(true);
            if (iColumn === null || iColumn === undefined2) {
              api.search(sInput, bRegex, bSmart, bCaseInsensitive);
            } else {
              api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
            }
            api.draw();
          };
          this.fnGetData = function(src, col) {
            var api = this.api(true);
            if (src !== undefined2) {
              var type = src.nodeName ? src.nodeName.toLowerCase() : "";
              return col !== undefined2 || type == "td" || type == "th" ? api.cell(src, col).data() : api.row(src).data() || null;
            }
            return api.data().toArray();
          };
          this.fnGetNodes = function(iRow) {
            var api = this.api(true);
            return iRow !== undefined2 ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();
          };
          this.fnGetPosition = function(node) {
            var api = this.api(true);
            var nodeName = node.nodeName.toUpperCase();
            if (nodeName == "TR") {
              return api.row(node).index();
            } else if (nodeName == "TD" || nodeName == "TH") {
              var cell = api.cell(node).index();
              return [
                cell.row,
                cell.columnVisible,
                cell.column
              ];
            }
            return null;
          };
          this.fnIsOpen = function(nTr) {
            return this.api(true).row(nTr).child.isShown();
          };
          this.fnOpen = function(nTr, mHtml, sClass) {
            return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];
          };
          this.fnPageChange = function(mAction, bRedraw) {
            var api = this.api(true).page(mAction);
            if (bRedraw === undefined2 || bRedraw) {
              api.draw(false);
            }
          };
          this.fnSetColumnVis = function(iCol, bShow, bRedraw) {
            var api = this.api(true).column(iCol).visible(bShow);
            if (bRedraw === undefined2 || bRedraw) {
              api.columns.adjust().draw();
            }
          };
          this.fnSettings = function() {
            return _fnSettingsFromNode(this[_ext.iApiIndex]);
          };
          this.fnSort = function(aaSort) {
            this.api(true).order(aaSort).draw();
          };
          this.fnSortListener = function(nNode, iColumn, fnCallback) {
            this.api(true).order.listener(nNode, iColumn, fnCallback);
          };
          this.fnUpdate = function(mData, mRow, iColumn, bRedraw, bAction) {
            var api = this.api(true);
            if (iColumn === undefined2 || iColumn === null) {
              api.row(mRow).data(mData);
            } else {
              api.cell(mRow, iColumn).data(mData);
            }
            if (bAction === undefined2 || bAction) {
              api.columns.adjust();
            }
            if (bRedraw === undefined2 || bRedraw) {
              api.draw();
            }
            return 0;
          };
          this.fnVersionCheck = _ext.fnVersionCheck;
          var _that = this;
          var emptyInit = options === undefined2;
          var len = this.length;
          if (emptyInit) {
            options = {};
          }
          this.oApi = this.internal = _ext.internal;
          for (var fn2 in DataTable.ext.internal) {
            if (fn2) {
              this[fn2] = _fnExternApiFunc(fn2);
            }
          }
          this.each(function() {
            var o = {};
            var oInit = len > 1 ? (
              // optimisation for single table case
              _fnExtend(o, options, true)
            ) : options;
            var i2 = 0, iLen, j, jLen, k, kLen;
            var sId = this.getAttribute("id");
            var bInitHandedOff = false;
            var defaults = DataTable.defaults;
            var $this = $2(this);
            if (this.nodeName.toLowerCase() != "table") {
              _fnLog(null, 0, "Non-table node initialisation (" + this.nodeName + ")", 2);
              return;
            }
            _fnCompatOpts(defaults);
            _fnCompatCols(defaults.column);
            _fnCamelToHungarian(defaults, defaults, true);
            _fnCamelToHungarian(defaults.column, defaults.column, true);
            _fnCamelToHungarian(defaults, $2.extend(oInit, $this.data()), true);
            var allSettings = DataTable.settings;
            for (i2 = 0, iLen = allSettings.length; i2 < iLen; i2++) {
              var s = allSettings[i2];
              if (s.nTable == this || s.nTHead && s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {
                var bRetrieve = oInit.bRetrieve !== undefined2 ? oInit.bRetrieve : defaults.bRetrieve;
                var bDestroy = oInit.bDestroy !== undefined2 ? oInit.bDestroy : defaults.bDestroy;
                if (emptyInit || bRetrieve) {
                  return s.oInstance;
                } else if (bDestroy) {
                  s.oInstance.fnDestroy();
                  break;
                } else {
                  _fnLog(s, 0, "Cannot reinitialise DataTable", 3);
                  return;
                }
              }
              if (s.sTableId == this.id) {
                allSettings.splice(i2, 1);
                break;
              }
            }
            if (sId === null || sId === "") {
              sId = "DataTables_Table_" + DataTable.ext._unique++;
              this.id = sId;
            }
            var oSettings = $2.extend(true, {}, DataTable.models.oSettings, {
              "sDestroyWidth": $this[0].style.width,
              "sInstance": sId,
              "sTableId": sId
            });
            oSettings.nTable = this;
            oSettings.oApi = _that.internal;
            oSettings.oInit = oInit;
            allSettings.push(oSettings);
            oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable();
            _fnCompatOpts(oInit);
            _fnLanguageCompat(oInit.oLanguage);
            if (oInit.aLengthMenu && !oInit.iDisplayLength) {
              oInit.iDisplayLength = Array.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
            }
            oInit = _fnExtend($2.extend(true, {}, defaults), oInit);
            _fnMap(oSettings.oFeatures, oInit, [
              "bPaginate",
              "bLengthChange",
              "bFilter",
              "bSort",
              "bSortMulti",
              "bInfo",
              "bProcessing",
              "bAutoWidth",
              "bSortClasses",
              "bServerSide",
              "bDeferRender"
            ]);
            _fnMap(oSettings, oInit, [
              "asStripeClasses",
              "ajax",
              "fnServerData",
              "fnFormatNumber",
              "sServerMethod",
              "aaSorting",
              "aaSortingFixed",
              "aLengthMenu",
              "sPaginationType",
              "sAjaxSource",
              "sAjaxDataProp",
              "iStateDuration",
              "sDom",
              "bSortCellsTop",
              "iTabIndex",
              "fnStateLoadCallback",
              "fnStateSaveCallback",
              "renderer",
              "searchDelay",
              "rowId",
              ["iCookieDuration", "iStateDuration"],
              // backwards compat
              ["oSearch", "oPreviousSearch"],
              ["aoSearchCols", "aoPreSearchCols"],
              ["iDisplayLength", "_iDisplayLength"]
            ]);
            _fnMap(oSettings.oScroll, oInit, [
              ["sScrollX", "sX"],
              ["sScrollXInner", "sXInner"],
              ["sScrollY", "sY"],
              ["bScrollCollapse", "bCollapse"]
            ]);
            _fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");
            _fnCallbackReg(oSettings, "aoDrawCallback", oInit.fnDrawCallback, "user");
            _fnCallbackReg(oSettings, "aoServerParams", oInit.fnServerParams, "user");
            _fnCallbackReg(oSettings, "aoStateSaveParams", oInit.fnStateSaveParams, "user");
            _fnCallbackReg(oSettings, "aoStateLoadParams", oInit.fnStateLoadParams, "user");
            _fnCallbackReg(oSettings, "aoStateLoaded", oInit.fnStateLoaded, "user");
            _fnCallbackReg(oSettings, "aoRowCallback", oInit.fnRowCallback, "user");
            _fnCallbackReg(oSettings, "aoRowCreatedCallback", oInit.fnCreatedRow, "user");
            _fnCallbackReg(oSettings, "aoHeaderCallback", oInit.fnHeaderCallback, "user");
            _fnCallbackReg(oSettings, "aoFooterCallback", oInit.fnFooterCallback, "user");
            _fnCallbackReg(oSettings, "aoInitComplete", oInit.fnInitComplete, "user");
            _fnCallbackReg(oSettings, "aoPreDrawCallback", oInit.fnPreDrawCallback, "user");
            oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);
            _fnBrowserDetect(oSettings);
            var oClasses = oSettings.oClasses;
            $2.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
            $this.addClass(oClasses.sTable);
            if (oSettings.iInitDisplayStart === undefined2) {
              oSettings.iInitDisplayStart = oInit.iDisplayStart;
              oSettings._iDisplayStart = oInit.iDisplayStart;
            }
            if (oInit.iDeferLoading !== null) {
              oSettings.bDeferLoading = true;
              var tmp = Array.isArray(oInit.iDeferLoading);
              oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
              oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
            }
            var oLanguage = oSettings.oLanguage;
            $2.extend(true, oLanguage, oInit.oLanguage);
            if (oLanguage.sUrl) {
              $2.ajax({
                dataType: "json",
                url: oLanguage.sUrl,
                success: function(json) {
                  _fnCamelToHungarian(defaults.oLanguage, json);
                  _fnLanguageCompat(json);
                  $2.extend(true, oLanguage, json, oSettings.oInit.oLanguage);
                  _fnCallbackFire(oSettings, null, "i18n", [oSettings]);
                  _fnInitialise(oSettings);
                },
                error: function() {
                  _fnInitialise(oSettings);
                }
              });
              bInitHandedOff = true;
            } else {
              _fnCallbackFire(oSettings, null, "i18n", [oSettings]);
            }
            if (oInit.asStripeClasses === null) {
              oSettings.asStripeClasses = [
                oClasses.sStripeOdd,
                oClasses.sStripeEven
              ];
            }
            var stripeClasses = oSettings.asStripeClasses;
            var rowOne = $this.children("tbody").find("tr").eq(0);
            if ($2.inArray(true, $2.map(stripeClasses, function(el, i3) {
              return rowOne.hasClass(el);
            })) !== -1) {
              $2("tbody tr", this).removeClass(stripeClasses.join(" "));
              oSettings.asDestroyStripes = stripeClasses.slice();
            }
            var anThs = [];
            var aoColumnsInit;
            var nThead = this.getElementsByTagName("thead");
            if (nThead.length !== 0) {
              _fnDetectHeader(oSettings.aoHeader, nThead[0]);
              anThs = _fnGetUniqueThs(oSettings);
            }
            if (oInit.aoColumns === null) {
              aoColumnsInit = [];
              for (i2 = 0, iLen = anThs.length; i2 < iLen; i2++) {
                aoColumnsInit.push(null);
              }
            } else {
              aoColumnsInit = oInit.aoColumns;
            }
            for (i2 = 0, iLen = aoColumnsInit.length; i2 < iLen; i2++) {
              _fnAddColumn(oSettings, anThs ? anThs[i2] : null);
            }
            _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function(iCol, oDef) {
              _fnColumnOptions(oSettings, iCol, oDef);
            });
            if (rowOne.length) {
              var a = function(cell, name) {
                return cell.getAttribute("data-" + name) !== null ? name : null;
              };
              $2(rowOne[0]).children("th, td").each(function(i3, cell) {
                var col = oSettings.aoColumns[i3];
                if (col.mData === i3) {
                  var sort = a(cell, "sort") || a(cell, "order");
                  var filter = a(cell, "filter") || a(cell, "search");
                  if (sort !== null || filter !== null) {
                    col.mData = {
                      _: i3 + ".display",
                      sort: sort !== null ? i3 + ".@data-" + sort : undefined2,
                      type: sort !== null ? i3 + ".@data-" + sort : undefined2,
                      filter: filter !== null ? i3 + ".@data-" + filter : undefined2
                    };
                    _fnColumnOptions(oSettings, i3);
                  }
                }
              });
            }
            var features = oSettings.oFeatures;
            var loadedInit = function() {
              if (oInit.aaSorting === undefined2) {
                var sorting = oSettings.aaSorting;
                for (i2 = 0, iLen = sorting.length; i2 < iLen; i2++) {
                  sorting[i2][1] = oSettings.aoColumns[i2].asSorting[0];
                }
              }
              _fnSortingClasses(oSettings);
              if (features.bSort) {
                _fnCallbackReg(oSettings, "aoDrawCallback", function() {
                  if (oSettings.bSorted) {
                    var aSort = _fnSortFlatten(oSettings);
                    var sortedColumns = {};
                    $2.each(aSort, function(i3, val) {
                      sortedColumns[val.src] = val.dir;
                    });
                    _fnCallbackFire(oSettings, null, "order", [oSettings, aSort, sortedColumns]);
                    _fnSortAria(oSettings);
                  }
                });
              }
              _fnCallbackReg(oSettings, "aoDrawCallback", function() {
                if (oSettings.bSorted || _fnDataSource(oSettings) === "ssp" || features.bDeferRender) {
                  _fnSortingClasses(oSettings);
                }
              }, "sc");
              var captions = $this.children("caption").each(function() {
                this._captionSide = $2(this).css("caption-side");
              });
              var thead = $this.children("thead");
              if (thead.length === 0) {
                thead = $2("<thead/>").appendTo($this);
              }
              oSettings.nTHead = thead[0];
              var tbody = $this.children("tbody");
              if (tbody.length === 0) {
                tbody = $2("<tbody/>").insertAfter(thead);
              }
              oSettings.nTBody = tbody[0];
              var tfoot = $this.children("tfoot");
              if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")) {
                tfoot = $2("<tfoot/>").appendTo($this);
              }
              if (tfoot.length === 0 || tfoot.children().length === 0) {
                $this.addClass(oClasses.sNoFooter);
              } else if (tfoot.length > 0) {
                oSettings.nTFoot = tfoot[0];
                _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
              }
              if (oInit.aaData) {
                for (i2 = 0; i2 < oInit.aaData.length; i2++) {
                  _fnAddData(oSettings, oInit.aaData[i2]);
                }
              } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == "dom") {
                _fnAddTr(oSettings, $2(oSettings.nTBody).children("tr"));
              }
              oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
              oSettings.bInitialised = true;
              if (bInitHandedOff === false) {
                _fnInitialise(oSettings);
              }
            };
            _fnCallbackReg(oSettings, "aoDrawCallback", _fnSaveState, "state_save");
            if (oInit.bStateSave) {
              features.bStateSave = true;
              _fnLoadState(oSettings, oInit, loadedInit);
            } else {
              loadedInit();
            }
          });
          _that = null;
          return this;
        };
        var _ext;
        var _Api;
        var _api_register;
        var _api_registerPlural;
        var _re_dic = {};
        var _re_new_lines = /[\r\n\u2028]/g;
        var _re_html = /<.*?>/g;
        var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;
        var _re_escape_regex = new RegExp("(\\" + ["/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^", "-"].join("|\\") + ")", "g");
        var _re_formatted_numeric = /['\u00A0,$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;
        var _empty = function(d) {
          return !d || d === true || d === "-" ? true : false;
        };
        var _intVal = function(s) {
          var integer = parseInt(s, 10);
          return !isNaN(integer) && isFinite(s) ? integer : null;
        };
        var _numToDecimal = function(num2, decimalPoint) {
          if (!_re_dic[decimalPoint]) {
            _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), "g");
          }
          return typeof num2 === "string" && decimalPoint !== "." ? num2.replace(/\./g, "").replace(_re_dic[decimalPoint], ".") : num2;
        };
        var _isNumber = function(d, decimalPoint, formatted) {
          var strType = typeof d === "string";
          if (_empty(d)) {
            return true;
          }
          if (decimalPoint && strType) {
            d = _numToDecimal(d, decimalPoint);
          }
          if (formatted && strType) {
            d = d.replace(_re_formatted_numeric, "");
          }
          return !isNaN(parseFloat(d)) && isFinite(d);
        };
        var _isHtml = function(d) {
          return _empty(d) || typeof d === "string";
        };
        var _htmlNumeric = function(d, decimalPoint, formatted) {
          if (_empty(d)) {
            return true;
          }
          var html = _isHtml(d);
          return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;
        };
        var _pluck = function(a, prop, prop2) {
          var out = [];
          var i2 = 0, ien = a.length;
          if (prop2 !== undefined2) {
            for (; i2 < ien; i2++) {
              if (a[i2] && a[i2][prop]) {
                out.push(a[i2][prop][prop2]);
              }
            }
          } else {
            for (; i2 < ien; i2++) {
              if (a[i2]) {
                out.push(a[i2][prop]);
              }
            }
          }
          return out;
        };
        var _pluck_order = function(a, order2, prop, prop2) {
          var out = [];
          var i2 = 0, ien = order2.length;
          if (prop2 !== undefined2) {
            for (; i2 < ien; i2++) {
              if (a[order2[i2]][prop]) {
                out.push(a[order2[i2]][prop][prop2]);
              }
            }
          } else {
            for (; i2 < ien; i2++) {
              out.push(a[order2[i2]][prop]);
            }
          }
          return out;
        };
        var _range = function(len, start2) {
          var out = [];
          var end2;
          if (start2 === undefined2) {
            start2 = 0;
            end2 = len;
          } else {
            end2 = start2;
            start2 = len;
          }
          for (var i2 = start2; i2 < end2; i2++) {
            out.push(i2);
          }
          return out;
        };
        var _removeEmpty = function(a) {
          var out = [];
          for (var i2 = 0, ien = a.length; i2 < ien; i2++) {
            if (a[i2]) {
              out.push(a[i2]);
            }
          }
          return out;
        };
        var _stripHtml = function(d) {
          return d.replace(_re_html, "");
        };
        var _areAllUnique = function(src) {
          if (src.length < 2) {
            return true;
          }
          var sorted = src.slice().sort();
          var last = sorted[0];
          for (var i2 = 1, ien = sorted.length; i2 < ien; i2++) {
            if (sorted[i2] === last) {
              return false;
            }
            last = sorted[i2];
          }
          return true;
        };
        var _unique = function(src) {
          if (_areAllUnique(src)) {
            return src.slice();
          }
          var out = [], val, i2, ien = src.length, j, k = 0;
          again:
            for (i2 = 0; i2 < ien; i2++) {
              val = src[i2];
              for (j = 0; j < k; j++) {
                if (out[j] === val) {
                  continue again;
                }
              }
              out.push(val);
              k++;
            }
          return out;
        };
        var _flatten = function(out, val) {
          if (Array.isArray(val)) {
            for (var i2 = 0; i2 < val.length; i2++) {
              _flatten(out, val[i2]);
            }
          } else {
            out.push(val);
          }
          return out;
        };
        var _includes = function(search, start2) {
          if (start2 === undefined2) {
            start2 = 0;
          }
          return this.indexOf(search, start2) !== -1;
        };
        if (!Array.isArray) {
          Array.isArray = function(arg) {
            return Object.prototype.toString.call(arg) === "[object Array]";
          };
        }
        if (!Array.prototype.includes) {
          Array.prototype.includes = _includes;
        }
        if (!String.prototype.trim) {
          String.prototype.trim = function() {
            return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
          };
        }
        if (!String.prototype.includes) {
          String.prototype.includes = _includes;
        }
        DataTable.util = {
          /**
           * Throttle the calls to a function. Arguments and context are maintained
           * for the throttled function.
           *
           * @param {function} fn Function to be called
           * @param {integer} freq Call frequency in mS
           * @return {function} Wrapped function
           */
          throttle: function(fn2, freq) {
            var frequency = freq !== undefined2 ? freq : 200, last, timer;
            return function() {
              var that = this, now = +/* @__PURE__ */ new Date(), args = arguments;
              if (last && now < last + frequency) {
                clearTimeout(timer);
                timer = setTimeout(function() {
                  last = undefined2;
                  fn2.apply(that, args);
                }, frequency);
              } else {
                last = now;
                fn2.apply(that, args);
              }
            };
          },
          /**
           * Escape a string such that it can be used in a regular expression
           *
           *  @param {string} val string to escape
           *  @returns {string} escaped string
           */
          escapeRegex: function(val) {
            return val.replace(_re_escape_regex, "\\$1");
          },
          /**
           * Create a function that will write to a nested object or array
           * @param {*} source JSON notation string
           * @returns Write function
           */
          set: function(source) {
            if ($2.isPlainObject(source)) {
              return DataTable.util.set(source._);
            } else if (source === null) {
              return function() {
              };
            } else if (typeof source === "function") {
              return function(data, val, meta) {
                source(data, "set", val, meta);
              };
            } else if (typeof source === "string" && (source.indexOf(".") !== -1 || source.indexOf("[") !== -1 || source.indexOf("(") !== -1)) {
              var setData = function(data, val, src) {
                var a = _fnSplitObjNotation(src), b;
                var aLast = a[a.length - 1];
                var arrayNotation, funcNotation, o, innerSrc;
                for (var i2 = 0, iLen = a.length - 1; i2 < iLen; i2++) {
                  if (a[i2] === "__proto__" || a[i2] === "constructor") {
                    throw new Error("Cannot set prototype values");
                  }
                  arrayNotation = a[i2].match(__reArray);
                  funcNotation = a[i2].match(__reFn);
                  if (arrayNotation) {
                    a[i2] = a[i2].replace(__reArray, "");
                    data[a[i2]] = [];
                    b = a.slice();
                    b.splice(0, i2 + 1);
                    innerSrc = b.join(".");
                    if (Array.isArray(val)) {
                      for (var j = 0, jLen = val.length; j < jLen; j++) {
                        o = {};
                        setData(o, val[j], innerSrc);
                        data[a[i2]].push(o);
                      }
                    } else {
                      data[a[i2]] = val;
                    }
                    return;
                  } else if (funcNotation) {
                    a[i2] = a[i2].replace(__reFn, "");
                    data = data[a[i2]](val);
                  }
                  if (data[a[i2]] === null || data[a[i2]] === undefined2) {
                    data[a[i2]] = {};
                  }
                  data = data[a[i2]];
                }
                if (aLast.match(__reFn)) {
                  data = data[aLast.replace(__reFn, "")](val);
                } else {
                  data[aLast.replace(__reArray, "")] = val;
                }
              };
              return function(data, val) {
                return setData(data, val, source);
              };
            } else {
              return function(data, val) {
                data[source] = val;
              };
            }
          },
          /**
           * Create a function that will read nested objects from arrays, based on JSON notation
           * @param {*} source JSON notation string
           * @returns Value read
           */
          get: function(source) {
            if ($2.isPlainObject(source)) {
              var o = {};
              $2.each(source, function(key, val) {
                if (val) {
                  o[key] = DataTable.util.get(val);
                }
              });
              return function(data, type, row, meta) {
                var t = o[type] || o._;
                return t !== undefined2 ? t(data, type, row, meta) : data;
              };
            } else if (source === null) {
              return function(data) {
                return data;
              };
            } else if (typeof source === "function") {
              return function(data, type, row, meta) {
                return source(data, type, row, meta);
              };
            } else if (typeof source === "string" && (source.indexOf(".") !== -1 || source.indexOf("[") !== -1 || source.indexOf("(") !== -1)) {
              var fetchData = function(data, type, src) {
                var arrayNotation, funcNotation, out, innerSrc;
                if (src !== "") {
                  var a = _fnSplitObjNotation(src);
                  for (var i2 = 0, iLen = a.length; i2 < iLen; i2++) {
                    arrayNotation = a[i2].match(__reArray);
                    funcNotation = a[i2].match(__reFn);
                    if (arrayNotation) {
                      a[i2] = a[i2].replace(__reArray, "");
                      if (a[i2] !== "") {
                        data = data[a[i2]];
                      }
                      out = [];
                      a.splice(0, i2 + 1);
                      innerSrc = a.join(".");
                      if (Array.isArray(data)) {
                        for (var j = 0, jLen = data.length; j < jLen; j++) {
                          out.push(fetchData(data[j], type, innerSrc));
                        }
                      }
                      var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
                      data = join === "" ? out : out.join(join);
                      break;
                    } else if (funcNotation) {
                      a[i2] = a[i2].replace(__reFn, "");
                      data = data[a[i2]]();
                      continue;
                    }
                    if (data === null || data[a[i2]] === undefined2) {
                      return undefined2;
                    }
                    data = data[a[i2]];
                  }
                }
                return data;
              };
              return function(data, type) {
                return fetchData(data, type, source);
              };
            } else {
              return function(data, type) {
                return data[source];
              };
            }
          }
        };
        function _fnHungarianMap(o) {
          var hungarian = "a aa ai ao as b fn i m o s ", match, newKey, map = {};
          $2.each(o, function(key, val) {
            match = key.match(/^([^A-Z]+?)([A-Z])/);
            if (match && hungarian.indexOf(match[1] + " ") !== -1) {
              newKey = key.replace(match[0], match[2].toLowerCase());
              map[newKey] = key;
              if (match[1] === "o") {
                _fnHungarianMap(o[key]);
              }
            }
          });
          o._hungarianMap = map;
        }
        function _fnCamelToHungarian(src, user, force) {
          if (!src._hungarianMap) {
            _fnHungarianMap(src);
          }
          var hungarianKey;
          $2.each(user, function(key, val) {
            hungarianKey = src._hungarianMap[key];
            if (hungarianKey !== undefined2 && (force || user[hungarianKey] === undefined2)) {
              if (hungarianKey.charAt(0) === "o") {
                if (!user[hungarianKey]) {
                  user[hungarianKey] = {};
                }
                $2.extend(true, user[hungarianKey], user[key]);
                _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
              } else {
                user[hungarianKey] = user[key];
              }
            }
          });
        }
        function _fnLanguageCompat(lang) {
          var defaults = DataTable.defaults.oLanguage;
          var defaultDecimal = defaults.sDecimal;
          if (defaultDecimal) {
            _addNumericSort(defaultDecimal);
          }
          if (lang) {
            var zeroRecords = lang.sZeroRecords;
            if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === "No data available in table") {
              _fnMap(lang, lang, "sZeroRecords", "sEmptyTable");
            }
            if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === "Loading...") {
              _fnMap(lang, lang, "sZeroRecords", "sLoadingRecords");
            }
            if (lang.sInfoThousands) {
              lang.sThousands = lang.sInfoThousands;
            }
            var decimal = lang.sDecimal;
            if (decimal && defaultDecimal !== decimal) {
              _addNumericSort(decimal);
            }
          }
        }
        var _fnCompatMap = function(o, knew, old) {
          if (o[knew] !== undefined2) {
            o[old] = o[knew];
          }
        };
        function _fnCompatOpts(init) {
          _fnCompatMap(init, "ordering", "bSort");
          _fnCompatMap(init, "orderMulti", "bSortMulti");
          _fnCompatMap(init, "orderClasses", "bSortClasses");
          _fnCompatMap(init, "orderCellsTop", "bSortCellsTop");
          _fnCompatMap(init, "order", "aaSorting");
          _fnCompatMap(init, "orderFixed", "aaSortingFixed");
          _fnCompatMap(init, "paging", "bPaginate");
          _fnCompatMap(init, "pagingType", "sPaginationType");
          _fnCompatMap(init, "pageLength", "iDisplayLength");
          _fnCompatMap(init, "searching", "bFilter");
          if (typeof init.sScrollX === "boolean") {
            init.sScrollX = init.sScrollX ? "100%" : "";
          }
          if (typeof init.scrollX === "boolean") {
            init.scrollX = init.scrollX ? "100%" : "";
          }
          var searchCols = init.aoSearchCols;
          if (searchCols) {
            for (var i2 = 0, ien = searchCols.length; i2 < ien; i2++) {
              if (searchCols[i2]) {
                _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i2]);
              }
            }
          }
        }
        function _fnCompatCols(init) {
          _fnCompatMap(init, "orderable", "bSortable");
          _fnCompatMap(init, "orderData", "aDataSort");
          _fnCompatMap(init, "orderSequence", "asSorting");
          _fnCompatMap(init, "orderDataType", "sortDataType");
          var dataSort = init.aDataSort;
          if (typeof dataSort === "number" && !Array.isArray(dataSort)) {
            init.aDataSort = [dataSort];
          }
        }
        function _fnBrowserDetect(settings) {
          if (!DataTable.__browser) {
            var browser = {};
            DataTable.__browser = browser;
            var n = $2("<div/>").css({
              position: "fixed",
              top: 0,
              left: $2(window2).scrollLeft() * -1,
              // allow for scrolling
              height: 1,
              width: 1,
              overflow: "hidden"
            }).append(
              $2("<div/>").css({
                position: "absolute",
                top: 1,
                left: 1,
                width: 100,
                overflow: "scroll"
              }).append(
                $2("<div/>").css({
                  width: "100%",
                  height: 10
                })
              )
            ).appendTo("body");
            var outer = n.children();
            var inner = outer.children();
            browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
            browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
            browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;
            browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
            n.remove();
          }
          $2.extend(settings.oBrowser, DataTable.__browser);
          settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
        }
        function _fnReduce(that, fn2, init, start2, end2, inc) {
          var i2 = start2, value, isSet = false;
          if (init !== undefined2) {
            value = init;
            isSet = true;
          }
          while (i2 !== end2) {
            if (!that.hasOwnProperty(i2)) {
              continue;
            }
            value = isSet ? fn2(value, that[i2], i2, that) : that[i2];
            isSet = true;
            i2 += inc;
          }
          return value;
        }
        function _fnAddColumn(oSettings, nTh) {
          var oDefaults = DataTable.defaults.column;
          var iCol = oSettings.aoColumns.length;
          var oCol = $2.extend({}, DataTable.models.oColumn, oDefaults, {
            "nTh": nTh ? nTh : document2.createElement("th"),
            "sTitle": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : "",
            "aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
            "mData": oDefaults.mData ? oDefaults.mData : iCol,
            idx: iCol
          });
          oSettings.aoColumns.push(oCol);
          var searchCols = oSettings.aoPreSearchCols;
          searchCols[iCol] = $2.extend({}, DataTable.models.oSearch, searchCols[iCol]);
          _fnColumnOptions(oSettings, iCol, $2(nTh).data());
        }
        function _fnColumnOptions(oSettings, iCol, oOptions) {
          var oCol = oSettings.aoColumns[iCol];
          var oClasses = oSettings.oClasses;
          var th = $2(oCol.nTh);
          if (!oCol.sWidthOrig) {
            oCol.sWidthOrig = th.attr("width") || null;
            var t = (th.attr("style") || "").match(/width:\s*(\d+[pxem%]+)/);
            if (t) {
              oCol.sWidthOrig = t[1];
            }
          }
          if (oOptions !== undefined2 && oOptions !== null) {
            _fnCompatCols(oOptions);
            _fnCamelToHungarian(DataTable.defaults.column, oOptions, true);
            if (oOptions.mDataProp !== undefined2 && !oOptions.mData) {
              oOptions.mData = oOptions.mDataProp;
            }
            if (oOptions.sType) {
              oCol._sManualType = oOptions.sType;
            }
            if (oOptions.className && !oOptions.sClass) {
              oOptions.sClass = oOptions.className;
            }
            if (oOptions.sClass) {
              th.addClass(oOptions.sClass);
            }
            var origClass = oCol.sClass;
            $2.extend(oCol, oOptions);
            _fnMap(oCol, oOptions, "sWidth", "sWidthOrig");
            if (origClass !== oCol.sClass) {
              oCol.sClass = origClass + " " + oCol.sClass;
            }
            if (oOptions.iDataSort !== undefined2) {
              oCol.aDataSort = [oOptions.iDataSort];
            }
            _fnMap(oCol, oOptions, "aDataSort");
          }
          var mDataSrc = oCol.mData;
          var mData = _fnGetObjectDataFn(mDataSrc);
          var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;
          var attrTest = function(src) {
            return typeof src === "string" && src.indexOf("@") !== -1;
          };
          oCol._bAttrSrc = $2.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));
          oCol._setter = null;
          oCol.fnGetData = function(rowData, type, meta) {
            var innerData = mData(rowData, type, undefined2, meta);
            return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;
          };
          oCol.fnSetData = function(rowData, val, meta) {
            return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
          };
          if (typeof mDataSrc !== "number") {
            oSettings._rowReadObject = true;
          }
          if (!oSettings.oFeatures.bSort) {
            oCol.bSortable = false;
            th.addClass(oClasses.sSortableNone);
          }
          var bAsc = $2.inArray("asc", oCol.asSorting) !== -1;
          var bDesc = $2.inArray("desc", oCol.asSorting) !== -1;
          if (!oCol.bSortable || !bAsc && !bDesc) {
            oCol.sSortingClass = oClasses.sSortableNone;
            oCol.sSortingClassJUI = "";
          } else if (bAsc && !bDesc) {
            oCol.sSortingClass = oClasses.sSortableAsc;
            oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
          } else if (!bAsc && bDesc) {
            oCol.sSortingClass = oClasses.sSortableDesc;
            oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
          } else {
            oCol.sSortingClass = oClasses.sSortable;
            oCol.sSortingClassJUI = oClasses.sSortJUI;
          }
        }
        function _fnAdjustColumnSizing(settings) {
          if (settings.oFeatures.bAutoWidth !== false) {
            var columns = settings.aoColumns;
            _fnCalculateColumnWidths(settings);
            for (var i2 = 0, iLen = columns.length; i2 < iLen; i2++) {
              columns[i2].nTh.style.width = columns[i2].sWidth;
            }
          }
          var scroll = settings.oScroll;
          if (scroll.sY !== "" || scroll.sX !== "") {
            _fnScrollDraw(settings);
          }
          _fnCallbackFire(settings, null, "column-sizing", [settings]);
        }
        function _fnVisibleToColumnIndex(oSettings, iMatch) {
          var aiVis = _fnGetColumns(oSettings, "bVisible");
          return typeof aiVis[iMatch] === "number" ? aiVis[iMatch] : null;
        }
        function _fnColumnIndexToVisible(oSettings, iMatch) {
          var aiVis = _fnGetColumns(oSettings, "bVisible");
          var iPos = $2.inArray(iMatch, aiVis);
          return iPos !== -1 ? iPos : null;
        }
        function _fnVisbleColumns(oSettings) {
          var vis = 0;
          $2.each(oSettings.aoColumns, function(i2, col) {
            if (col.bVisible && $2(col.nTh).css("display") !== "none") {
              vis++;
            }
          });
          return vis;
        }
        function _fnGetColumns(oSettings, sParam) {
          var a = [];
          $2.map(oSettings.aoColumns, function(val, i2) {
            if (val[sParam]) {
              a.push(i2);
            }
          });
          return a;
        }
        function _fnColumnTypes(settings) {
          var columns = settings.aoColumns;
          var data = settings.aoData;
          var types = DataTable.ext.type.detect;
          var i2, ien, j, jen, k, ken;
          var col, cell, detectedType, cache;
          for (i2 = 0, ien = columns.length; i2 < ien; i2++) {
            col = columns[i2];
            cache = [];
            if (!col.sType && col._sManualType) {
              col.sType = col._sManualType;
            } else if (!col.sType) {
              for (j = 0, jen = types.length; j < jen; j++) {
                for (k = 0, ken = data.length; k < ken; k++) {
                  if (cache[k] === undefined2) {
                    cache[k] = _fnGetCellData(settings, k, i2, "type");
                  }
                  detectedType = types[j](cache[k], settings);
                  if (!detectedType && j !== types.length - 1) {
                    break;
                  }
                  if (detectedType === "html" && !_empty(cache[k])) {
                    break;
                  }
                }
                if (detectedType) {
                  col.sType = detectedType;
                  break;
                }
              }
              if (!col.sType) {
                col.sType = "string";
              }
            }
          }
        }
        function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn2) {
          var i2, iLen, j, jLen, k, kLen, def;
          var columns = oSettings.aoColumns;
          if (aoColDefs) {
            for (i2 = aoColDefs.length - 1; i2 >= 0; i2--) {
              def = aoColDefs[i2];
              var aTargets = def.target !== undefined2 ? def.target : def.targets !== undefined2 ? def.targets : def.aTargets;
              if (!Array.isArray(aTargets)) {
                aTargets = [aTargets];
              }
              for (j = 0, jLen = aTargets.length; j < jLen; j++) {
                if (typeof aTargets[j] === "number" && aTargets[j] >= 0) {
                  while (columns.length <= aTargets[j]) {
                    _fnAddColumn(oSettings);
                  }
                  fn2(aTargets[j], def);
                } else if (typeof aTargets[j] === "number" && aTargets[j] < 0) {
                  fn2(columns.length + aTargets[j], def);
                } else if (typeof aTargets[j] === "string") {
                  for (k = 0, kLen = columns.length; k < kLen; k++) {
                    if (aTargets[j] == "_all" || $2(columns[k].nTh).hasClass(aTargets[j])) {
                      fn2(k, def);
                    }
                  }
                }
              }
            }
          }
          if (aoCols) {
            for (i2 = 0, iLen = aoCols.length; i2 < iLen; i2++) {
              fn2(i2, aoCols[i2]);
            }
          }
        }
        function _fnAddData(oSettings, aDataIn, nTr, anTds) {
          var iRow = oSettings.aoData.length;
          var oData = $2.extend(true, {}, DataTable.models.oRow, {
            src: nTr ? "dom" : "data",
            idx: iRow
          });
          oData._aData = aDataIn;
          oSettings.aoData.push(oData);
          var nTd, sThisType;
          var columns = oSettings.aoColumns;
          for (var i2 = 0, iLen = columns.length; i2 < iLen; i2++) {
            columns[i2].sType = null;
          }
          oSettings.aiDisplayMaster.push(iRow);
          var id = oSettings.rowIdFn(aDataIn);
          if (id !== undefined2) {
            oSettings.aIds[id] = oData;
          }
          if (nTr || !oSettings.oFeatures.bDeferRender) {
            _fnCreateTr(oSettings, iRow, nTr, anTds);
          }
          return iRow;
        }
        function _fnAddTr(settings, trs) {
          var row;
          if (!(trs instanceof $2)) {
            trs = $2(trs);
          }
          return trs.map(function(i2, el) {
            row = _fnGetRowElements(settings, el);
            return _fnAddData(settings, row.data, el, row.cells);
          });
        }
        function _fnNodeToDataIndex(oSettings, n) {
          return n._DT_RowIndex !== undefined2 ? n._DT_RowIndex : null;
        }
        function _fnNodeToColumnIndex(oSettings, iRow, n) {
          return $2.inArray(n, oSettings.aoData[iRow].anCells);
        }
        function _fnGetCellData(settings, rowIdx, colIdx, type) {
          if (type === "search") {
            type = "filter";
          } else if (type === "order") {
            type = "sort";
          }
          var draw = settings.iDraw;
          var col = settings.aoColumns[colIdx];
          var rowData = settings.aoData[rowIdx]._aData;
          var defaultContent = col.sDefaultContent;
          var cellData = col.fnGetData(rowData, type, {
            settings,
            row: rowIdx,
            col: colIdx
          });
          if (cellData === undefined2) {
            if (settings.iDrawError != draw && defaultContent === null) {
              _fnLog(settings, 0, "Requested unknown parameter " + (typeof col.mData == "function" ? "{function}" : "'" + col.mData + "'") + " for row " + rowIdx + ", column " + colIdx, 4);
              settings.iDrawError = draw;
            }
            return defaultContent;
          }
          if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined2) {
            cellData = defaultContent;
          } else if (typeof cellData === "function") {
            return cellData.call(rowData);
          }
          if (cellData === null && type === "display") {
            return "";
          }
          if (type === "filter") {
            var fomatters = DataTable.ext.type.search;
            if (fomatters[col.sType]) {
              cellData = fomatters[col.sType](cellData);
            }
          }
          return cellData;
        }
        function _fnSetCellData(settings, rowIdx, colIdx, val) {
          var col = settings.aoColumns[colIdx];
          var rowData = settings.aoData[rowIdx]._aData;
          col.fnSetData(rowData, val, {
            settings,
            row: rowIdx,
            col: colIdx
          });
        }
        var __reArray = /\[.*?\]$/;
        var __reFn = /\(\)$/;
        function _fnSplitObjNotation(str) {
          return $2.map(str.match(/(\\.|[^\.])+/g) || [""], function(s) {
            return s.replace(/\\\./g, ".");
          });
        }
        var _fnGetObjectDataFn = DataTable.util.get;
        var _fnSetObjectDataFn = DataTable.util.set;
        function _fnGetDataMaster(settings) {
          return _pluck(settings.aoData, "_aData");
        }
        function _fnClearTable(settings) {
          settings.aoData.length = 0;
          settings.aiDisplayMaster.length = 0;
          settings.aiDisplay.length = 0;
          settings.aIds = {};
        }
        function _fnDeleteIndex(a, iTarget, splice) {
          var iTargetIndex = -1;
          for (var i2 = 0, iLen = a.length; i2 < iLen; i2++) {
            if (a[i2] == iTarget) {
              iTargetIndex = i2;
            } else if (a[i2] > iTarget) {
              a[i2]--;
            }
          }
          if (iTargetIndex != -1 && splice === undefined2) {
            a.splice(iTargetIndex, 1);
          }
        }
        function _fnInvalidate(settings, rowIdx, src, colIdx) {
          var row = settings.aoData[rowIdx];
          var i2, ien;
          var cellWrite = function(cell, col) {
            while (cell.childNodes.length) {
              cell.removeChild(cell.firstChild);
            }
            cell.innerHTML = _fnGetCellData(settings, rowIdx, col, "display");
          };
          if (src === "dom" || (!src || src === "auto") && row.src === "dom") {
            row._aData = _fnGetRowElements(
              settings,
              row,
              colIdx,
              colIdx === undefined2 ? undefined2 : row._aData
            ).data;
          } else {
            var cells = row.anCells;
            if (cells) {
              if (colIdx !== undefined2) {
                cellWrite(cells[colIdx], colIdx);
              } else {
                for (i2 = 0, ien = cells.length; i2 < ien; i2++) {
                  cellWrite(cells[i2], i2);
                }
              }
            }
          }
          row._aSortData = null;
          row._aFilterData = null;
          var cols = settings.aoColumns;
          if (colIdx !== undefined2) {
            cols[colIdx].sType = null;
          } else {
            for (i2 = 0, ien = cols.length; i2 < ien; i2++) {
              cols[i2].sType = null;
            }
            _fnRowAttributes(settings, row);
          }
        }
        function _fnGetRowElements(settings, row, colIdx, d) {
          var tds = [], td = row.firstChild, name, col, o, i2 = 0, contents, columns = settings.aoColumns, objectRead = settings._rowReadObject;
          d = d !== undefined2 ? d : objectRead ? {} : [];
          var attr = function(str, td2) {
            if (typeof str === "string") {
              var idx = str.indexOf("@");
              if (idx !== -1) {
                var attr2 = str.substring(idx + 1);
                var setter = _fnSetObjectDataFn(str);
                setter(d, td2.getAttribute(attr2));
              }
            }
          };
          var cellProcess = function(cell) {
            if (colIdx === undefined2 || colIdx === i2) {
              col = columns[i2];
              contents = cell.innerHTML.trim();
              if (col && col._bAttrSrc) {
                var setter = _fnSetObjectDataFn(col.mData._);
                setter(d, contents);
                attr(col.mData.sort, cell);
                attr(col.mData.type, cell);
                attr(col.mData.filter, cell);
              } else {
                if (objectRead) {
                  if (!col._setter) {
                    col._setter = _fnSetObjectDataFn(col.mData);
                  }
                  col._setter(d, contents);
                } else {
                  d[i2] = contents;
                }
              }
            }
            i2++;
          };
          if (td) {
            while (td) {
              name = td.nodeName.toUpperCase();
              if (name == "TD" || name == "TH") {
                cellProcess(td);
                tds.push(td);
              }
              td = td.nextSibling;
            }
          } else {
            tds = row.anCells;
            for (var j = 0, jen = tds.length; j < jen; j++) {
              cellProcess(tds[j]);
            }
          }
          var rowNode = row.firstChild ? row : row.nTr;
          if (rowNode) {
            var id = rowNode.getAttribute("id");
            if (id) {
              _fnSetObjectDataFn(settings.rowId)(d, id);
            }
          }
          return {
            data: d,
            cells: tds
          };
        }
        function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
          var row = oSettings.aoData[iRow], rowData = row._aData, cells = [], nTr, nTd, oCol, i2, iLen, create;
          if (row.nTr === null) {
            nTr = nTrIn || document2.createElement("tr");
            row.nTr = nTr;
            row.anCells = cells;
            nTr._DT_RowIndex = iRow;
            _fnRowAttributes(oSettings, row);
            for (i2 = 0, iLen = oSettings.aoColumns.length; i2 < iLen; i2++) {
              oCol = oSettings.aoColumns[i2];
              create = nTrIn ? false : true;
              nTd = create ? document2.createElement(oCol.sCellType) : anTds[i2];
              nTd._DT_CellIndex = {
                row: iRow,
                column: i2
              };
              cells.push(nTd);
              if (create || (oCol.mRender || oCol.mData !== i2) && (!$2.isPlainObject(oCol.mData) || oCol.mData._ !== i2 + ".display")) {
                nTd.innerHTML = _fnGetCellData(oSettings, iRow, i2, "display");
              }
              if (oCol.sClass) {
                nTd.className += " " + oCol.sClass;
              }
              if (oCol.bVisible && !nTrIn) {
                nTr.appendChild(nTd);
              } else if (!oCol.bVisible && nTrIn) {
                nTd.parentNode.removeChild(nTd);
              }
              if (oCol.fnCreatedCell) {
                oCol.fnCreatedCell.call(
                  oSettings.oInstance,
                  nTd,
                  _fnGetCellData(oSettings, iRow, i2),
                  rowData,
                  iRow,
                  i2
                );
              }
            }
            _fnCallbackFire(oSettings, "aoRowCreatedCallback", null, [nTr, rowData, iRow, cells]);
          }
        }
        function _fnRowAttributes(settings, row) {
          var tr = row.nTr;
          var data = row._aData;
          if (tr) {
            var id = settings.rowIdFn(data);
            if (id) {
              tr.id = id;
            }
            if (data.DT_RowClass) {
              var a = data.DT_RowClass.split(" ");
              row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;
              $2(tr).removeClass(row.__rowc.join(" ")).addClass(data.DT_RowClass);
            }
            if (data.DT_RowAttr) {
              $2(tr).attr(data.DT_RowAttr);
            }
            if (data.DT_RowData) {
              $2(tr).data(data.DT_RowData);
            }
          }
        }
        function _fnBuildHead(oSettings) {
          var i2, ien, cell, row, column;
          var thead = oSettings.nTHead;
          var tfoot = oSettings.nTFoot;
          var createHeader = $2("th, td", thead).length === 0;
          var classes = oSettings.oClasses;
          var columns = oSettings.aoColumns;
          if (createHeader) {
            row = $2("<tr/>").appendTo(thead);
          }
          for (i2 = 0, ien = columns.length; i2 < ien; i2++) {
            column = columns[i2];
            cell = $2(column.nTh).addClass(column.sClass);
            if (createHeader) {
              cell.appendTo(row);
            }
            if (oSettings.oFeatures.bSort) {
              cell.addClass(column.sSortingClass);
              if (column.bSortable !== false) {
                cell.attr("tabindex", oSettings.iTabIndex).attr("aria-controls", oSettings.sTableId);
                _fnSortAttachListener(oSettings, column.nTh, i2);
              }
            }
            if (column.sTitle != cell[0].innerHTML) {
              cell.html(column.sTitle);
            }
            _fnRenderer(oSettings, "header")(
              oSettings,
              cell,
              column,
              classes
            );
          }
          if (createHeader) {
            _fnDetectHeader(oSettings.aoHeader, thead);
          }
          $2(thead).children("tr").children("th, td").addClass(classes.sHeaderTH);
          $2(tfoot).children("tr").children("th, td").addClass(classes.sFooterTH);
          if (tfoot !== null) {
            var cells = oSettings.aoFooter[0];
            for (i2 = 0, ien = cells.length; i2 < ien; i2++) {
              column = columns[i2];
              column.nTf = cells[i2].cell;
              if (column.sClass) {
                $2(column.nTf).addClass(column.sClass);
              }
            }
          }
        }
        function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
          var i2, iLen, j, jLen, k, kLen, n, nLocalTr;
          var aoLocal = [];
          var aApplied = [];
          var iColumns = oSettings.aoColumns.length;
          var iRowspan, iColspan;
          if (!aoSource) {
            return;
          }
          if (bIncludeHidden === undefined2) {
            bIncludeHidden = false;
          }
          for (i2 = 0, iLen = aoSource.length; i2 < iLen; i2++) {
            aoLocal[i2] = aoSource[i2].slice();
            aoLocal[i2].nTr = aoSource[i2].nTr;
            for (j = iColumns - 1; j >= 0; j--) {
              if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
                aoLocal[i2].splice(j, 1);
              }
            }
            aApplied.push([]);
          }
          for (i2 = 0, iLen = aoLocal.length; i2 < iLen; i2++) {
            nLocalTr = aoLocal[i2].nTr;
            if (nLocalTr) {
              while (n = nLocalTr.firstChild) {
                nLocalTr.removeChild(n);
              }
            }
            for (j = 0, jLen = aoLocal[i2].length; j < jLen; j++) {
              iRowspan = 1;
              iColspan = 1;
              if (aApplied[i2][j] === undefined2) {
                nLocalTr.appendChild(aoLocal[i2][j].cell);
                aApplied[i2][j] = 1;
                while (aoLocal[i2 + iRowspan] !== undefined2 && aoLocal[i2][j].cell == aoLocal[i2 + iRowspan][j].cell) {
                  aApplied[i2 + iRowspan][j] = 1;
                  iRowspan++;
                }
                while (aoLocal[i2][j + iColspan] !== undefined2 && aoLocal[i2][j].cell == aoLocal[i2][j + iColspan].cell) {
                  for (k = 0; k < iRowspan; k++) {
                    aApplied[i2 + k][j + iColspan] = 1;
                  }
                  iColspan++;
                }
                $2(aoLocal[i2][j].cell).attr("rowspan", iRowspan).attr("colspan", iColspan);
              }
            }
          }
        }
        function _fnDraw(oSettings, ajaxComplete) {
          _fnStart(oSettings);
          var aPreDraw = _fnCallbackFire(oSettings, "aoPreDrawCallback", "preDraw", [oSettings]);
          if ($2.inArray(false, aPreDraw) !== -1) {
            _fnProcessingDisplay(oSettings, false);
            return;
          }
          var anRows = [];
          var iRowCount = 0;
          var asStripeClasses = oSettings.asStripeClasses;
          var iStripes = asStripeClasses.length;
          var oLang = oSettings.oLanguage;
          var bServerSide = _fnDataSource(oSettings) == "ssp";
          var aiDisplay = oSettings.aiDisplay;
          var iDisplayStart = oSettings._iDisplayStart;
          var iDisplayEnd = oSettings.fnDisplayEnd();
          oSettings.bDrawing = true;
          if (oSettings.bDeferLoading) {
            oSettings.bDeferLoading = false;
            oSettings.iDraw++;
            _fnProcessingDisplay(oSettings, false);
          } else if (!bServerSide) {
            oSettings.iDraw++;
          } else if (!oSettings.bDestroying && !ajaxComplete) {
            _fnAjaxUpdate(oSettings);
            return;
          }
          if (aiDisplay.length !== 0) {
            var iStart = bServerSide ? 0 : iDisplayStart;
            var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
            for (var j = iStart; j < iEnd; j++) {
              var iDataIndex = aiDisplay[j];
              var aoData = oSettings.aoData[iDataIndex];
              if (aoData.nTr === null) {
                _fnCreateTr(oSettings, iDataIndex);
              }
              var nRow = aoData.nTr;
              if (iStripes !== 0) {
                var sStripe = asStripeClasses[iRowCount % iStripes];
                if (aoData._sRowStripe != sStripe) {
                  $2(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
                  aoData._sRowStripe = sStripe;
                }
              }
              _fnCallbackFire(
                oSettings,
                "aoRowCallback",
                null,
                [nRow, aoData._aData, iRowCount, j, iDataIndex]
              );
              anRows.push(nRow);
              iRowCount++;
            }
          } else {
            var sZero = oLang.sZeroRecords;
            if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == "ajax") {
              sZero = oLang.sLoadingRecords;
            } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
              sZero = oLang.sEmptyTable;
            }
            anRows[0] = $2("<tr/>", { "class": iStripes ? asStripeClasses[0] : "" }).append($2("<td />", {
              "valign": "top",
              "colSpan": _fnVisbleColumns(oSettings),
              "class": oSettings.oClasses.sRowEmpty
            }).html(sZero))[0];
          }
          _fnCallbackFire(oSettings, "aoHeaderCallback", "header", [
            $2(oSettings.nTHead).children("tr")[0],
            _fnGetDataMaster(oSettings),
            iDisplayStart,
            iDisplayEnd,
            aiDisplay
          ]);
          _fnCallbackFire(oSettings, "aoFooterCallback", "footer", [
            $2(oSettings.nTFoot).children("tr")[0],
            _fnGetDataMaster(oSettings),
            iDisplayStart,
            iDisplayEnd,
            aiDisplay
          ]);
          var body = $2(oSettings.nTBody);
          body.children().detach();
          body.append($2(anRows));
          _fnCallbackFire(oSettings, "aoDrawCallback", "draw", [oSettings]);
          oSettings.bSorted = false;
          oSettings.bFiltered = false;
          oSettings.bDrawing = false;
        }
        function _fnReDraw(settings, holdPosition) {
          var features = settings.oFeatures, sort = features.bSort, filter = features.bFilter;
          if (sort) {
            _fnSort(settings);
          }
          if (filter) {
            _fnFilterComplete(settings, settings.oPreviousSearch);
          } else {
            settings.aiDisplay = settings.aiDisplayMaster.slice();
          }
          if (holdPosition !== true) {
            settings._iDisplayStart = 0;
          }
          settings._drawHold = holdPosition;
          _fnDraw(settings);
          settings._drawHold = false;
        }
        function _fnAddOptionsHtml(oSettings) {
          var classes = oSettings.oClasses;
          var table = $2(oSettings.nTable);
          var holding = $2("<div/>").insertBefore(table);
          var features = oSettings.oFeatures;
          var insert = $2("<div/>", {
            id: oSettings.sTableId + "_wrapper",
            "class": classes.sWrapper + (oSettings.nTFoot ? "" : " " + classes.sNoFooter)
          });
          oSettings.nHolding = holding[0];
          oSettings.nTableWrapper = insert[0];
          oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
          var aDom = oSettings.sDom.split("");
          var featureNode, cOption, nNewNode, cNext, sAttr, j;
          for (var i2 = 0; i2 < aDom.length; i2++) {
            featureNode = null;
            cOption = aDom[i2];
            if (cOption == "<") {
              nNewNode = $2("<div/>")[0];
              cNext = aDom[i2 + 1];
              if (cNext == "'" || cNext == '"') {
                sAttr = "";
                j = 2;
                while (aDom[i2 + j] != cNext) {
                  sAttr += aDom[i2 + j];
                  j++;
                }
                if (sAttr == "H") {
                  sAttr = classes.sJUIHeader;
                } else if (sAttr == "F") {
                  sAttr = classes.sJUIFooter;
                }
                if (sAttr.indexOf(".") != -1) {
                  var aSplit = sAttr.split(".");
                  nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
                  nNewNode.className = aSplit[1];
                } else if (sAttr.charAt(0) == "#") {
                  nNewNode.id = sAttr.substr(1, sAttr.length - 1);
                } else {
                  nNewNode.className = sAttr;
                }
                i2 += j;
              }
              insert.append(nNewNode);
              insert = $2(nNewNode);
            } else if (cOption == ">") {
              insert = insert.parent();
            } else if (cOption == "l" && features.bPaginate && features.bLengthChange) {
              featureNode = _fnFeatureHtmlLength(oSettings);
            } else if (cOption == "f" && features.bFilter) {
              featureNode = _fnFeatureHtmlFilter(oSettings);
            } else if (cOption == "r" && features.bProcessing) {
              featureNode = _fnFeatureHtmlProcessing(oSettings);
            } else if (cOption == "t") {
              featureNode = _fnFeatureHtmlTable(oSettings);
            } else if (cOption == "i" && features.bInfo) {
              featureNode = _fnFeatureHtmlInfo(oSettings);
            } else if (cOption == "p" && features.bPaginate) {
              featureNode = _fnFeatureHtmlPaginate(oSettings);
            } else if (DataTable.ext.feature.length !== 0) {
              var aoFeatures = DataTable.ext.feature;
              for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
                if (cOption == aoFeatures[k].cFeature) {
                  featureNode = aoFeatures[k].fnInit(oSettings);
                  break;
                }
              }
            }
            if (featureNode) {
              var aanFeatures = oSettings.aanFeatures;
              if (!aanFeatures[cOption]) {
                aanFeatures[cOption] = [];
              }
              aanFeatures[cOption].push(featureNode);
              insert.append(featureNode);
            }
          }
          holding.replaceWith(insert);
          oSettings.nHolding = null;
        }
        function _fnDetectHeader(aLayout, nThead) {
          var nTrs = $2(nThead).children("tr");
          var nTr, nCell;
          var i2, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
          var bUnique;
          var fnShiftCol = function(a, i3, j) {
            var k2 = a[i3];
            while (k2[j]) {
              j++;
            }
            return j;
          };
          aLayout.splice(0, aLayout.length);
          for (i2 = 0, iLen = nTrs.length; i2 < iLen; i2++) {
            aLayout.push([]);
          }
          for (i2 = 0, iLen = nTrs.length; i2 < iLen; i2++) {
            nTr = nTrs[i2];
            iColumn = 0;
            nCell = nTr.firstChild;
            while (nCell) {
              if (nCell.nodeName.toUpperCase() == "TD" || nCell.nodeName.toUpperCase() == "TH") {
                iColspan = nCell.getAttribute("colspan") * 1;
                iRowspan = nCell.getAttribute("rowspan") * 1;
                iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;
                iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;
                iColShifted = fnShiftCol(aLayout, i2, iColumn);
                bUnique = iColspan === 1 ? true : false;
                for (l = 0; l < iColspan; l++) {
                  for (k = 0; k < iRowspan; k++) {
                    aLayout[i2 + k][iColShifted + l] = {
                      "cell": nCell,
                      "unique": bUnique
                    };
                    aLayout[i2 + k].nTr = nTr;
                  }
                }
              }
              nCell = nCell.nextSibling;
            }
          }
        }
        function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
          var aReturn = [];
          if (!aLayout) {
            aLayout = oSettings.aoHeader;
            if (nHeader) {
              aLayout = [];
              _fnDetectHeader(aLayout, nHeader);
            }
          }
          for (var i2 = 0, iLen = aLayout.length; i2 < iLen; i2++) {
            for (var j = 0, jLen = aLayout[i2].length; j < jLen; j++) {
              if (aLayout[i2][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {
                aReturn[j] = aLayout[i2][j].cell;
              }
            }
          }
          return aReturn;
        }
        function _fnStart(oSettings) {
          var bServerSide = _fnDataSource(oSettings) == "ssp";
          var iInitDisplayStart = oSettings.iInitDisplayStart;
          if (iInitDisplayStart !== undefined2 && iInitDisplayStart !== -1) {
            oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;
            oSettings.iInitDisplayStart = -1;
          }
        }
        function _fnBuildAjax(oSettings, data, fn2) {
          _fnCallbackFire(oSettings, "aoServerParams", "serverParams", [data]);
          if (data && Array.isArray(data)) {
            var tmp = {};
            var rbracket = /(.*?)\[\]$/;
            $2.each(data, function(key, val) {
              var match = val.name.match(rbracket);
              if (match) {
                var name = match[0];
                if (!tmp[name]) {
                  tmp[name] = [];
                }
                tmp[name].push(val.value);
              } else {
                tmp[val.name] = val.value;
              }
            });
            data = tmp;
          }
          var ajaxData;
          var ajax = oSettings.ajax;
          var instance = oSettings.oInstance;
          var callback = function(json) {
            var status = oSettings.jqXHR ? oSettings.jqXHR.status : null;
            if (json === null || typeof status === "number" && status == 204) {
              json = {};
              _fnAjaxDataSrc(oSettings, json, []);
            }
            var error = json.error || json.sError;
            if (error) {
              _fnLog(oSettings, 0, error);
            }
            oSettings.json = json;
            _fnCallbackFire(oSettings, null, "xhr", [oSettings, json, oSettings.jqXHR]);
            fn2(json);
          };
          if ($2.isPlainObject(ajax) && ajax.data) {
            ajaxData = ajax.data;
            var newData = typeof ajaxData === "function" ? ajaxData(data, oSettings) : (
              // fn can manipulate data or return
              ajaxData
            );
            data = typeof ajaxData === "function" && newData ? newData : $2.extend(true, data, newData);
            delete ajax.data;
          }
          var baseAjax = {
            "data": data,
            "success": callback,
            "dataType": "json",
            "cache": false,
            "type": oSettings.sServerMethod,
            "error": function(xhr, error, thrown) {
              var ret = _fnCallbackFire(oSettings, null, "xhr", [oSettings, null, oSettings.jqXHR]);
              if ($2.inArray(true, ret) === -1) {
                if (error == "parsererror") {
                  _fnLog(oSettings, 0, "Invalid JSON response", 1);
                } else if (xhr.readyState === 4) {
                  _fnLog(oSettings, 0, "Ajax error", 7);
                }
              }
              _fnProcessingDisplay(oSettings, false);
            }
          };
          oSettings.oAjaxData = data;
          _fnCallbackFire(oSettings, null, "preXhr", [oSettings, data]);
          if (oSettings.fnServerData) {
            oSettings.fnServerData.call(
              instance,
              oSettings.sAjaxSource,
              $2.map(data, function(val, key) {
                return { name: key, value: val };
              }),
              callback,
              oSettings
            );
          } else if (oSettings.sAjaxSource || typeof ajax === "string") {
            oSettings.jqXHR = $2.ajax($2.extend(baseAjax, {
              url: ajax || oSettings.sAjaxSource
            }));
          } else if (typeof ajax === "function") {
            oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
          } else {
            oSettings.jqXHR = $2.ajax($2.extend(baseAjax, ajax));
            ajax.data = ajaxData;
          }
        }
        function _fnAjaxUpdate(settings) {
          settings.iDraw++;
          _fnProcessingDisplay(settings, true);
          _fnBuildAjax(
            settings,
            _fnAjaxParameters(settings),
            function(json) {
              _fnAjaxUpdateDraw(settings, json);
            }
          );
        }
        function _fnAjaxParameters(settings) {
          var columns = settings.aoColumns, columnCount = columns.length, features = settings.oFeatures, preSearch = settings.oPreviousSearch, preColSearch = settings.aoPreSearchCols, i2, data = [], dataProp, column, columnSearch, sort = _fnSortFlatten(settings), displayStart = settings._iDisplayStart, displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;
          var param = function(name, value) {
            data.push({ "name": name, "value": value });
          };
          param("sEcho", settings.iDraw);
          param("iColumns", columnCount);
          param("sColumns", _pluck(columns, "sName").join(","));
          param("iDisplayStart", displayStart);
          param("iDisplayLength", displayLength);
          var d = {
            draw: settings.iDraw,
            columns: [],
            order: [],
            start: displayStart,
            length: displayLength,
            search: {
              value: preSearch.sSearch,
              regex: preSearch.bRegex
            }
          };
          for (i2 = 0; i2 < columnCount; i2++) {
            column = columns[i2];
            columnSearch = preColSearch[i2];
            dataProp = typeof column.mData == "function" ? "function" : column.mData;
            d.columns.push({
              data: dataProp,
              name: column.sName,
              searchable: column.bSearchable,
              orderable: column.bSortable,
              search: {
                value: columnSearch.sSearch,
                regex: columnSearch.bRegex
              }
            });
            param("mDataProp_" + i2, dataProp);
            if (features.bFilter) {
              param("sSearch_" + i2, columnSearch.sSearch);
              param("bRegex_" + i2, columnSearch.bRegex);
              param("bSearchable_" + i2, column.bSearchable);
            }
            if (features.bSort) {
              param("bSortable_" + i2, column.bSortable);
            }
          }
          if (features.bFilter) {
            param("sSearch", preSearch.sSearch);
            param("bRegex", preSearch.bRegex);
          }
          if (features.bSort) {
            $2.each(sort, function(i3, val) {
              d.order.push({ column: val.col, dir: val.dir });
              param("iSortCol_" + i3, val.col);
              param("sSortDir_" + i3, val.dir);
            });
            param("iSortingCols", sort.length);
          }
          var legacy = DataTable.ext.legacy.ajax;
          if (legacy === null) {
            return settings.sAjaxSource ? data : d;
          }
          return legacy ? data : d;
        }
        function _fnAjaxUpdateDraw(settings, json) {
          var compat = function(old, modern) {
            return json[old] !== undefined2 ? json[old] : json[modern];
          };
          var data = _fnAjaxDataSrc(settings, json);
          var draw = compat("sEcho", "draw");
          var recordsTotal = compat("iTotalRecords", "recordsTotal");
          var recordsFiltered = compat("iTotalDisplayRecords", "recordsFiltered");
          if (draw !== undefined2) {
            if (draw * 1 < settings.iDraw) {
              return;
            }
            settings.iDraw = draw * 1;
          }
          if (!data) {
            data = [];
          }
          _fnClearTable(settings);
          settings._iRecordsTotal = parseInt(recordsTotal, 10);
          settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
          for (var i2 = 0, ien = data.length; i2 < ien; i2++) {
            _fnAddData(settings, data[i2]);
          }
          settings.aiDisplay = settings.aiDisplayMaster.slice();
          _fnDraw(settings, true);
          if (!settings._bInitComplete) {
            _fnInitComplete(settings, json);
          }
          _fnProcessingDisplay(settings, false);
        }
        function _fnAjaxDataSrc(oSettings, json, write2) {
          var dataSrc = $2.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined2 ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp;
          if (!write2) {
            if (dataSrc === "data") {
              return json.aaData || json[dataSrc];
            }
            return dataSrc !== "" ? _fnGetObjectDataFn(dataSrc)(json) : json;
          }
          _fnSetObjectDataFn(dataSrc)(json, write2);
        }
        function _fnFeatureHtmlFilter(settings) {
          var classes = settings.oClasses;
          var tableId = settings.sTableId;
          var language = settings.oLanguage;
          var previousSearch = settings.oPreviousSearch;
          var features = settings.aanFeatures;
          var input = '<input type="search" class="' + classes.sFilterInput + '"/>';
          var str = language.sSearch;
          str = str.match(/_INPUT_/) ? str.replace("_INPUT_", input) : str + input;
          var filter = $2("<div/>", {
            "id": !features.f ? tableId + "_filter" : null,
            "class": classes.sFilter
          }).append($2("<label/>").append(str));
          var searchFn = function(event) {
            var n = features.f;
            var val = !this.value ? "" : this.value;
            if (previousSearch.return && event.key !== "Enter") {
              return;
            }
            if (val != previousSearch.sSearch) {
              _fnFilterComplete(settings, {
                "sSearch": val,
                "bRegex": previousSearch.bRegex,
                "bSmart": previousSearch.bSmart,
                "bCaseInsensitive": previousSearch.bCaseInsensitive,
                "return": previousSearch.return
              });
              settings._iDisplayStart = 0;
              _fnDraw(settings);
            }
          };
          var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === "ssp" ? 400 : 0;
          var jqFilter = $2("input", filter).val(previousSearch.sSearch).attr("placeholder", language.sSearchPlaceholder).on(
            "keyup.DT search.DT input.DT paste.DT cut.DT",
            searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn
          ).on("mouseup", function(e) {
            setTimeout(function() {
              searchFn.call(jqFilter[0], e);
            }, 10);
          }).on("keypress.DT", function(e) {
            if (e.keyCode == 13) {
              return false;
            }
          }).attr("aria-controls", tableId);
          $2(settings.nTable).on("search.dt.DT", function(ev, s) {
            if (settings === s) {
              try {
                if (jqFilter[0] !== document2.activeElement) {
                  jqFilter.val(previousSearch.sSearch);
                }
              } catch (e) {
              }
            }
          });
          return filter[0];
        }
        function _fnFilterComplete(oSettings, oInput, iForce) {
          var oPrevSearch = oSettings.oPreviousSearch;
          var aoPrevSearch = oSettings.aoPreSearchCols;
          var fnSaveFilter = function(oFilter) {
            oPrevSearch.sSearch = oFilter.sSearch;
            oPrevSearch.bRegex = oFilter.bRegex;
            oPrevSearch.bSmart = oFilter.bSmart;
            oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
            oPrevSearch.return = oFilter.return;
          };
          var fnRegex = function(o) {
            return o.bEscapeRegex !== undefined2 ? !o.bEscapeRegex : o.bRegex;
          };
          _fnColumnTypes(oSettings);
          if (_fnDataSource(oSettings) != "ssp") {
            _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive, oInput.return);
            fnSaveFilter(oInput);
            for (var i2 = 0; i2 < aoPrevSearch.length; i2++) {
              _fnFilterColumn(
                oSettings,
                aoPrevSearch[i2].sSearch,
                i2,
                fnRegex(aoPrevSearch[i2]),
                aoPrevSearch[i2].bSmart,
                aoPrevSearch[i2].bCaseInsensitive
              );
            }
            _fnFilterCustom(oSettings);
          } else {
            fnSaveFilter(oInput);
          }
          oSettings.bFiltered = true;
          _fnCallbackFire(oSettings, null, "search", [oSettings]);
        }
        function _fnFilterCustom(settings) {
          var filters = DataTable.ext.search;
          var displayRows = settings.aiDisplay;
          var row, rowIdx;
          for (var i2 = 0, ien = filters.length; i2 < ien; i2++) {
            var rows = [];
            for (var j = 0, jen = displayRows.length; j < jen; j++) {
              rowIdx = displayRows[j];
              row = settings.aoData[rowIdx];
              if (filters[i2](settings, row._aFilterData, rowIdx, row._aData, j)) {
                rows.push(rowIdx);
              }
            }
            displayRows.length = 0;
            $2.merge(displayRows, rows);
          }
        }
        function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
          if (searchStr === "") {
            return;
          }
          var data;
          var out = [];
          var display = settings.aiDisplay;
          var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);
          for (var i2 = 0; i2 < display.length; i2++) {
            data = settings.aoData[display[i2]]._aFilterData[colIdx];
            if (rpSearch.test(data)) {
              out.push(display[i2]);
            }
          }
          settings.aiDisplay = out;
        }
        function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
          var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);
          var prevSearch = settings.oPreviousSearch.sSearch;
          var displayMaster = settings.aiDisplayMaster;
          var display, invalidated, i2;
          var filtered = [];
          if (DataTable.ext.search.length !== 0) {
            force = true;
          }
          invalidated = _fnFilterData(settings);
          if (input.length <= 0) {
            settings.aiDisplay = displayMaster.slice();
          } else {
            if (invalidated || force || regex || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted) {
              settings.aiDisplay = displayMaster.slice();
            }
            display = settings.aiDisplay;
            for (i2 = 0; i2 < display.length; i2++) {
              if (rpSearch.test(settings.aoData[display[i2]]._sFilterRow)) {
                filtered.push(display[i2]);
              }
            }
            settings.aiDisplay = filtered;
          }
        }
        function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
          search = regex ? search : _fnEscapeRegex(search);
          if (smart) {
            var a = $2.map(search.match(/"[^"]+"|[^ ]+/g) || [""], function(word) {
              if (word.charAt(0) === '"') {
                var m = word.match(/^"(.*)"$/);
                word = m ? m[1] : word;
              }
              return word.replace('"', "");
            });
            search = "^(?=.*?" + a.join(")(?=.*?") + ").*$";
          }
          return new RegExp(search, caseInsensitive ? "i" : "");
        }
        var _fnEscapeRegex = DataTable.util.escapeRegex;
        var __filter_div = $2("<div>")[0];
        var __filter_div_textContent = __filter_div.textContent !== undefined2;
        function _fnFilterData(settings) {
          var columns = settings.aoColumns;
          var column;
          var i2, j, ien, jen, filterData, cellData, row;
          var wasInvalidated = false;
          for (i2 = 0, ien = settings.aoData.length; i2 < ien; i2++) {
            row = settings.aoData[i2];
            if (!row._aFilterData) {
              filterData = [];
              for (j = 0, jen = columns.length; j < jen; j++) {
                column = columns[j];
                if (column.bSearchable) {
                  cellData = _fnGetCellData(settings, i2, j, "filter");
                  if (cellData === null) {
                    cellData = "";
                  }
                  if (typeof cellData !== "string" && cellData.toString) {
                    cellData = cellData.toString();
                  }
                } else {
                  cellData = "";
                }
                if (cellData.indexOf && cellData.indexOf("&") !== -1) {
                  __filter_div.innerHTML = cellData;
                  cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;
                }
                if (cellData.replace) {
                  cellData = cellData.replace(/[\r\n\u2028]/g, "");
                }
                filterData.push(cellData);
              }
              row._aFilterData = filterData;
              row._sFilterRow = filterData.join("  ");
              wasInvalidated = true;
            }
          }
          return wasInvalidated;
        }
        function _fnSearchToCamel(obj) {
          return {
            search: obj.sSearch,
            smart: obj.bSmart,
            regex: obj.bRegex,
            caseInsensitive: obj.bCaseInsensitive
          };
        }
        function _fnSearchToHung(obj) {
          return {
            sSearch: obj.search,
            bSmart: obj.smart,
            bRegex: obj.regex,
            bCaseInsensitive: obj.caseInsensitive
          };
        }
        function _fnFeatureHtmlInfo(settings) {
          var tid = settings.sTableId, nodes = settings.aanFeatures.i, n = $2("<div/>", {
            "class": settings.oClasses.sInfo,
            "id": !nodes ? tid + "_info" : null
          });
          if (!nodes) {
            settings.aoDrawCallback.push({
              "fn": _fnUpdateInfo,
              "sName": "information"
            });
            n.attr("role", "status").attr("aria-live", "polite");
            $2(settings.nTable).attr("aria-describedby", tid + "_info");
          }
          return n[0];
        }
        function _fnUpdateInfo(settings) {
          var nodes = settings.aanFeatures.i;
          if (nodes.length === 0) {
            return;
          }
          var lang = settings.oLanguage, start2 = settings._iDisplayStart + 1, end2 = settings.fnDisplayEnd(), max2 = settings.fnRecordsTotal(), total = settings.fnRecordsDisplay(), out = total ? lang.sInfo : lang.sInfoEmpty;
          if (total !== max2) {
            out += " " + lang.sInfoFiltered;
          }
          out += lang.sInfoPostFix;
          out = _fnInfoMacros(settings, out);
          var callback = lang.fnInfoCallback;
          if (callback !== null) {
            out = callback.call(
              settings.oInstance,
              settings,
              start2,
              end2,
              max2,
              total,
              out
            );
          }
          $2(nodes).html(out);
        }
        function _fnInfoMacros(settings, str) {
          var formatter = settings.fnFormatNumber, start2 = settings._iDisplayStart + 1, len = settings._iDisplayLength, vis = settings.fnRecordsDisplay(), all = len === -1;
          return str.replace(/_START_/g, formatter.call(settings, start2)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start2 / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
        }
        function _fnInitialise(settings) {
          var i2, iLen, iAjaxStart = settings.iInitDisplayStart;
          var columns = settings.aoColumns, column;
          var features = settings.oFeatures;
          var deferLoading = settings.bDeferLoading;
          if (!settings.bInitialised) {
            setTimeout(function() {
              _fnInitialise(settings);
            }, 200);
            return;
          }
          _fnAddOptionsHtml(settings);
          _fnBuildHead(settings);
          _fnDrawHead(settings, settings.aoHeader);
          _fnDrawHead(settings, settings.aoFooter);
          _fnProcessingDisplay(settings, true);
          if (features.bAutoWidth) {
            _fnCalculateColumnWidths(settings);
          }
          for (i2 = 0, iLen = columns.length; i2 < iLen; i2++) {
            column = columns[i2];
            if (column.sWidth) {
              column.nTh.style.width = _fnStringToCss(column.sWidth);
            }
          }
          _fnCallbackFire(settings, null, "preInit", [settings]);
          _fnReDraw(settings);
          var dataSrc = _fnDataSource(settings);
          if (dataSrc != "ssp" || deferLoading) {
            if (dataSrc == "ajax") {
              _fnBuildAjax(settings, [], function(json) {
                var aData = _fnAjaxDataSrc(settings, json);
                for (i2 = 0; i2 < aData.length; i2++) {
                  _fnAddData(settings, aData[i2]);
                }
                settings.iInitDisplayStart = iAjaxStart;
                _fnReDraw(settings);
                _fnProcessingDisplay(settings, false);
                _fnInitComplete(settings, json);
              }, settings);
            } else {
              _fnProcessingDisplay(settings, false);
              _fnInitComplete(settings);
            }
          }
        }
        function _fnInitComplete(settings, json) {
          settings._bInitComplete = true;
          if (json || settings.oInit.aaData) {
            _fnAdjustColumnSizing(settings);
          }
          _fnCallbackFire(settings, null, "plugin-init", [settings, json]);
          _fnCallbackFire(settings, "aoInitComplete", "init", [settings, json]);
        }
        function _fnLengthChange(settings, val) {
          var len = parseInt(val, 10);
          settings._iDisplayLength = len;
          _fnLengthOverflow(settings);
          _fnCallbackFire(settings, null, "length", [settings, len]);
        }
        function _fnFeatureHtmlLength(settings) {
          var classes = settings.oClasses, tableId = settings.sTableId, menu = settings.aLengthMenu, d2 = Array.isArray(menu[0]), lengths = d2 ? menu[0] : menu, language = d2 ? menu[1] : menu;
          var select = $2("<select/>", {
            "name": tableId + "_length",
            "aria-controls": tableId,
            "class": classes.sLengthSelect
          });
          for (var i2 = 0, ien = lengths.length; i2 < ien; i2++) {
            select[0][i2] = new Option(
              typeof language[i2] === "number" ? settings.fnFormatNumber(language[i2]) : language[i2],
              lengths[i2]
            );
          }
          var div = $2("<div><label/></div>").addClass(classes.sLength);
          if (!settings.aanFeatures.l) {
            div[0].id = tableId + "_length";
          }
          div.children().append(
            settings.oLanguage.sLengthMenu.replace("_MENU_", select[0].outerHTML)
          );
          $2("select", div).val(settings._iDisplayLength).on("change.DT", function(e) {
            _fnLengthChange(settings, $2(this).val());
            _fnDraw(settings);
          });
          $2(settings.nTable).on("length.dt.DT", function(e, s, len) {
            if (settings === s) {
              $2("select", div).val(len);
            }
          });
          return div[0];
        }
        function _fnFeatureHtmlPaginate(settings) {
          var type = settings.sPaginationType, plugin = DataTable.ext.pager[type], modern = typeof plugin === "function", redraw = function(settings2) {
            _fnDraw(settings2);
          }, node = $2("<div/>").addClass(settings.oClasses.sPaging + type)[0], features = settings.aanFeatures;
          if (!modern) {
            plugin.fnInit(settings, node, redraw);
          }
          if (!features.p) {
            node.id = settings.sTableId + "_paginate";
            settings.aoDrawCallback.push({
              "fn": function(settings2) {
                if (modern) {
                  var start2 = settings2._iDisplayStart, len = settings2._iDisplayLength, visRecords = settings2.fnRecordsDisplay(), all = len === -1, page = all ? 0 : Math.ceil(start2 / len), pages = all ? 1 : Math.ceil(visRecords / len), buttons = plugin(page, pages), i2, ien;
                  for (i2 = 0, ien = features.p.length; i2 < ien; i2++) {
                    _fnRenderer(settings2, "pageButton")(
                      settings2,
                      features.p[i2],
                      i2,
                      buttons,
                      page,
                      pages
                    );
                  }
                } else {
                  plugin.fnUpdate(settings2, redraw);
                }
              },
              "sName": "pagination"
            });
          }
          return node;
        }
        function _fnPageChange(settings, action, redraw) {
          var start2 = settings._iDisplayStart, len = settings._iDisplayLength, records = settings.fnRecordsDisplay();
          if (records === 0 || len === -1) {
            start2 = 0;
          } else if (typeof action === "number") {
            start2 = action * len;
            if (start2 > records) {
              start2 = 0;
            }
          } else if (action == "first") {
            start2 = 0;
          } else if (action == "previous") {
            start2 = len >= 0 ? start2 - len : 0;
            if (start2 < 0) {
              start2 = 0;
            }
          } else if (action == "next") {
            if (start2 + len < records) {
              start2 += len;
            }
          } else if (action == "last") {
            start2 = Math.floor((records - 1) / len) * len;
          } else {
            _fnLog(settings, 0, "Unknown paging action: " + action, 5);
          }
          var changed = settings._iDisplayStart !== start2;
          settings._iDisplayStart = start2;
          if (changed) {
            _fnCallbackFire(settings, null, "page", [settings]);
            if (redraw) {
              _fnDraw(settings);
            }
          }
          return changed;
        }
        function _fnFeatureHtmlProcessing(settings) {
          return $2("<div/>", {
            "id": !settings.aanFeatures.r ? settings.sTableId + "_processing" : null,
            "class": settings.oClasses.sProcessing
          }).html(settings.oLanguage.sProcessing).append("<div><div></div><div></div><div></div><div></div></div>").insertBefore(settings.nTable)[0];
        }
        function _fnProcessingDisplay(settings, show) {
          if (settings.oFeatures.bProcessing) {
            $2(settings.aanFeatures.r).css("display", show ? "block" : "none");
          }
          _fnCallbackFire(settings, null, "processing", [settings, show]);
        }
        function _fnFeatureHtmlTable(settings) {
          var table = $2(settings.nTable);
          var scroll = settings.oScroll;
          if (scroll.sX === "" && scroll.sY === "") {
            return settings.nTable;
          }
          var scrollX = scroll.sX;
          var scrollY = scroll.sY;
          var classes = settings.oClasses;
          var caption = table.children("caption");
          var captionSide = caption.length ? caption[0]._captionSide : null;
          var headerClone = $2(table[0].cloneNode(false));
          var footerClone = $2(table[0].cloneNode(false));
          var footer = table.children("tfoot");
          var _div = "<div/>";
          var size = function(s) {
            return !s ? null : _fnStringToCss(s);
          };
          if (!footer.length) {
            footer = null;
          }
          var scroller = $2(_div, { "class": classes.sScrollWrapper }).append(
            $2(_div, { "class": classes.sScrollHead }).css({
              overflow: "hidden",
              position: "relative",
              border: 0,
              width: scrollX ? size(scrollX) : "100%"
            }).append(
              $2(_div, { "class": classes.sScrollHeadInner }).css({
                "box-sizing": "content-box",
                width: scroll.sXInner || "100%"
              }).append(
                headerClone.removeAttr("id").css("margin-left", 0).append(captionSide === "top" ? caption : null).append(
                  table.children("thead")
                )
              )
            )
          ).append(
            $2(_div, { "class": classes.sScrollBody }).css({
              position: "relative",
              overflow: "auto",
              width: size(scrollX)
            }).append(table)
          );
          if (footer) {
            scroller.append(
              $2(_div, { "class": classes.sScrollFoot }).css({
                overflow: "hidden",
                border: 0,
                width: scrollX ? size(scrollX) : "100%"
              }).append(
                $2(_div, { "class": classes.sScrollFootInner }).append(
                  footerClone.removeAttr("id").css("margin-left", 0).append(captionSide === "bottom" ? caption : null).append(
                    table.children("tfoot")
                  )
                )
              )
            );
          }
          var children = scroller.children();
          var scrollHead = children[0];
          var scrollBody = children[1];
          var scrollFoot = footer ? children[2] : null;
          if (scrollX) {
            $2(scrollBody).on("scroll.DT", function(e) {
              var scrollLeft = this.scrollLeft;
              scrollHead.scrollLeft = scrollLeft;
              if (footer) {
                scrollFoot.scrollLeft = scrollLeft;
              }
            });
          }
          $2(scrollBody).css("max-height", scrollY);
          if (!scroll.bCollapse) {
            $2(scrollBody).css("height", scrollY);
          }
          settings.nScrollHead = scrollHead;
          settings.nScrollBody = scrollBody;
          settings.nScrollFoot = scrollFoot;
          settings.aoDrawCallback.push({
            "fn": _fnScrollDraw,
            "sName": "scrolling"
          });
          return scroller[0];
        }
        function _fnScrollDraw(settings) {
          var scroll = settings.oScroll, scrollX = scroll.sX, scrollXInner = scroll.sXInner, scrollY = scroll.sY, barWidth = scroll.iBarWidth, divHeader = $2(settings.nScrollHead), divHeaderStyle = divHeader[0].style, divHeaderInner = divHeader.children("div"), divHeaderInnerStyle = divHeaderInner[0].style, divHeaderTable = divHeaderInner.children("table"), divBodyEl = settings.nScrollBody, divBody = $2(divBodyEl), divBodyStyle = divBodyEl.style, divFooter = $2(settings.nScrollFoot), divFooterInner = divFooter.children("div"), divFooterTable = divFooterInner.children("table"), header = $2(settings.nTHead), table = $2(settings.nTable), tableEl = table[0], tableStyle = tableEl.style, footer = settings.nTFoot ? $2(settings.nTFoot) : null, browser = settings.oBrowser, ie67 = browser.bScrollOversize, dtHeaderCells = _pluck(settings.aoColumns, "nTh"), headerTrgEls, footerTrgEls, headerSrcEls, footerSrcEls, headerCopy, footerCopy, headerWidths = [], footerWidths = [], headerContent = [], footerContent = [], idx, correction, sanityWidth, zeroOut = function(nSizer) {
            var style = nSizer.style;
            style.paddingTop = "0";
            style.paddingBottom = "0";
            style.borderTopWidth = "0";
            style.borderBottomWidth = "0";
            style.height = 0;
          };
          var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
          if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined2) {
            settings.scrollBarVis = scrollBarVis;
            _fnAdjustColumnSizing(settings);
            return;
          } else {
            settings.scrollBarVis = scrollBarVis;
          }
          table.children("thead, tfoot").remove();
          if (footer) {
            footerCopy = footer.clone().prependTo(table);
            footerTrgEls = footer.find("tr");
            footerSrcEls = footerCopy.find("tr");
            footerCopy.find("[id]").removeAttr("id");
          }
          headerCopy = header.clone().prependTo(table);
          headerTrgEls = header.find("tr");
          headerSrcEls = headerCopy.find("tr");
          headerCopy.find("th, td").removeAttr("tabindex");
          headerCopy.find("[id]").removeAttr("id");
          if (!scrollX) {
            divBodyStyle.width = "100%";
            divHeader[0].style.width = "100%";
          }
          $2.each(_fnGetUniqueThs(settings, headerCopy), function(i2, el) {
            idx = _fnVisibleToColumnIndex(settings, i2);
            el.style.width = settings.aoColumns[idx].sWidth;
          });
          if (footer) {
            _fnApplyToChildren(function(n) {
              n.style.width = "";
            }, footerSrcEls);
          }
          sanityWidth = table.outerWidth();
          if (scrollX === "") {
            tableStyle.width = "100%";
            if (ie67 && (table.find("tbody").height() > divBodyEl.offsetHeight || divBody.css("overflow-y") == "scroll")) {
              tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
            }
            sanityWidth = table.outerWidth();
          } else if (scrollXInner !== "") {
            tableStyle.width = _fnStringToCss(scrollXInner);
            sanityWidth = table.outerWidth();
          }
          _fnApplyToChildren(zeroOut, headerSrcEls);
          _fnApplyToChildren(function(nSizer) {
            var style = window2.getComputedStyle ? window2.getComputedStyle(nSizer).width : _fnStringToCss($2(nSizer).width());
            headerContent.push(nSizer.innerHTML);
            headerWidths.push(style);
          }, headerSrcEls);
          _fnApplyToChildren(function(nToSize, i2) {
            nToSize.style.width = headerWidths[i2];
          }, headerTrgEls);
          $2(headerSrcEls).css("height", 0);
          if (footer) {
            _fnApplyToChildren(zeroOut, footerSrcEls);
            _fnApplyToChildren(function(nSizer) {
              footerContent.push(nSizer.innerHTML);
              footerWidths.push(_fnStringToCss($2(nSizer).css("width")));
            }, footerSrcEls);
            _fnApplyToChildren(function(nToSize, i2) {
              nToSize.style.width = footerWidths[i2];
            }, footerTrgEls);
            $2(footerSrcEls).height(0);
          }
          _fnApplyToChildren(function(nSizer, i2) {
            nSizer.innerHTML = '<div class="dataTables_sizing">' + headerContent[i2] + "</div>";
            nSizer.childNodes[0].style.height = "0";
            nSizer.childNodes[0].style.overflow = "hidden";
            nSizer.style.width = headerWidths[i2];
          }, headerSrcEls);
          if (footer) {
            _fnApplyToChildren(function(nSizer, i2) {
              nSizer.innerHTML = '<div class="dataTables_sizing">' + footerContent[i2] + "</div>";
              nSizer.childNodes[0].style.height = "0";
              nSizer.childNodes[0].style.overflow = "hidden";
              nSizer.style.width = footerWidths[i2];
            }, footerSrcEls);
          }
          if (Math.round(table.outerWidth()) < Math.round(sanityWidth)) {
            correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css("overflow-y") == "scroll" ? sanityWidth + barWidth : sanityWidth;
            if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css("overflow-y") == "scroll")) {
              tableStyle.width = _fnStringToCss(correction - barWidth);
            }
            if (scrollX === "" || scrollXInner !== "") {
              _fnLog(settings, 1, "Possible column misalignment", 6);
            }
          } else {
            correction = "100%";
          }
          divBodyStyle.width = _fnStringToCss(correction);
          divHeaderStyle.width = _fnStringToCss(correction);
          if (footer) {
            settings.nScrollFoot.style.width = _fnStringToCss(correction);
          }
          if (!scrollY) {
            if (ie67) {
              divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
            }
          }
          var iOuterWidth = table.outerWidth();
          divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
          divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);
          var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css("overflow-y") == "scroll";
          var padding = "padding" + (browser.bScrollbarLeft ? "Left" : "Right");
          divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";
          if (footer) {
            divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
            divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
            divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px";
          }
          table.children("colgroup").insertBefore(table.children("thead"));
          divBody.trigger("scroll");
          if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
            divBodyEl.scrollTop = 0;
          }
        }
        function _fnApplyToChildren(fn2, an1, an2) {
          var index = 0, i2 = 0, iLen = an1.length;
          var nNode1, nNode2;
          while (i2 < iLen) {
            nNode1 = an1[i2].firstChild;
            nNode2 = an2 ? an2[i2].firstChild : null;
            while (nNode1) {
              if (nNode1.nodeType === 1) {
                if (an2) {
                  fn2(nNode1, nNode2, index);
                } else {
                  fn2(nNode1, index);
                }
                index++;
              }
              nNode1 = nNode1.nextSibling;
              nNode2 = an2 ? nNode2.nextSibling : null;
            }
            i2++;
          }
        }
        var __re_html_remove = /<.*?>/g;
        function _fnCalculateColumnWidths(oSettings) {
          var table = oSettings.nTable, columns = oSettings.aoColumns, scroll = oSettings.oScroll, scrollY = scroll.sY, scrollX = scroll.sX, scrollXInner = scroll.sXInner, columnCount = columns.length, visibleColumns = _fnGetColumns(oSettings, "bVisible"), headerCells = $2("th", oSettings.nTHead), tableWidthAttr = table.getAttribute("width"), tableContainer = table.parentNode, userInputs = false, i2, column, columnIdx, width, outerWidth, browser = oSettings.oBrowser, ie67 = browser.bScrollOversize;
          var styleWidth = table.style.width;
          if (styleWidth && styleWidth.indexOf("%") !== -1) {
            tableWidthAttr = styleWidth;
          }
          for (i2 = 0; i2 < visibleColumns.length; i2++) {
            column = columns[visibleColumns[i2]];
            if (column.sWidth !== null) {
              column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);
              userInputs = true;
            }
          }
          if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {
            for (i2 = 0; i2 < columnCount; i2++) {
              var colIdx = _fnVisibleToColumnIndex(oSettings, i2);
              if (colIdx !== null) {
                columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i2).width());
              }
            }
          } else {
            var tmpTable = $2(table).clone().css("visibility", "hidden").removeAttr("id");
            tmpTable.find("tbody tr").remove();
            var tr = $2("<tr/>").appendTo(tmpTable.find("tbody"));
            tmpTable.find("thead, tfoot").remove();
            tmpTable.append($2(oSettings.nTHead).clone()).append($2(oSettings.nTFoot).clone());
            tmpTable.find("tfoot th, tfoot td").css("width", "");
            headerCells = _fnGetUniqueThs(oSettings, tmpTable.find("thead")[0]);
            for (i2 = 0; i2 < visibleColumns.length; i2++) {
              column = columns[visibleColumns[i2]];
              headerCells[i2].style.width = column.sWidthOrig !== null && column.sWidthOrig !== "" ? _fnStringToCss(column.sWidthOrig) : "";
              if (column.sWidthOrig && scrollX) {
                $2(headerCells[i2]).append($2("<div/>").css({
                  width: column.sWidthOrig,
                  margin: 0,
                  padding: 0,
                  border: 0,
                  height: 1
                }));
              }
            }
            if (oSettings.aoData.length) {
              for (i2 = 0; i2 < visibleColumns.length; i2++) {
                columnIdx = visibleColumns[i2];
                column = columns[columnIdx];
                $2(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);
              }
            }
            $2("[name]", tmpTable).removeAttr("name");
            var holder = $2("<div/>").css(
              scrollX || scrollY ? {
                position: "absolute",
                top: 0,
                left: 0,
                height: 1,
                right: 0,
                overflow: "hidden"
              } : {}
            ).append(tmpTable).appendTo(tableContainer);
            if (scrollX && scrollXInner) {
              tmpTable.width(scrollXInner);
            } else if (scrollX) {
              tmpTable.css("width", "auto");
              tmpTable.removeAttr("width");
              if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {
                tmpTable.width(tableContainer.clientWidth);
              }
            } else if (scrollY) {
              tmpTable.width(tableContainer.clientWidth);
            } else if (tableWidthAttr) {
              tmpTable.width(tableWidthAttr);
            }
            var total = 0;
            for (i2 = 0; i2 < visibleColumns.length; i2++) {
              var cell = $2(headerCells[i2]);
              var border = cell.outerWidth() - cell.width();
              var bounding = browser.bBounding ? Math.ceil(headerCells[i2].getBoundingClientRect().width) : cell.outerWidth();
              total += bounding;
              columns[visibleColumns[i2]].sWidth = _fnStringToCss(bounding - border);
            }
            table.style.width = _fnStringToCss(total);
            holder.remove();
          }
          if (tableWidthAttr) {
            table.style.width = _fnStringToCss(tableWidthAttr);
          }
          if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
            var bindResize = function() {
              $2(window2).on("resize.DT-" + oSettings.sInstance, _fnThrottle(function() {
                _fnAdjustColumnSizing(oSettings);
              }));
            };
            if (ie67) {
              setTimeout(bindResize, 1e3);
            } else {
              bindResize();
            }
            oSettings._reszEvt = true;
          }
        }
        var _fnThrottle = DataTable.util.throttle;
        function _fnConvertToWidth(width, parent) {
          if (!width) {
            return 0;
          }
          var n = $2("<div/>").css("width", _fnStringToCss(width)).appendTo(parent || document2.body);
          var val = n[0].offsetWidth;
          n.remove();
          return val;
        }
        function _fnGetWidestNode(settings, colIdx) {
          var idx = _fnGetMaxLenString(settings, colIdx);
          if (idx < 0) {
            return null;
          }
          var data = settings.aoData[idx];
          return !data.nTr ? (
            // Might not have been created when deferred rendering
            $2("<td/>").html(_fnGetCellData(settings, idx, colIdx, "display"))[0]
          ) : data.anCells[colIdx];
        }
        function _fnGetMaxLenString(settings, colIdx) {
          var s, max2 = -1, maxIdx = -1;
          for (var i2 = 0, ien = settings.aoData.length; i2 < ien; i2++) {
            s = _fnGetCellData(settings, i2, colIdx, "display") + "";
            s = s.replace(__re_html_remove, "");
            s = s.replace(/&nbsp;/g, " ");
            if (s.length > max2) {
              max2 = s.length;
              maxIdx = i2;
            }
          }
          return maxIdx;
        }
        function _fnStringToCss(s) {
          if (s === null) {
            return "0px";
          }
          if (typeof s == "number") {
            return s < 0 ? "0px" : s + "px";
          }
          return s.match(/\d$/) ? s + "px" : s;
        }
        function _fnSortFlatten(settings) {
          var i2, iLen, k, kLen, aSort = [], aiOrig = [], aoColumns = settings.aoColumns, aDataSort, iCol, sType, srcCol, fixed = settings.aaSortingFixed, fixedObj = $2.isPlainObject(fixed), nestedSort = [], add = function(a) {
            if (a.length && !Array.isArray(a[0])) {
              nestedSort.push(a);
            } else {
              $2.merge(nestedSort, a);
            }
          };
          if (Array.isArray(fixed)) {
            add(fixed);
          }
          if (fixedObj && fixed.pre) {
            add(fixed.pre);
          }
          add(settings.aaSorting);
          if (fixedObj && fixed.post) {
            add(fixed.post);
          }
          for (i2 = 0; i2 < nestedSort.length; i2++) {
            srcCol = nestedSort[i2][0];
            aDataSort = aoColumns[srcCol].aDataSort;
            for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
              iCol = aDataSort[k];
              sType = aoColumns[iCol].sType || "string";
              if (nestedSort[i2]._idx === undefined2) {
                nestedSort[i2]._idx = $2.inArray(nestedSort[i2][1], aoColumns[iCol].asSorting);
              }
              aSort.push({
                src: srcCol,
                col: iCol,
                dir: nestedSort[i2][1],
                index: nestedSort[i2]._idx,
                type: sType,
                formatter: DataTable.ext.type.order[sType + "-pre"]
              });
            }
          }
          return aSort;
        }
        function _fnSort(oSettings) {
          var i2, ien, iLen, j, jLen, k, kLen, sDataType, nTh, aiOrig = [], oExtSort = DataTable.ext.type.order, aoData = oSettings.aoData, aoColumns = oSettings.aoColumns, aDataSort, data, iCol, sType, oSort, formatters = 0, sortCol, displayMaster = oSettings.aiDisplayMaster, aSort;
          _fnColumnTypes(oSettings);
          aSort = _fnSortFlatten(oSettings);
          for (i2 = 0, ien = aSort.length; i2 < ien; i2++) {
            sortCol = aSort[i2];
            if (sortCol.formatter) {
              formatters++;
            }
            _fnSortData(oSettings, sortCol.col);
          }
          if (_fnDataSource(oSettings) != "ssp" && aSort.length !== 0) {
            for (i2 = 0, iLen = displayMaster.length; i2 < iLen; i2++) {
              aiOrig[displayMaster[i2]] = i2;
            }
            if (formatters === aSort.length) {
              displayMaster.sort(function(a, b) {
                var x, y, k2, test, sort, len = aSort.length, dataA = aoData[a]._aSortData, dataB = aoData[b]._aSortData;
                for (k2 = 0; k2 < len; k2++) {
                  sort = aSort[k2];
                  x = dataA[sort.col];
                  y = dataB[sort.col];
                  test = x < y ? -1 : x > y ? 1 : 0;
                  if (test !== 0) {
                    return sort.dir === "asc" ? test : -test;
                  }
                }
                x = aiOrig[a];
                y = aiOrig[b];
                return x < y ? -1 : x > y ? 1 : 0;
              });
            } else {
              displayMaster.sort(function(a, b) {
                var x, y, k2, l, test, sort, fn2, len = aSort.length, dataA = aoData[a]._aSortData, dataB = aoData[b]._aSortData;
                for (k2 = 0; k2 < len; k2++) {
                  sort = aSort[k2];
                  x = dataA[sort.col];
                  y = dataB[sort.col];
                  fn2 = oExtSort[sort.type + "-" + sort.dir] || oExtSort["string-" + sort.dir];
                  test = fn2(x, y);
                  if (test !== 0) {
                    return test;
                  }
                }
                x = aiOrig[a];
                y = aiOrig[b];
                return x < y ? -1 : x > y ? 1 : 0;
              });
            }
          }
          oSettings.bSorted = true;
        }
        function _fnSortAria(settings) {
          var label;
          var nextSort;
          var columns = settings.aoColumns;
          var aSort = _fnSortFlatten(settings);
          var oAria = settings.oLanguage.oAria;
          for (var i2 = 0, iLen = columns.length; i2 < iLen; i2++) {
            var col = columns[i2];
            var asSorting = col.asSorting;
            var sTitle = col.ariaTitle || col.sTitle.replace(/<.*?>/g, "");
            var th = col.nTh;
            th.removeAttribute("aria-sort");
            if (col.bSortable) {
              if (aSort.length > 0 && aSort[0].col == i2) {
                th.setAttribute("aria-sort", aSort[0].dir == "asc" ? "ascending" : "descending");
                nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
              } else {
                nextSort = asSorting[0];
              }
              label = sTitle + (nextSort === "asc" ? oAria.sSortAscending : oAria.sSortDescending);
            } else {
              label = sTitle;
            }
            th.setAttribute("aria-label", label);
          }
        }
        function _fnSortListener(settings, colIdx, append, callback) {
          var col = settings.aoColumns[colIdx];
          var sorting = settings.aaSorting;
          var asSorting = col.asSorting;
          var nextSortIdx;
          var next = function(a, overflow) {
            var idx = a._idx;
            if (idx === undefined2) {
              idx = $2.inArray(a[1], asSorting);
            }
            return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
          };
          if (typeof sorting[0] === "number") {
            sorting = settings.aaSorting = [sorting];
          }
          if (append && settings.oFeatures.bSortMulti) {
            var sortIdx = $2.inArray(colIdx, _pluck(sorting, "0"));
            if (sortIdx !== -1) {
              nextSortIdx = next(sorting[sortIdx], true);
              if (nextSortIdx === null && sorting.length === 1) {
                nextSortIdx = 0;
              }
              if (nextSortIdx === null) {
                sorting.splice(sortIdx, 1);
              } else {
                sorting[sortIdx][1] = asSorting[nextSortIdx];
                sorting[sortIdx]._idx = nextSortIdx;
              }
            } else {
              sorting.push([colIdx, asSorting[0], 0]);
              sorting[sorting.length - 1]._idx = 0;
            }
          } else if (sorting.length && sorting[0][0] == colIdx) {
            nextSortIdx = next(sorting[0]);
            sorting.length = 1;
            sorting[0][1] = asSorting[nextSortIdx];
            sorting[0]._idx = nextSortIdx;
          } else {
            sorting.length = 0;
            sorting.push([colIdx, asSorting[0]]);
            sorting[0]._idx = 0;
          }
          _fnReDraw(settings);
          if (typeof callback == "function") {
            callback(settings);
          }
        }
        function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
          var col = settings.aoColumns[colIdx];
          _fnBindAction(attachTo, {}, function(e) {
            if (col.bSortable === false) {
              return;
            }
            if (settings.oFeatures.bProcessing) {
              _fnProcessingDisplay(settings, true);
              setTimeout(function() {
                _fnSortListener(settings, colIdx, e.shiftKey, callback);
                if (_fnDataSource(settings) !== "ssp") {
                  _fnProcessingDisplay(settings, false);
                }
              }, 0);
            } else {
              _fnSortListener(settings, colIdx, e.shiftKey, callback);
            }
          });
        }
        function _fnSortingClasses(settings) {
          var oldSort = settings.aLastSort;
          var sortClass = settings.oClasses.sSortColumn;
          var sort = _fnSortFlatten(settings);
          var features = settings.oFeatures;
          var i2, ien, colIdx;
          if (features.bSort && features.bSortClasses) {
            for (i2 = 0, ien = oldSort.length; i2 < ien; i2++) {
              colIdx = oldSort[i2].src;
              $2(_pluck(settings.aoData, "anCells", colIdx)).removeClass(sortClass + (i2 < 2 ? i2 + 1 : 3));
            }
            for (i2 = 0, ien = sort.length; i2 < ien; i2++) {
              colIdx = sort[i2].src;
              $2(_pluck(settings.aoData, "anCells", colIdx)).addClass(sortClass + (i2 < 2 ? i2 + 1 : 3));
            }
          }
          settings.aLastSort = sort;
        }
        function _fnSortData(settings, idx) {
          var column = settings.aoColumns[idx];
          var customSort = DataTable.ext.order[column.sSortDataType];
          var customData;
          if (customSort) {
            customData = customSort.call(
              settings.oInstance,
              settings,
              idx,
              _fnColumnIndexToVisible(settings, idx)
            );
          }
          var row, cellData;
          var formatter = DataTable.ext.type.order[column.sType + "-pre"];
          for (var i2 = 0, ien = settings.aoData.length; i2 < ien; i2++) {
            row = settings.aoData[i2];
            if (!row._aSortData) {
              row._aSortData = [];
            }
            if (!row._aSortData[idx] || customSort) {
              cellData = customSort ? customData[i2] : (
                // If there was a custom sort function, use data from there
                _fnGetCellData(settings, i2, idx, "sort")
              );
              row._aSortData[idx] = formatter ? formatter(cellData) : cellData;
            }
          }
        }
        function _fnSaveState(settings) {
          if (settings._bLoadingState) {
            return;
          }
          var state = {
            time: +/* @__PURE__ */ new Date(),
            start: settings._iDisplayStart,
            length: settings._iDisplayLength,
            order: $2.extend(true, [], settings.aaSorting),
            search: _fnSearchToCamel(settings.oPreviousSearch),
            columns: $2.map(settings.aoColumns, function(col, i2) {
              return {
                visible: col.bVisible,
                search: _fnSearchToCamel(settings.aoPreSearchCols[i2])
              };
            })
          };
          settings.oSavedState = state;
          _fnCallbackFire(settings, "aoStateSaveParams", "stateSaveParams", [settings, state]);
          if (settings.oFeatures.bStateSave && !settings.bDestroying) {
            settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
          }
        }
        function _fnLoadState(settings, oInit, callback) {
          if (!settings.oFeatures.bStateSave) {
            callback();
            return;
          }
          var loaded = function(state2) {
            _fnImplementState(settings, state2, callback);
          };
          var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);
          if (state !== undefined2) {
            _fnImplementState(settings, state, callback);
          }
          return true;
        }
        function _fnImplementState(settings, s, callback) {
          var i2, ien;
          var columns = settings.aoColumns;
          settings._bLoadingState = true;
          var api = settings._bInitComplete ? new DataTable.Api(settings) : null;
          if (!s || !s.time) {
            settings._bLoadingState = false;
            callback();
            return;
          }
          var abStateLoad = _fnCallbackFire(settings, "aoStateLoadParams", "stateLoadParams", [settings, s]);
          if ($2.inArray(false, abStateLoad) !== -1) {
            settings._bLoadingState = false;
            callback();
            return;
          }
          var duration = settings.iStateDuration;
          if (duration > 0 && s.time < +/* @__PURE__ */ new Date() - duration * 1e3) {
            settings._bLoadingState = false;
            callback();
            return;
          }
          if (s.columns && columns.length !== s.columns.length) {
            settings._bLoadingState = false;
            callback();
            return;
          }
          settings.oLoadedState = $2.extend(true, {}, s);
          if (s.length !== undefined2) {
            if (api) {
              api.page.len(s.length);
            } else {
              settings._iDisplayLength = s.length;
            }
          }
          if (s.start !== undefined2) {
            if (api === null) {
              settings._iDisplayStart = s.start;
              settings.iInitDisplayStart = s.start;
            } else {
              _fnPageChange(settings, s.start / settings._iDisplayLength);
            }
          }
          if (s.order !== undefined2) {
            settings.aaSorting = [];
            $2.each(s.order, function(i3, col2) {
              settings.aaSorting.push(
                col2[0] >= columns.length ? [0, col2[1]] : col2
              );
            });
          }
          if (s.search !== undefined2) {
            $2.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));
          }
          if (s.columns) {
            for (i2 = 0, ien = s.columns.length; i2 < ien; i2++) {
              var col = s.columns[i2];
              if (col.visible !== undefined2) {
                if (api) {
                  api.column(i2).visible(col.visible, false);
                } else {
                  columns[i2].bVisible = col.visible;
                }
              }
              if (col.search !== undefined2) {
                $2.extend(settings.aoPreSearchCols[i2], _fnSearchToHung(col.search));
              }
            }
            if (api) {
              api.columns.adjust();
            }
          }
          settings._bLoadingState = false;
          _fnCallbackFire(settings, "aoStateLoaded", "stateLoaded", [settings, s]);
          callback();
        }
        ;
        function _fnSettingsFromNode(table) {
          var settings = DataTable.settings;
          var idx = $2.inArray(table, _pluck(settings, "nTable"));
          return idx !== -1 ? settings[idx] : null;
        }
        function _fnLog(settings, level, msg, tn) {
          msg = "DataTables warning: " + (settings ? "table id=" + settings.sTableId + " - " : "") + msg;
          if (tn) {
            msg += ". For more information about this error, please see http://datatables.net/tn/" + tn;
          }
          if (!level) {
            var ext = DataTable.ext;
            var type = ext.sErrMode || ext.errMode;
            if (settings) {
              _fnCallbackFire(settings, null, "error", [settings, tn, msg]);
            }
            if (type == "alert") {
              alert(msg);
            } else if (type == "throw") {
              throw new Error(msg);
            } else if (typeof type == "function") {
              type(settings, tn, msg);
            }
          } else if (window2.console && console.log) {
            console.log(msg);
          }
        }
        function _fnMap(ret, src, name, mappedName) {
          if (Array.isArray(name)) {
            $2.each(name, function(i2, val) {
              if (Array.isArray(val)) {
                _fnMap(ret, src, val[0], val[1]);
              } else {
                _fnMap(ret, src, val);
              }
            });
            return;
          }
          if (mappedName === undefined2) {
            mappedName = name;
          }
          if (src[name] !== undefined2) {
            ret[mappedName] = src[name];
          }
        }
        function _fnExtend(out, extender, breakRefs) {
          var val;
          for (var prop in extender) {
            if (extender.hasOwnProperty(prop)) {
              val = extender[prop];
              if ($2.isPlainObject(val)) {
                if (!$2.isPlainObject(out[prop])) {
                  out[prop] = {};
                }
                $2.extend(true, out[prop], val);
              } else if (breakRefs && prop !== "data" && prop !== "aaData" && Array.isArray(val)) {
                out[prop] = val.slice();
              } else {
                out[prop] = val;
              }
            }
          }
          return out;
        }
        function _fnBindAction(n, oData, fn2) {
          $2(n).on("click.DT", oData, function(e) {
            $2(n).trigger("blur");
            fn2(e);
          }).on("keypress.DT", oData, function(e) {
            if (e.which === 13) {
              e.preventDefault();
              fn2(e);
            }
          }).on("selectstart.DT", function() {
            return false;
          });
        }
        function _fnCallbackReg(oSettings, sStore, fn2, sName) {
          if (fn2) {
            oSettings[sStore].push({
              "fn": fn2,
              "sName": sName
            });
          }
        }
        function _fnCallbackFire(settings, callbackArr, eventName, args) {
          var ret = [];
          if (callbackArr) {
            ret = $2.map(settings[callbackArr].slice().reverse(), function(val, i2) {
              return val.fn.apply(settings.oInstance, args);
            });
          }
          if (eventName !== null) {
            var e = $2.Event(eventName + ".dt");
            $2(settings.nTable).trigger(e, args);
            ret.push(e.result);
          }
          return ret;
        }
        function _fnLengthOverflow(settings) {
          var start2 = settings._iDisplayStart, end2 = settings.fnDisplayEnd(), len = settings._iDisplayLength;
          if (start2 >= end2) {
            start2 = end2 - len;
          }
          start2 -= start2 % len;
          if (len === -1 || start2 < 0) {
            start2 = 0;
          }
          settings._iDisplayStart = start2;
        }
        function _fnRenderer(settings, type) {
          var renderer = settings.renderer;
          var host = DataTable.ext.renderer[type];
          if ($2.isPlainObject(renderer) && renderer[type]) {
            return host[renderer[type]] || host._;
          } else if (typeof renderer === "string") {
            return host[renderer] || host._;
          }
          return host._;
        }
        function _fnDataSource(settings) {
          if (settings.oFeatures.bServerSide) {
            return "ssp";
          } else if (settings.ajax || settings.sAjaxSource) {
            return "ajax";
          }
          return "dom";
        }
        var __apiStruct = [];
        var __arrayProto = Array.prototype;
        var _toSettings = function(mixed) {
          var idx, jq;
          var settings = DataTable.settings;
          var tables = $2.map(settings, function(el, i2) {
            return el.nTable;
          });
          if (!mixed) {
            return [];
          } else if (mixed.nTable && mixed.oApi) {
            return [mixed];
          } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === "table") {
            idx = $2.inArray(mixed, tables);
            return idx !== -1 ? [settings[idx]] : null;
          } else if (mixed && typeof mixed.settings === "function") {
            return mixed.settings().toArray();
          } else if (typeof mixed === "string") {
            jq = $2(mixed);
          } else if (mixed instanceof $2) {
            jq = mixed;
          }
          if (jq) {
            return jq.map(function(i2) {
              idx = $2.inArray(this, tables);
              return idx !== -1 ? settings[idx] : null;
            }).toArray();
          }
        };
        _Api = function(context, data) {
          if (!(this instanceof _Api)) {
            return new _Api(context, data);
          }
          var settings = [];
          var ctxSettings = function(o) {
            var a = _toSettings(o);
            if (a) {
              settings.push.apply(settings, a);
            }
          };
          if (Array.isArray(context)) {
            for (var i2 = 0, ien = context.length; i2 < ien; i2++) {
              ctxSettings(context[i2]);
            }
          } else {
            ctxSettings(context);
          }
          this.context = _unique(settings);
          if (data) {
            $2.merge(this, data);
          }
          this.selector = {
            rows: null,
            cols: null,
            opts: null
          };
          _Api.extend(this, this, __apiStruct);
        };
        DataTable.Api = _Api;
        $2.extend(_Api.prototype, {
          any: function() {
            return this.count() !== 0;
          },
          concat: __arrayProto.concat,
          context: [],
          // array of table settings objects
          count: function() {
            return this.flatten().length;
          },
          each: function(fn2) {
            for (var i2 = 0, ien = this.length; i2 < ien; i2++) {
              fn2.call(this, this[i2], i2, this);
            }
            return this;
          },
          eq: function(idx) {
            var ctx = this.context;
            return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;
          },
          filter: function(fn2) {
            var a = [];
            if (__arrayProto.filter) {
              a = __arrayProto.filter.call(this, fn2, this);
            } else {
              for (var i2 = 0, ien = this.length; i2 < ien; i2++) {
                if (fn2.call(this, this[i2], i2, this)) {
                  a.push(this[i2]);
                }
              }
            }
            return new _Api(this.context, a);
          },
          flatten: function() {
            var a = [];
            return new _Api(this.context, a.concat.apply(a, this.toArray()));
          },
          join: __arrayProto.join,
          indexOf: __arrayProto.indexOf || function(obj, start2) {
            for (var i2 = start2 || 0, ien = this.length; i2 < ien; i2++) {
              if (this[i2] === obj) {
                return i2;
              }
            }
            return -1;
          },
          iterator: function(flatten, type, fn2, alwaysNew) {
            var a = [], ret, i2, ien, j, jen, context = this.context, rows, items, item, selector = this.selector;
            if (typeof flatten === "string") {
              alwaysNew = fn2;
              fn2 = type;
              type = flatten;
              flatten = false;
            }
            for (i2 = 0, ien = context.length; i2 < ien; i2++) {
              var apiInst = new _Api(context[i2]);
              if (type === "table") {
                ret = fn2.call(apiInst, context[i2], i2);
                if (ret !== undefined2) {
                  a.push(ret);
                }
              } else if (type === "columns" || type === "rows") {
                ret = fn2.call(apiInst, context[i2], this[i2], i2);
                if (ret !== undefined2) {
                  a.push(ret);
                }
              } else if (type === "column" || type === "column-rows" || type === "row" || type === "cell") {
                items = this[i2];
                if (type === "column-rows") {
                  rows = _selector_row_indexes(context[i2], selector.opts);
                }
                for (j = 0, jen = items.length; j < jen; j++) {
                  item = items[j];
                  if (type === "cell") {
                    ret = fn2.call(apiInst, context[i2], item.row, item.column, i2, j);
                  } else {
                    ret = fn2.call(apiInst, context[i2], item, i2, j, rows);
                  }
                  if (ret !== undefined2) {
                    a.push(ret);
                  }
                }
              }
            }
            if (a.length || alwaysNew) {
              var api = new _Api(context, flatten ? a.concat.apply([], a) : a);
              var apiSelector = api.selector;
              apiSelector.rows = selector.rows;
              apiSelector.cols = selector.cols;
              apiSelector.opts = selector.opts;
              return api;
            }
            return this;
          },
          lastIndexOf: __arrayProto.lastIndexOf || function(obj, start2) {
            return this.indexOf.apply(this.toArray.reverse(), arguments);
          },
          length: 0,
          map: function(fn2) {
            var a = [];
            if (__arrayProto.map) {
              a = __arrayProto.map.call(this, fn2, this);
            } else {
              for (var i2 = 0, ien = this.length; i2 < ien; i2++) {
                a.push(fn2.call(this, this[i2], i2));
              }
            }
            return new _Api(this.context, a);
          },
          pluck: function(prop) {
            let fn2 = DataTable.util.get(prop);
            return this.map(function(el) {
              return fn2(el);
            });
          },
          pop: __arrayProto.pop,
          push: __arrayProto.push,
          // Does not return an API instance
          reduce: __arrayProto.reduce || function(fn2, init) {
            return _fnReduce(this, fn2, init, 0, this.length, 1);
          },
          reduceRight: __arrayProto.reduceRight || function(fn2, init) {
            return _fnReduce(this, fn2, init, this.length - 1, -1, -1);
          },
          reverse: __arrayProto.reverse,
          // Object with rows, columns and opts
          selector: null,
          shift: __arrayProto.shift,
          slice: function() {
            return new _Api(this.context, this);
          },
          sort: __arrayProto.sort,
          // ? name - order?
          splice: __arrayProto.splice,
          toArray: function() {
            return __arrayProto.slice.call(this);
          },
          to$: function() {
            return $2(this);
          },
          toJQuery: function() {
            return $2(this);
          },
          unique: function() {
            return new _Api(this.context, _unique(this));
          },
          unshift: __arrayProto.unshift
        });
        _Api.extend = function(scope, obj, ext) {
          if (!ext.length || !obj || !(obj instanceof _Api) && !obj.__dt_wrapper) {
            return;
          }
          var i2, ien, struct, methodScoping = function(scope2, fn2, struc) {
            return function() {
              var ret = fn2.apply(scope2, arguments);
              _Api.extend(ret, ret, struc.methodExt);
              return ret;
            };
          };
          for (i2 = 0, ien = ext.length; i2 < ien; i2++) {
            struct = ext[i2];
            obj[struct.name] = struct.type === "function" ? methodScoping(scope, struct.val, struct) : struct.type === "object" ? {} : struct.val;
            obj[struct.name].__dt_wrapper = true;
            _Api.extend(scope, obj[struct.name], struct.propExt);
          }
        };
        _Api.register = _api_register = function(name, val) {
          if (Array.isArray(name)) {
            for (var j = 0, jen = name.length; j < jen; j++) {
              _Api.register(name[j], val);
            }
            return;
          }
          var i2, ien, heir = name.split("."), struct = __apiStruct, key, method;
          var find = function(src2, name2) {
            for (var i3 = 0, ien2 = src2.length; i3 < ien2; i3++) {
              if (src2[i3].name === name2) {
                return src2[i3];
              }
            }
            return null;
          };
          for (i2 = 0, ien = heir.length; i2 < ien; i2++) {
            method = heir[i2].indexOf("()") !== -1;
            key = method ? heir[i2].replace("()", "") : heir[i2];
            var src = find(struct, key);
            if (!src) {
              src = {
                name: key,
                val: {},
                methodExt: [],
                propExt: [],
                type: "object"
              };
              struct.push(src);
            }
            if (i2 === ien - 1) {
              src.val = val;
              src.type = typeof val === "function" ? "function" : $2.isPlainObject(val) ? "object" : "other";
            } else {
              struct = method ? src.methodExt : src.propExt;
            }
          }
        };
        _Api.registerPlural = _api_registerPlural = function(pluralName, singularName, val) {
          _Api.register(pluralName, val);
          _Api.register(singularName, function() {
            var ret = val.apply(this, arguments);
            if (ret === this) {
              return this;
            } else if (ret instanceof _Api) {
              return ret.length ? Array.isArray(ret[0]) ? new _Api(ret.context, ret[0]) : (
                // Array results are 'enhanced'
                ret[0]
              ) : undefined2;
            }
            return ret;
          });
        };
        var __table_selector = function(selector, a) {
          if (Array.isArray(selector)) {
            return $2.map(selector, function(item) {
              return __table_selector(item, a);
            });
          }
          if (typeof selector === "number") {
            return [a[selector]];
          }
          var nodes = $2.map(a, function(el, i2) {
            return el.nTable;
          });
          return $2(nodes).filter(selector).map(function(i2) {
            var idx = $2.inArray(this, nodes);
            return a[idx];
          }).toArray();
        };
        _api_register("tables()", function(selector) {
          return selector !== undefined2 && selector !== null ? new _Api(__table_selector(selector, this.context)) : this;
        });
        _api_register("table()", function(selector) {
          var tables = this.tables(selector);
          var ctx = tables.context;
          return ctx.length ? new _Api(ctx[0]) : tables;
        });
        _api_registerPlural("tables().nodes()", "table().node()", function() {
          return this.iterator("table", function(ctx) {
            return ctx.nTable;
          }, 1);
        });
        _api_registerPlural("tables().body()", "table().body()", function() {
          return this.iterator("table", function(ctx) {
            return ctx.nTBody;
          }, 1);
        });
        _api_registerPlural("tables().header()", "table().header()", function() {
          return this.iterator("table", function(ctx) {
            return ctx.nTHead;
          }, 1);
        });
        _api_registerPlural("tables().footer()", "table().footer()", function() {
          return this.iterator("table", function(ctx) {
            return ctx.nTFoot;
          }, 1);
        });
        _api_registerPlural("tables().containers()", "table().container()", function() {
          return this.iterator("table", function(ctx) {
            return ctx.nTableWrapper;
          }, 1);
        });
        _api_register("draw()", function(paging) {
          return this.iterator("table", function(settings) {
            if (paging === "page") {
              _fnDraw(settings);
            } else {
              if (typeof paging === "string") {
                paging = paging === "full-hold" ? false : true;
              }
              _fnReDraw(settings, paging === false);
            }
          });
        });
        _api_register("page()", function(action) {
          if (action === undefined2) {
            return this.page.info().page;
          }
          return this.iterator("table", function(settings) {
            _fnPageChange(settings, action);
          });
        });
        _api_register("page.info()", function(action) {
          if (this.context.length === 0) {
            return undefined2;
          }
          var settings = this.context[0], start2 = settings._iDisplayStart, len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1, visRecords = settings.fnRecordsDisplay(), all = len === -1;
          return {
            "page": all ? 0 : Math.floor(start2 / len),
            "pages": all ? 1 : Math.ceil(visRecords / len),
            "start": start2,
            "end": settings.fnDisplayEnd(),
            "length": len,
            "recordsTotal": settings.fnRecordsTotal(),
            "recordsDisplay": visRecords,
            "serverSide": _fnDataSource(settings) === "ssp"
          };
        });
        _api_register("page.len()", function(len) {
          if (len === undefined2) {
            return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined2;
          }
          return this.iterator("table", function(settings) {
            _fnLengthChange(settings, len);
          });
        });
        var __reload = function(settings, holdPosition, callback) {
          if (callback) {
            var api = new _Api(settings);
            api.one("draw", function() {
              callback(api.ajax.json());
            });
          }
          if (_fnDataSource(settings) == "ssp") {
            _fnReDraw(settings, holdPosition);
          } else {
            _fnProcessingDisplay(settings, true);
            var xhr = settings.jqXHR;
            if (xhr && xhr.readyState !== 4) {
              xhr.abort();
            }
            _fnBuildAjax(settings, [], function(json) {
              _fnClearTable(settings);
              var data = _fnAjaxDataSrc(settings, json);
              for (var i2 = 0, ien = data.length; i2 < ien; i2++) {
                _fnAddData(settings, data[i2]);
              }
              _fnReDraw(settings, holdPosition);
              _fnProcessingDisplay(settings, false);
            });
          }
        };
        _api_register("ajax.json()", function() {
          var ctx = this.context;
          if (ctx.length > 0) {
            return ctx[0].json;
          }
        });
        _api_register("ajax.params()", function() {
          var ctx = this.context;
          if (ctx.length > 0) {
            return ctx[0].oAjaxData;
          }
        });
        _api_register("ajax.reload()", function(callback, resetPaging) {
          return this.iterator("table", function(settings) {
            __reload(settings, resetPaging === false, callback);
          });
        });
        _api_register("ajax.url()", function(url) {
          var ctx = this.context;
          if (url === undefined2) {
            if (ctx.length === 0) {
              return undefined2;
            }
            ctx = ctx[0];
            return ctx.ajax ? $2.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;
          }
          return this.iterator("table", function(settings) {
            if ($2.isPlainObject(settings.ajax)) {
              settings.ajax.url = url;
            } else {
              settings.ajax = url;
            }
          });
        });
        _api_register("ajax.url().load()", function(callback, resetPaging) {
          return this.iterator("table", function(ctx) {
            __reload(ctx, resetPaging === false, callback);
          });
        });
        var _selector_run = function(type, selector, selectFn, settings, opts) {
          var out = [], res, a, i2, ien, j, jen, selectorType = typeof selector;
          if (!selector || selectorType === "string" || selectorType === "function" || selector.length === undefined2) {
            selector = [selector];
          }
          for (i2 = 0, ien = selector.length; i2 < ien; i2++) {
            a = selector[i2] && selector[i2].split && !selector[i2].match(/[\[\(:]/) ? selector[i2].split(",") : [selector[i2]];
            for (j = 0, jen = a.length; j < jen; j++) {
              res = selectFn(typeof a[j] === "string" ? a[j].trim() : a[j]);
              if (res && res.length) {
                out = out.concat(res);
              }
            }
          }
          var ext = _ext.selector[type];
          if (ext.length) {
            for (i2 = 0, ien = ext.length; i2 < ien; i2++) {
              out = ext[i2](settings, opts, out);
            }
          }
          return _unique(out);
        };
        var _selector_opts = function(opts) {
          if (!opts) {
            opts = {};
          }
          if (opts.filter && opts.search === undefined2) {
            opts.search = opts.filter;
          }
          return $2.extend({
            search: "none",
            order: "current",
            page: "all"
          }, opts);
        };
        var _selector_first = function(inst) {
          for (var i2 = 0, ien = inst.length; i2 < ien; i2++) {
            if (inst[i2].length > 0) {
              inst[0] = inst[i2];
              inst[0].length = 1;
              inst.length = 1;
              inst.context = [inst.context[i2]];
              return inst;
            }
          }
          inst.length = 0;
          return inst;
        };
        var _selector_row_indexes = function(settings, opts) {
          var i2, ien, tmp, a = [], displayFiltered = settings.aiDisplay, displayMaster = settings.aiDisplayMaster;
          var search = opts.search, order2 = opts.order, page = opts.page;
          if (_fnDataSource(settings) == "ssp") {
            return search === "removed" ? [] : _range(0, displayMaster.length);
          } else if (page == "current") {
            for (i2 = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i2 < ien; i2++) {
              a.push(displayFiltered[i2]);
            }
          } else if (order2 == "current" || order2 == "applied") {
            if (search == "none") {
              a = displayMaster.slice();
            } else if (search == "applied") {
              a = displayFiltered.slice();
            } else if (search == "removed") {
              var displayFilteredMap = {};
              for (var i2 = 0, ien = displayFiltered.length; i2 < ien; i2++) {
                displayFilteredMap[displayFiltered[i2]] = null;
              }
              a = $2.map(displayMaster, function(el) {
                return !displayFilteredMap.hasOwnProperty(el) ? el : null;
              });
            }
          } else if (order2 == "index" || order2 == "original") {
            for (i2 = 0, ien = settings.aoData.length; i2 < ien; i2++) {
              if (search == "none") {
                a.push(i2);
              } else {
                tmp = $2.inArray(i2, displayFiltered);
                if (tmp === -1 && search == "removed" || tmp >= 0 && search == "applied") {
                  a.push(i2);
                }
              }
            }
          }
          return a;
        };
        var __row_selector = function(settings, selector, opts) {
          var rows;
          var run = function(sel) {
            var selInt = _intVal(sel);
            var i2, ien;
            var aoData = settings.aoData;
            if (selInt !== null && !opts) {
              return [selInt];
            }
            if (!rows) {
              rows = _selector_row_indexes(settings, opts);
            }
            if (selInt !== null && $2.inArray(selInt, rows) !== -1) {
              return [selInt];
            } else if (sel === null || sel === undefined2 || sel === "") {
              return rows;
            }
            if (typeof sel === "function") {
              return $2.map(rows, function(idx) {
                var row = aoData[idx];
                return sel(idx, row._aData, row.nTr) ? idx : null;
              });
            }
            if (sel.nodeName) {
              var rowIdx = sel._DT_RowIndex;
              var cellIdx = sel._DT_CellIndex;
              if (rowIdx !== undefined2) {
                return aoData[rowIdx] && aoData[rowIdx].nTr === sel ? [rowIdx] : [];
              } else if (cellIdx) {
                return aoData[cellIdx.row] && aoData[cellIdx.row].nTr === sel.parentNode ? [cellIdx.row] : [];
              } else {
                var host = $2(sel).closest("*[data-dt-row]");
                return host.length ? [host.data("dt-row")] : [];
              }
            }
            if (typeof sel === "string" && sel.charAt(0) === "#") {
              var rowObj = settings.aIds[sel.replace(/^#/, "")];
              if (rowObj !== undefined2) {
                return [rowObj.idx];
              }
            }
            var nodes = _removeEmpty(
              _pluck_order(settings.aoData, rows, "nTr")
            );
            return $2(nodes).filter(sel).map(function() {
              return this._DT_RowIndex;
            }).toArray();
          };
          return _selector_run("row", selector, run, settings, opts);
        };
        _api_register("rows()", function(selector, opts) {
          if (selector === undefined2) {
            selector = "";
          } else if ($2.isPlainObject(selector)) {
            opts = selector;
            selector = "";
          }
          opts = _selector_opts(opts);
          var inst = this.iterator("table", function(settings) {
            return __row_selector(settings, selector, opts);
          }, 1);
          inst.selector.rows = selector;
          inst.selector.opts = opts;
          return inst;
        });
        _api_register("rows().nodes()", function() {
          return this.iterator("row", function(settings, row) {
            return settings.aoData[row].nTr || undefined2;
          }, 1);
        });
        _api_register("rows().data()", function() {
          return this.iterator(true, "rows", function(settings, rows) {
            return _pluck_order(settings.aoData, rows, "_aData");
          }, 1);
        });
        _api_registerPlural("rows().cache()", "row().cache()", function(type) {
          return this.iterator("row", function(settings, row) {
            var r = settings.aoData[row];
            return type === "search" ? r._aFilterData : r._aSortData;
          }, 1);
        });
        _api_registerPlural("rows().invalidate()", "row().invalidate()", function(src) {
          return this.iterator("row", function(settings, row) {
            _fnInvalidate(settings, row, src);
          });
        });
        _api_registerPlural("rows().indexes()", "row().index()", function() {
          return this.iterator("row", function(settings, row) {
            return row;
          }, 1);
        });
        _api_registerPlural("rows().ids()", "row().id()", function(hash3) {
          var a = [];
          var context = this.context;
          for (var i2 = 0, ien = context.length; i2 < ien; i2++) {
            for (var j = 0, jen = this[i2].length; j < jen; j++) {
              var id = context[i2].rowIdFn(context[i2].aoData[this[i2][j]]._aData);
              a.push((hash3 === true ? "#" : "") + id);
            }
          }
          return new _Api(context, a);
        });
        _api_registerPlural("rows().remove()", "row().remove()", function() {
          var that = this;
          this.iterator("row", function(settings, row, thatIdx) {
            var data = settings.aoData;
            var rowData = data[row];
            var i2, ien, j, jen;
            var loopRow, loopCells;
            data.splice(row, 1);
            for (i2 = 0, ien = data.length; i2 < ien; i2++) {
              loopRow = data[i2];
              loopCells = loopRow.anCells;
              if (loopRow.nTr !== null) {
                loopRow.nTr._DT_RowIndex = i2;
              }
              if (loopCells !== null) {
                for (j = 0, jen = loopCells.length; j < jen; j++) {
                  loopCells[j]._DT_CellIndex.row = i2;
                }
              }
            }
            _fnDeleteIndex(settings.aiDisplayMaster, row);
            _fnDeleteIndex(settings.aiDisplay, row);
            _fnDeleteIndex(that[thatIdx], row, false);
            if (settings._iRecordsDisplay > 0) {
              settings._iRecordsDisplay--;
            }
            _fnLengthOverflow(settings);
            var id = settings.rowIdFn(rowData._aData);
            if (id !== undefined2) {
              delete settings.aIds[id];
            }
          });
          this.iterator("table", function(settings) {
            for (var i2 = 0, ien = settings.aoData.length; i2 < ien; i2++) {
              settings.aoData[i2].idx = i2;
            }
          });
          return this;
        });
        _api_register("rows.add()", function(rows) {
          var newRows = this.iterator("table", function(settings) {
            var row, i2, ien;
            var out = [];
            for (i2 = 0, ien = rows.length; i2 < ien; i2++) {
              row = rows[i2];
              if (row.nodeName && row.nodeName.toUpperCase() === "TR") {
                out.push(_fnAddTr(settings, row)[0]);
              } else {
                out.push(_fnAddData(settings, row));
              }
            }
            return out;
          }, 1);
          var modRows = this.rows(-1);
          modRows.pop();
          $2.merge(modRows, newRows);
          return modRows;
        });
        _api_register("row()", function(selector, opts) {
          return _selector_first(this.rows(selector, opts));
        });
        _api_register("row().data()", function(data) {
          var ctx = this.context;
          if (data === undefined2) {
            return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined2;
          }
          var row = ctx[0].aoData[this[0]];
          row._aData = data;
          if (Array.isArray(data) && row.nTr && row.nTr.id) {
            _fnSetObjectDataFn(ctx[0].rowId)(data, row.nTr.id);
          }
          _fnInvalidate(ctx[0], this[0], "data");
          return this;
        });
        _api_register("row().node()", function() {
          var ctx = this.context;
          return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;
        });
        _api_register("row.add()", function(row) {
          if (row instanceof $2 && row.length) {
            row = row[0];
          }
          var rows = this.iterator("table", function(settings) {
            if (row.nodeName && row.nodeName.toUpperCase() === "TR") {
              return _fnAddTr(settings, row)[0];
            }
            return _fnAddData(settings, row);
          });
          return this.row(rows[0]);
        });
        $2(document2).on("plugin-init.dt", function(e, context) {
          var api = new _Api(context);
          api.on("stateSaveParams", function(e2, settings, d) {
            var idFn = settings.rowIdFn;
            var data = settings.aoData;
            var ids = [];
            for (var i2 = 0; i2 < data.length; i2++) {
              if (data[i2]._detailsShow) {
                ids.push("#" + idFn(data[i2]._aData));
              }
            }
            d.childRows = ids;
          });
          var loaded = api.state.loaded();
          if (loaded && loaded.childRows) {
            api.rows($2.map(loaded.childRows, function(id) {
              return id.replace(/:/g, "\\:");
            })).every(function() {
              _fnCallbackFire(context, null, "requestChild", [this]);
            });
          }
        });
        var __details_add = function(ctx, row, data, klass) {
          var rows = [];
          var addRow = function(r, k) {
            if (Array.isArray(r) || r instanceof $2) {
              for (var i2 = 0, ien = r.length; i2 < ien; i2++) {
                addRow(r[i2], k);
              }
              return;
            }
            if (r.nodeName && r.nodeName.toLowerCase() === "tr") {
              rows.push(r);
            } else {
              var created = $2("<tr><td></td></tr>").addClass(k);
              $2("td", created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);
              rows.push(created[0]);
            }
          };
          addRow(data, klass);
          if (row._details) {
            row._details.detach();
          }
          row._details = $2(rows);
          if (row._detailsShow) {
            row._details.insertAfter(row.nTr);
          }
        };
        var __details_state = DataTable.util.throttle(
          function(ctx) {
            _fnSaveState(ctx[0]);
          },
          500
        );
        var __details_remove = function(api, idx) {
          var ctx = api.context;
          if (ctx.length) {
            var row = ctx[0].aoData[idx !== undefined2 ? idx : api[0]];
            if (row && row._details) {
              row._details.remove();
              row._detailsShow = undefined2;
              row._details = undefined2;
              $2(row.nTr).removeClass("dt-hasChild");
              __details_state(ctx);
            }
          }
        };
        var __details_display = function(api, show) {
          var ctx = api.context;
          if (ctx.length && api.length) {
            var row = ctx[0].aoData[api[0]];
            if (row._details) {
              row._detailsShow = show;
              if (show) {
                row._details.insertAfter(row.nTr);
                $2(row.nTr).addClass("dt-hasChild");
              } else {
                row._details.detach();
                $2(row.nTr).removeClass("dt-hasChild");
              }
              _fnCallbackFire(ctx[0], null, "childRow", [show, api.row(api[0])]);
              __details_events(ctx[0]);
              __details_state(ctx);
            }
          }
        };
        var __details_events = function(settings) {
          var api = new _Api(settings);
          var namespace = ".dt.DT_details";
          var drawEvent = "draw" + namespace;
          var colvisEvent = "column-sizing" + namespace;
          var destroyEvent = "destroy" + namespace;
          var data = settings.aoData;
          api.off(drawEvent + " " + colvisEvent + " " + destroyEvent);
          if (_pluck(data, "_details").length > 0) {
            api.on(drawEvent, function(e, ctx) {
              if (settings !== ctx) {
                return;
              }
              api.rows({ page: "current" }).eq(0).each(function(idx) {
                var row = data[idx];
                if (row._detailsShow) {
                  row._details.insertAfter(row.nTr);
                }
              });
            });
            api.on(colvisEvent, function(e, ctx, idx, vis) {
              if (settings !== ctx) {
                return;
              }
              var row, visible = _fnVisbleColumns(ctx);
              for (var i2 = 0, ien = data.length; i2 < ien; i2++) {
                row = data[i2];
                if (row._details) {
                  row._details.children("td[colspan]").attr("colspan", visible);
                }
              }
            });
            api.on(destroyEvent, function(e, ctx) {
              if (settings !== ctx) {
                return;
              }
              for (var i2 = 0, ien = data.length; i2 < ien; i2++) {
                if (data[i2]._details) {
                  __details_remove(api, i2);
                }
              }
            });
          }
        };
        var _emp = "";
        var _child_obj = _emp + "row().child";
        var _child_mth = _child_obj + "()";
        _api_register(_child_mth, function(data, klass) {
          var ctx = this.context;
          if (data === undefined2) {
            return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined2;
          } else if (data === true) {
            this.child.show();
          } else if (data === false) {
            __details_remove(this);
          } else if (ctx.length && this.length) {
            __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
          }
          return this;
        });
        _api_register([
          _child_obj + ".show()",
          _child_mth + ".show()"
          // only when `child()` was called with parameters (without
        ], function(show) {
          __details_display(this, true);
          return this;
        });
        _api_register([
          _child_obj + ".hide()",
          _child_mth + ".hide()"
          // only when `child()` was called with parameters (without
        ], function() {
          __details_display(this, false);
          return this;
        });
        _api_register([
          _child_obj + ".remove()",
          _child_mth + ".remove()"
          // only when `child()` was called with parameters (without
        ], function() {
          __details_remove(this);
          return this;
        });
        _api_register(_child_obj + ".isShown()", function() {
          var ctx = this.context;
          if (ctx.length && this.length) {
            return ctx[0].aoData[this[0]]._detailsShow || false;
          }
          return false;
        });
        var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;
        var __columnData = function(settings, column, r1, r2, rows) {
          var a = [];
          for (var row = 0, ien = rows.length; row < ien; row++) {
            a.push(_fnGetCellData(settings, rows[row], column));
          }
          return a;
        };
        var __column_selector = function(settings, selector, opts) {
          var columns = settings.aoColumns, names = _pluck(columns, "sName"), nodes = _pluck(columns, "nTh");
          var run = function(s) {
            var selInt = _intVal(s);
            if (s === "") {
              return _range(columns.length);
            }
            if (selInt !== null) {
              return [
                selInt >= 0 ? selInt : (
                  // Count from left
                  columns.length + selInt
                )
                // Count from right (+ because its a negative value)
              ];
            }
            if (typeof s === "function") {
              var rows = _selector_row_indexes(settings, opts);
              return $2.map(columns, function(col, idx2) {
                return s(
                  idx2,
                  __columnData(settings, idx2, 0, 0, rows),
                  nodes[idx2]
                ) ? idx2 : null;
              });
            }
            var match = typeof s === "string" ? s.match(__re_column_selector) : "";
            if (match) {
              switch (match[2]) {
                case "visIdx":
                case "visible":
                  var idx = parseInt(match[1], 10);
                  if (idx < 0) {
                    var visColumns = $2.map(columns, function(col, i2) {
                      return col.bVisible ? i2 : null;
                    });
                    return [visColumns[visColumns.length + idx]];
                  }
                  return [_fnVisibleToColumnIndex(settings, idx)];
                case "name":
                  return $2.map(names, function(name, i2) {
                    return name === match[1] ? i2 : null;
                  });
                default:
                  return [];
              }
            }
            if (s.nodeName && s._DT_CellIndex) {
              return [s._DT_CellIndex.column];
            }
            var jqResult = $2(nodes).filter(s).map(function() {
              return $2.inArray(this, nodes);
            }).toArray();
            if (jqResult.length || !s.nodeName) {
              return jqResult;
            }
            var host = $2(s).closest("*[data-dt-column]");
            return host.length ? [host.data("dt-column")] : [];
          };
          return _selector_run("column", selector, run, settings, opts);
        };
        var __setColumnVis = function(settings, column, vis) {
          var cols = settings.aoColumns, col = cols[column], data = settings.aoData, row, cells, i2, ien, tr;
          if (vis === undefined2) {
            return col.bVisible;
          }
          if (col.bVisible === vis) {
            return;
          }
          if (vis) {
            var insertBefore = $2.inArray(true, _pluck(cols, "bVisible"), column + 1);
            for (i2 = 0, ien = data.length; i2 < ien; i2++) {
              tr = data[i2].nTr;
              cells = data[i2].anCells;
              if (tr) {
                tr.insertBefore(cells[column], cells[insertBefore] || null);
              }
            }
          } else {
            $2(_pluck(settings.aoData, "anCells", column)).detach();
          }
          col.bVisible = vis;
        };
        _api_register("columns()", function(selector, opts) {
          if (selector === undefined2) {
            selector = "";
          } else if ($2.isPlainObject(selector)) {
            opts = selector;
            selector = "";
          }
          opts = _selector_opts(opts);
          var inst = this.iterator("table", function(settings) {
            return __column_selector(settings, selector, opts);
          }, 1);
          inst.selector.cols = selector;
          inst.selector.opts = opts;
          return inst;
        });
        _api_registerPlural("columns().header()", "column().header()", function(selector, opts) {
          return this.iterator("column", function(settings, column) {
            return settings.aoColumns[column].nTh;
          }, 1);
        });
        _api_registerPlural("columns().footer()", "column().footer()", function(selector, opts) {
          return this.iterator("column", function(settings, column) {
            return settings.aoColumns[column].nTf;
          }, 1);
        });
        _api_registerPlural("columns().data()", "column().data()", function() {
          return this.iterator("column-rows", __columnData, 1);
        });
        _api_registerPlural("columns().dataSrc()", "column().dataSrc()", function() {
          return this.iterator("column", function(settings, column) {
            return settings.aoColumns[column].mData;
          }, 1);
        });
        _api_registerPlural("columns().cache()", "column().cache()", function(type) {
          return this.iterator("column-rows", function(settings, column, i2, j, rows) {
            return _pluck_order(
              settings.aoData,
              rows,
              type === "search" ? "_aFilterData" : "_aSortData",
              column
            );
          }, 1);
        });
        _api_registerPlural("columns().nodes()", "column().nodes()", function() {
          return this.iterator("column-rows", function(settings, column, i2, j, rows) {
            return _pluck_order(settings.aoData, rows, "anCells", column);
          }, 1);
        });
        _api_registerPlural("columns().visible()", "column().visible()", function(vis, calc) {
          var that = this;
          var ret = this.iterator("column", function(settings, column) {
            if (vis === undefined2) {
              return settings.aoColumns[column].bVisible;
            }
            __setColumnVis(settings, column, vis);
          });
          if (vis !== undefined2) {
            this.iterator("table", function(settings) {
              _fnDrawHead(settings, settings.aoHeader);
              _fnDrawHead(settings, settings.aoFooter);
              if (!settings.aiDisplay.length) {
                $2(settings.nTBody).find("td[colspan]").attr("colspan", _fnVisbleColumns(settings));
              }
              _fnSaveState(settings);
              that.iterator("column", function(settings2, column) {
                _fnCallbackFire(settings2, null, "column-visibility", [settings2, column, vis, calc]);
              });
              if (calc === undefined2 || calc) {
                that.columns.adjust();
              }
            });
          }
          return ret;
        });
        _api_registerPlural("columns().indexes()", "column().index()", function(type) {
          return this.iterator("column", function(settings, column) {
            return type === "visible" ? _fnColumnIndexToVisible(settings, column) : column;
          }, 1);
        });
        _api_register("columns.adjust()", function() {
          return this.iterator("table", function(settings) {
            _fnAdjustColumnSizing(settings);
          }, 1);
        });
        _api_register("column.index()", function(type, idx) {
          if (this.context.length !== 0) {
            var ctx = this.context[0];
            if (type === "fromVisible" || type === "toData") {
              return _fnVisibleToColumnIndex(ctx, idx);
            } else if (type === "fromData" || type === "toVisible") {
              return _fnColumnIndexToVisible(ctx, idx);
            }
          }
        });
        _api_register("column()", function(selector, opts) {
          return _selector_first(this.columns(selector, opts));
        });
        var __cell_selector = function(settings, selector, opts) {
          var data = settings.aoData;
          var rows = _selector_row_indexes(settings, opts);
          var cells = _removeEmpty(_pluck_order(data, rows, "anCells"));
          var allCells = $2(_flatten([], cells));
          var row;
          var columns = settings.aoColumns.length;
          var a, i2, ien, j, o, host;
          var run = function(s) {
            var fnSelector = typeof s === "function";
            if (s === null || s === undefined2 || fnSelector) {
              a = [];
              for (i2 = 0, ien = rows.length; i2 < ien; i2++) {
                row = rows[i2];
                for (j = 0; j < columns; j++) {
                  o = {
                    row,
                    column: j
                  };
                  if (fnSelector) {
                    host = data[row];
                    if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
                      a.push(o);
                    }
                  } else {
                    a.push(o);
                  }
                }
              }
              return a;
            }
            if ($2.isPlainObject(s)) {
              return s.column !== undefined2 && s.row !== undefined2 && $2.inArray(s.row, rows) !== -1 ? [s] : [];
            }
            var jqResult = allCells.filter(s).map(function(i3, el) {
              return {
                // use a new object, in case someone changes the values
                row: el._DT_CellIndex.row,
                column: el._DT_CellIndex.column
              };
            }).toArray();
            if (jqResult.length || !s.nodeName) {
              return jqResult;
            }
            host = $2(s).closest("*[data-dt-row]");
            return host.length ? [{
              row: host.data("dt-row"),
              column: host.data("dt-column")
            }] : [];
          };
          return _selector_run("cell", selector, run, settings, opts);
        };
        _api_register("cells()", function(rowSelector, columnSelector, opts) {
          if ($2.isPlainObject(rowSelector)) {
            if (rowSelector.row === undefined2) {
              opts = rowSelector;
              rowSelector = null;
            } else {
              opts = columnSelector;
              columnSelector = null;
            }
          }
          if ($2.isPlainObject(columnSelector)) {
            opts = columnSelector;
            columnSelector = null;
          }
          if (columnSelector === null || columnSelector === undefined2) {
            return this.iterator("table", function(settings) {
              return __cell_selector(settings, rowSelector, _selector_opts(opts));
            });
          }
          var internalOpts = opts ? {
            page: opts.page,
            order: opts.order,
            search: opts.search
          } : {};
          var columns = this.columns(columnSelector, internalOpts);
          var rows = this.rows(rowSelector, internalOpts);
          var i2, ien, j, jen;
          var cellsNoOpts = this.iterator("table", function(settings, idx) {
            var a = [];
            for (i2 = 0, ien = rows[idx].length; i2 < ien; i2++) {
              for (j = 0, jen = columns[idx].length; j < jen; j++) {
                a.push({
                  row: rows[idx][i2],
                  column: columns[idx][j]
                });
              }
            }
            return a;
          }, 1);
          var cells = opts && opts.selected ? this.cells(cellsNoOpts, opts) : cellsNoOpts;
          $2.extend(cells.selector, {
            cols: columnSelector,
            rows: rowSelector,
            opts
          });
          return cells;
        });
        _api_registerPlural("cells().nodes()", "cell().node()", function() {
          return this.iterator("cell", function(settings, row, column) {
            var data = settings.aoData[row];
            return data && data.anCells ? data.anCells[column] : undefined2;
          }, 1);
        });
        _api_register("cells().data()", function() {
          return this.iterator("cell", function(settings, row, column) {
            return _fnGetCellData(settings, row, column);
          }, 1);
        });
        _api_registerPlural("cells().cache()", "cell().cache()", function(type) {
          type = type === "search" ? "_aFilterData" : "_aSortData";
          return this.iterator("cell", function(settings, row, column) {
            return settings.aoData[row][type][column];
          }, 1);
        });
        _api_registerPlural("cells().render()", "cell().render()", function(type) {
          return this.iterator("cell", function(settings, row, column) {
            return _fnGetCellData(settings, row, column, type);
          }, 1);
        });
        _api_registerPlural("cells().indexes()", "cell().index()", function() {
          return this.iterator("cell", function(settings, row, column) {
            return {
              row,
              column,
              columnVisible: _fnColumnIndexToVisible(settings, column)
            };
          }, 1);
        });
        _api_registerPlural("cells().invalidate()", "cell().invalidate()", function(src) {
          return this.iterator("cell", function(settings, row, column) {
            _fnInvalidate(settings, row, src, column);
          });
        });
        _api_register("cell()", function(rowSelector, columnSelector, opts) {
          return _selector_first(this.cells(rowSelector, columnSelector, opts));
        });
        _api_register("cell().data()", function(data) {
          var ctx = this.context;
          var cell = this[0];
          if (data === undefined2) {
            return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined2;
          }
          _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
          _fnInvalidate(ctx[0], cell[0].row, "data", cell[0].column);
          return this;
        });
        _api_register("order()", function(order2, dir) {
          var ctx = this.context;
          if (order2 === undefined2) {
            return ctx.length !== 0 ? ctx[0].aaSorting : undefined2;
          }
          if (typeof order2 === "number") {
            order2 = [[order2, dir]];
          } else if (order2.length && !Array.isArray(order2[0])) {
            order2 = Array.prototype.slice.call(arguments);
          }
          return this.iterator("table", function(settings) {
            settings.aaSorting = order2.slice();
          });
        });
        _api_register("order.listener()", function(node, column, callback) {
          return this.iterator("table", function(settings) {
            _fnSortAttachListener(settings, node, column, callback);
          });
        });
        _api_register("order.fixed()", function(set) {
          if (!set) {
            var ctx = this.context;
            var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined2;
            return Array.isArray(fixed) ? { pre: fixed } : fixed;
          }
          return this.iterator("table", function(settings) {
            settings.aaSortingFixed = $2.extend(true, {}, set);
          });
        });
        _api_register([
          "columns().order()",
          "column().order()"
        ], function(dir) {
          var that = this;
          return this.iterator("table", function(settings, i2) {
            var sort = [];
            $2.each(that[i2], function(j, col) {
              sort.push([col, dir]);
            });
            settings.aaSorting = sort;
          });
        });
        _api_register("search()", function(input, regex, smart, caseInsen) {
          var ctx = this.context;
          if (input === undefined2) {
            return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined2;
          }
          return this.iterator("table", function(settings) {
            if (!settings.oFeatures.bFilter) {
              return;
            }
            _fnFilterComplete(settings, $2.extend({}, settings.oPreviousSearch, {
              "sSearch": input + "",
              "bRegex": regex === null ? false : regex,
              "bSmart": smart === null ? true : smart,
              "bCaseInsensitive": caseInsen === null ? true : caseInsen
            }), 1);
          });
        });
        _api_registerPlural(
          "columns().search()",
          "column().search()",
          function(input, regex, smart, caseInsen) {
            return this.iterator("column", function(settings, column) {
              var preSearch = settings.aoPreSearchCols;
              if (input === undefined2) {
                return preSearch[column].sSearch;
              }
              if (!settings.oFeatures.bFilter) {
                return;
              }
              $2.extend(preSearch[column], {
                "sSearch": input + "",
                "bRegex": regex === null ? false : regex,
                "bSmart": smart === null ? true : smart,
                "bCaseInsensitive": caseInsen === null ? true : caseInsen
              });
              _fnFilterComplete(settings, settings.oPreviousSearch, 1);
            });
          }
        );
        _api_register("state()", function() {
          return this.context.length ? this.context[0].oSavedState : null;
        });
        _api_register("state.clear()", function() {
          return this.iterator("table", function(settings) {
            settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
          });
        });
        _api_register("state.loaded()", function() {
          return this.context.length ? this.context[0].oLoadedState : null;
        });
        _api_register("state.save()", function() {
          return this.iterator("table", function(settings) {
            _fnSaveState(settings);
          });
        });
        DataTable.versionCheck = DataTable.fnVersionCheck = function(version) {
          var aThis = DataTable.version.split(".");
          var aThat = version.split(".");
          var iThis, iThat;
          for (var i2 = 0, iLen = aThat.length; i2 < iLen; i2++) {
            iThis = parseInt(aThis[i2], 10) || 0;
            iThat = parseInt(aThat[i2], 10) || 0;
            if (iThis === iThat) {
              continue;
            }
            return iThis > iThat;
          }
          return true;
        };
        DataTable.isDataTable = DataTable.fnIsDataTable = function(table) {
          var t = $2(table).get(0);
          var is = false;
          if (table instanceof DataTable.Api) {
            return true;
          }
          $2.each(DataTable.settings, function(i2, o) {
            var head = o.nScrollHead ? $2("table", o.nScrollHead)[0] : null;
            var foot = o.nScrollFoot ? $2("table", o.nScrollFoot)[0] : null;
            if (o.nTable === t || head === t || foot === t) {
              is = true;
            }
          });
          return is;
        };
        DataTable.tables = DataTable.fnTables = function(visible) {
          var api = false;
          if ($2.isPlainObject(visible)) {
            api = visible.api;
            visible = visible.visible;
          }
          var a = $2.map(DataTable.settings, function(o) {
            if (!visible || visible && $2(o.nTable).is(":visible")) {
              return o.nTable;
            }
          });
          return api ? new _Api(a) : a;
        };
        DataTable.camelToHungarian = _fnCamelToHungarian;
        _api_register("$()", function(selector, opts) {
          var rows = this.rows(opts).nodes(), jqRows = $2(rows);
          return $2([].concat(
            jqRows.filter(selector).toArray(),
            jqRows.find(selector).toArray()
          ));
        });
        $2.each(["on", "one", "off"], function(i2, key) {
          _api_register(key + "()", function() {
            var args = Array.prototype.slice.call(arguments);
            args[0] = $2.map(args[0].split(/\s/), function(e) {
              return !e.match(/\.dt\b/) ? e + ".dt" : e;
            }).join(" ");
            var inst = $2(this.tables().nodes());
            inst[key].apply(inst, args);
            return this;
          });
        });
        _api_register("clear()", function() {
          return this.iterator("table", function(settings) {
            _fnClearTable(settings);
          });
        });
        _api_register("settings()", function() {
          return new _Api(this.context, this.context);
        });
        _api_register("init()", function() {
          var ctx = this.context;
          return ctx.length ? ctx[0].oInit : null;
        });
        _api_register("data()", function() {
          return this.iterator("table", function(settings) {
            return _pluck(settings.aoData, "_aData");
          }).flatten();
        });
        _api_register("destroy()", function(remove) {
          remove = remove || false;
          return this.iterator("table", function(settings) {
            var classes = settings.oClasses;
            var table = settings.nTable;
            var tbody = settings.nTBody;
            var thead = settings.nTHead;
            var tfoot = settings.nTFoot;
            var jqTable = $2(table);
            var jqTbody = $2(tbody);
            var jqWrapper = $2(settings.nTableWrapper);
            var rows = $2.map(settings.aoData, function(r) {
              return r.nTr;
            });
            var i2, ien;
            settings.bDestroying = true;
            _fnCallbackFire(settings, "aoDestroyCallback", "destroy", [settings]);
            if (!remove) {
              new _Api(settings).columns().visible(true);
            }
            jqWrapper.off(".DT").find(":not(tbody *)").off(".DT");
            $2(window2).off(".DT-" + settings.sInstance);
            if (table != thead.parentNode) {
              jqTable.children("thead").detach();
              jqTable.append(thead);
            }
            if (tfoot && table != tfoot.parentNode) {
              jqTable.children("tfoot").detach();
              jqTable.append(tfoot);
            }
            settings.aaSorting = [];
            settings.aaSortingFixed = [];
            _fnSortingClasses(settings);
            $2(rows).removeClass(settings.asStripeClasses.join(" "));
            $2("th, td", thead).removeClass(
              classes.sSortable + " " + classes.sSortableAsc + " " + classes.sSortableDesc + " " + classes.sSortableNone
            );
            jqTbody.children().detach();
            jqTbody.append(rows);
            var orig = settings.nTableWrapper.parentNode;
            var removedMethod = remove ? "remove" : "detach";
            jqTable[removedMethod]();
            jqWrapper[removedMethod]();
            if (!remove && orig) {
              orig.insertBefore(table, settings.nTableReinsertBefore);
              jqTable.css("width", settings.sDestroyWidth).removeClass(classes.sTable);
              ien = settings.asDestroyStripes.length;
              if (ien) {
                jqTbody.children().each(function(i3) {
                  $2(this).addClass(settings.asDestroyStripes[i3 % ien]);
                });
              }
            }
            var idx = $2.inArray(settings, DataTable.settings);
            if (idx !== -1) {
              DataTable.settings.splice(idx, 1);
            }
          });
        });
        $2.each(["column", "row", "cell"], function(i2, type) {
          _api_register(type + "s().every()", function(fn2) {
            var opts = this.selector.opts;
            var api = this;
            return this.iterator(type, function(settings, arg1, arg2, arg3, arg4) {
              fn2.call(
                api[type](
                  arg1,
                  type === "cell" ? arg2 : opts,
                  type === "cell" ? opts : undefined2
                ),
                arg1,
                arg2,
                arg3,
                arg4
              );
            });
          });
        });
        _api_register("i18n()", function(token, def, plural) {
          var ctx = this.context[0];
          var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);
          if (resolved === undefined2) {
            resolved = def;
          }
          if (plural !== undefined2 && $2.isPlainObject(resolved)) {
            resolved = resolved[plural] !== undefined2 ? resolved[plural] : resolved._;
          }
          return resolved.replace("%d", plural);
        });
        DataTable.version = "1.12.1";
        DataTable.settings = [];
        DataTable.models = {};
        DataTable.models.oSearch = {
          /**
           * Flag to indicate if the filtering should be case insensitive or not
           *  @type boolean
           *  @default true
           */
          "bCaseInsensitive": true,
          /**
           * Applied search term
           *  @type string
           *  @default <i>Empty string</i>
           */
          "sSearch": "",
          /**
           * Flag to indicate if the search term should be interpreted as a
           * regular expression (true) or not (false) and therefore and special
           * regex characters escaped.
           *  @type boolean
           *  @default false
           */
          "bRegex": false,
          /**
           * Flag to indicate if DataTables is to use its smart filtering or not.
           *  @type boolean
           *  @default true
           */
          "bSmart": true,
          /**
           * Flag to indicate if DataTables should only trigger a search when
           * the return key is pressed.
           *  @type boolean
           *  @default false
           */
          "return": false
        };
        DataTable.models.oRow = {
          /**
           * TR element for the row
           *  @type node
           *  @default null
           */
          "nTr": null,
          /**
           * Array of TD elements for each row. This is null until the row has been
           * created.
           *  @type array nodes
           *  @default []
           */
          "anCells": null,
          /**
           * Data object from the original data source for the row. This is either
           * an array if using the traditional form of DataTables, or an object if
           * using mData options. The exact type will depend on the passed in
           * data from the data source, or will be an array if using DOM a data
           * source.
           *  @type array|object
           *  @default []
           */
          "_aData": [],
          /**
           * Sorting data cache - this array is ostensibly the same length as the
           * number of columns (although each index is generated only as it is
           * needed), and holds the data that is used for sorting each column in the
           * row. We do this cache generation at the start of the sort in order that
           * the formatting of the sort data need be done only once for each cell
           * per sort. This array should not be read from or written to by anything
           * other than the master sorting methods.
           *  @type array
           *  @default null
           *  @private
           */
          "_aSortData": null,
          /**
           * Per cell filtering data cache. As per the sort data cache, used to
           * increase the performance of the filtering in DataTables
           *  @type array
           *  @default null
           *  @private
           */
          "_aFilterData": null,
          /**
           * Filtering data cache. This is the same as the cell filtering cache, but
           * in this case a string rather than an array. This is easily computed with
           * a join on `_aFilterData`, but is provided as a cache so the join isn't
           * needed on every search (memory traded for performance)
           *  @type array
           *  @default null
           *  @private
           */
          "_sFilterRow": null,
          /**
           * Cache of the class name that DataTables has applied to the row, so we
           * can quickly look at this variable rather than needing to do a DOM check
           * on className for the nTr property.
           *  @type string
           *  @default <i>Empty string</i>
           *  @private
           */
          "_sRowStripe": "",
          /**
           * Denote if the original data source was from the DOM, or the data source
           * object. This is used for invalidating data, so DataTables can
           * automatically read data from the original source, unless uninstructed
           * otherwise.
           *  @type string
           *  @default null
           *  @private
           */
          "src": null,
          /**
           * Index in the aoData array. This saves an indexOf lookup when we have the
           * object, but want to know the index
           *  @type integer
           *  @default -1
           *  @private
           */
          "idx": -1
        };
        DataTable.models.oColumn = {
          /**
           * Column index. This could be worked out on-the-fly with $.inArray, but it
           * is faster to just hold it as a variable
           *  @type integer
           *  @default null
           */
          "idx": null,
          /**
           * A list of the columns that sorting should occur on when this column
           * is sorted. That this property is an array allows multi-column sorting
           * to be defined for a column (for example first name / last name columns
           * would benefit from this). The values are integers pointing to the
           * columns to be sorted on (typically it will be a single integer pointing
           * at itself, but that doesn't need to be the case).
           *  @type array
           */
          "aDataSort": null,
          /**
           * Define the sorting directions that are applied to the column, in sequence
           * as the column is repeatedly sorted upon - i.e. the first value is used
           * as the sorting direction when the column if first sorted (clicked on).
           * Sort it again (click again) and it will move on to the next index.
           * Repeat until loop.
           *  @type array
           */
          "asSorting": null,
          /**
           * Flag to indicate if the column is searchable, and thus should be included
           * in the filtering or not.
           *  @type boolean
           */
          "bSearchable": null,
          /**
           * Flag to indicate if the column is sortable or not.
           *  @type boolean
           */
          "bSortable": null,
          /**
           * Flag to indicate if the column is currently visible in the table or not
           *  @type boolean
           */
          "bVisible": null,
          /**
           * Store for manual type assignment using the `column.type` option. This
           * is held in store so we can manipulate the column's `sType` property.
           *  @type string
           *  @default null
           *  @private
           */
          "_sManualType": null,
          /**
           * Flag to indicate if HTML5 data attributes should be used as the data
           * source for filtering or sorting. True is either are.
           *  @type boolean
           *  @default false
           *  @private
           */
          "_bAttrSrc": false,
          /**
           * Developer definable function that is called whenever a cell is created (Ajax source,
           * etc) or processed for input (DOM source). This can be used as a compliment to mRender
           * allowing you to modify the DOM element (add background colour for example) when the
           * element is available.
           *  @type function
           *  @param {element} nTd The TD node that has been created
           *  @param {*} sData The Data for the cell
           *  @param {array|object} oData The data for the whole row
           *  @param {int} iRow The row index for the aoData data store
           *  @default null
           */
          "fnCreatedCell": null,
          /**
           * Function to get data from a cell in a column. You should <b>never</b>
           * access data directly through _aData internally in DataTables - always use
           * the method attached to this property. It allows mData to function as
           * required. This function is automatically assigned by the column
           * initialisation method
           *  @type function
           *  @param {array|object} oData The data array/object for the array
           *    (i.e. aoData[]._aData)
           *  @param {string} sSpecific The specific data type you want to get -
           *    'display', 'type' 'filter' 'sort'
           *  @returns {*} The data for the cell from the given row's data
           *  @default null
           */
          "fnGetData": null,
          /**
           * Function to set data for a cell in the column. You should <b>never</b>
           * set the data directly to _aData internally in DataTables - always use
           * this method. It allows mData to function as required. This function
           * is automatically assigned by the column initialisation method
           *  @type function
           *  @param {array|object} oData The data array/object for the array
           *    (i.e. aoData[]._aData)
           *  @param {*} sValue Value to set
           *  @default null
           */
          "fnSetData": null,
          /**
           * Property to read the value for the cells in the column from the data
           * source array / object. If null, then the default content is used, if a
           * function is given then the return from the function is used.
           *  @type function|int|string|null
           *  @default null
           */
          "mData": null,
          /**
           * Partner property to mData which is used (only when defined) to get
           * the data - i.e. it is basically the same as mData, but without the
           * 'set' option, and also the data fed to it is the result from mData.
           * This is the rendering method to match the data method of mData.
           *  @type function|int|string|null
           *  @default null
           */
          "mRender": null,
          /**
           * Unique header TH/TD element for this column - this is what the sorting
           * listener is attached to (if sorting is enabled.)
           *  @type node
           *  @default null
           */
          "nTh": null,
          /**
           * Unique footer TH/TD element for this column (if there is one). Not used
           * in DataTables as such, but can be used for plug-ins to reference the
           * footer for each column.
           *  @type node
           *  @default null
           */
          "nTf": null,
          /**
           * The class to apply to all TD elements in the table's TBODY for the column
           *  @type string
           *  @default null
           */
          "sClass": null,
          /**
           * When DataTables calculates the column widths to assign to each column,
           * it finds the longest string in each column and then constructs a
           * temporary table and reads the widths from that. The problem with this
           * is that "mmm" is much wider then "iiii", but the latter is a longer
           * string - thus the calculation can go wrong (doing it properly and putting
           * it into an DOM object and measuring that is horribly(!) slow). Thus as
           * a "work around" we provide this option. It will append its value to the
           * text that is found to be the longest string for the column - i.e. padding.
           *  @type string
           */
          "sContentPadding": null,
          /**
           * Allows a default value to be given for a column's data, and will be used
           * whenever a null data source is encountered (this can be because mData
           * is set to null, or because the data source itself is null).
           *  @type string
           *  @default null
           */
          "sDefaultContent": null,
          /**
           * Name for the column, allowing reference to the column by name as well as
           * by index (needs a lookup to work by name).
           *  @type string
           */
          "sName": null,
          /**
           * Custom sorting data type - defines which of the available plug-ins in
           * afnSortData the custom sorting will use - if any is defined.
           *  @type string
           *  @default std
           */
          "sSortDataType": "std",
          /**
           * Class to be applied to the header element when sorting on this column
           *  @type string
           *  @default null
           */
          "sSortingClass": null,
          /**
           * Class to be applied to the header element when sorting on this column -
           * when jQuery UI theming is used.
           *  @type string
           *  @default null
           */
          "sSortingClassJUI": null,
          /**
           * Title of the column - what is seen in the TH element (nTh).
           *  @type string
           */
          "sTitle": null,
          /**
           * Column sorting and filtering type
           *  @type string
           *  @default null
           */
          "sType": null,
          /**
           * Width of the column
           *  @type string
           *  @default null
           */
          "sWidth": null,
          /**
           * Width of the column when it was first "encountered"
           *  @type string
           *  @default null
           */
          "sWidthOrig": null
        };
        DataTable.defaults = {
          /**
           * An array of data to use for the table, passed in at initialisation which
           * will be used in preference to any data which is already in the DOM. This is
           * particularly useful for constructing tables purely in Javascript, for
           * example with a custom Ajax call.
           *  @type array
           *  @default null
           *
           *  @dtopt Option
           *  @name DataTable.defaults.data
           *
           *  @example
           *    // Using a 2D array data source
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "data": [
           *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
           *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
           *        ],
           *        "columns": [
           *          { "title": "Engine" },
           *          { "title": "Browser" },
           *          { "title": "Platform" },
           *          { "title": "Version" },
           *          { "title": "Grade" }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using an array of objects as a data source (`data`)
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "data": [
           *          {
           *            "engine":   "Trident",
           *            "browser":  "Internet Explorer 4.0",
           *            "platform": "Win 95+",
           *            "version":  4,
           *            "grade":    "X"
           *          },
           *          {
           *            "engine":   "Trident",
           *            "browser":  "Internet Explorer 5.0",
           *            "platform": "Win 95+",
           *            "version":  5,
           *            "grade":    "C"
           *          }
           *        ],
           *        "columns": [
           *          { "title": "Engine",   "data": "engine" },
           *          { "title": "Browser",  "data": "browser" },
           *          { "title": "Platform", "data": "platform" },
           *          { "title": "Version",  "data": "version" },
           *          { "title": "Grade",    "data": "grade" }
           *        ]
           *      } );
           *    } );
           */
          "aaData": null,
          /**
           * If ordering is enabled, then DataTables will perform a first pass sort on
           * initialisation. You can define which column(s) the sort is performed
           * upon, and the sorting direction, with this variable. The `sorting` array
           * should contain an array for each column to be sorted initially containing
           * the column's index and a direction string ('asc' or 'desc').
           *  @type array
           *  @default [[0,'asc']]
           *
           *  @dtopt Option
           *  @name DataTable.defaults.order
           *
           *  @example
           *    // Sort by 3rd column first, and then 4th column
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "order": [[2,'asc'], [3,'desc']]
           *      } );
           *    } );
           *
           *    // No initial sorting
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "order": []
           *      } );
           *    } );
           */
          "aaSorting": [[0, "asc"]],
          /**
           * This parameter is basically identical to the `sorting` parameter, but
           * cannot be overridden by user interaction with the table. What this means
           * is that you could have a column (visible or hidden) which the sorting
           * will always be forced on first - any sorting after that (from the user)
           * will then be performed as required. This can be useful for grouping rows
           * together.
           *  @type array
           *  @default null
           *
           *  @dtopt Option
           *  @name DataTable.defaults.orderFixed
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "orderFixed": [[0,'asc']]
           *      } );
           *    } )
           */
          "aaSortingFixed": [],
          /**
           * DataTables can be instructed to load data to display in the table from a
           * Ajax source. This option defines how that Ajax call is made and where to.
           *
           * The `ajax` property has three different modes of operation, depending on
           * how it is defined. These are:
           *
           * * `string` - Set the URL from where the data should be loaded from.
           * * `object` - Define properties for `jQuery.ajax`.
           * * `function` - Custom data get function
           *
           * `string`
           * --------
           *
           * As a string, the `ajax` property simply defines the URL from which
           * DataTables will load data.
           *
           * `object`
           * --------
           *
           * As an object, the parameters in the object are passed to
           * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
           * of the Ajax request. DataTables has a number of default parameters which
           * you can override using this option. Please refer to the jQuery
           * documentation for a full description of the options available, although
           * the following parameters provide additional options in DataTables or
           * require special consideration:
           *
           * * `data` - As with jQuery, `data` can be provided as an object, but it
           *   can also be used as a function to manipulate the data DataTables sends
           *   to the server. The function takes a single parameter, an object of
           *   parameters with the values that DataTables has readied for sending. An
           *   object may be returned which will be merged into the DataTables
           *   defaults, or you can add the items to the object that was passed in and
           *   not return anything from the function. This supersedes `fnServerParams`
           *   from DataTables 1.9-.
           *
           * * `dataSrc` - By default DataTables will look for the property `data` (or
           *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
           *   from an Ajax source or for server-side processing - this parameter
           *   allows that property to be changed. You can use Javascript dotted
           *   object notation to get a data source for multiple levels of nesting, or
           *   it my be used as a function. As a function it takes a single parameter,
           *   the JSON returned from the server, which can be manipulated as
           *   required, with the returned value being that used by DataTables as the
           *   data source for the table. This supersedes `sAjaxDataProp` from
           *   DataTables 1.9-.
           *
           * * `success` - Should not be overridden it is used internally in
           *   DataTables. To manipulate / transform the data returned by the server
           *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
           *
           * `function`
           * ----------
           *
           * As a function, making the Ajax call is left up to yourself allowing
           * complete control of the Ajax request. Indeed, if desired, a method other
           * than Ajax could be used to obtain the required data, such as Web storage
           * or an AIR database.
           *
           * The function is given four parameters and no return is required. The
           * parameters are:
           *
           * 1. _object_ - Data to send to the server
           * 2. _function_ - Callback function that must be executed when the required
           *    data has been obtained. That data should be passed into the callback
           *    as the only parameter
           * 3. _object_ - DataTables settings object for the table
           *
           * Note that this supersedes `fnServerData` from DataTables 1.9-.
           *
           *  @type string|object|function
           *  @default null
           *
           *  @dtopt Option
           *  @name DataTable.defaults.ajax
           *  @since 1.10.0
           *
           * @example
           *   // Get JSON data from a file via Ajax.
           *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
           *   $('#example').dataTable( {
           *     "ajax": "data.json"
           *   } );
           *
           * @example
           *   // Get JSON data from a file via Ajax, using `dataSrc` to change
           *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
           *   $('#example').dataTable( {
           *     "ajax": {
           *       "url": "data.json",
           *       "dataSrc": "tableData"
           *     }
           *   } );
           *
           * @example
           *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
           *   // from a plain array rather than an array in an object
           *   $('#example').dataTable( {
           *     "ajax": {
           *       "url": "data.json",
           *       "dataSrc": ""
           *     }
           *   } );
           *
           * @example
           *   // Manipulate the data returned from the server - add a link to data
           *   // (note this can, should, be done using `render` for the column - this
           *   // is just a simple example of how the data can be manipulated).
           *   $('#example').dataTable( {
           *     "ajax": {
           *       "url": "data.json",
           *       "dataSrc": function ( json ) {
           *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
           *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
           *         }
           *         return json;
           *       }
           *     }
           *   } );
           *
           * @example
           *   // Add data to the request
           *   $('#example').dataTable( {
           *     "ajax": {
           *       "url": "data.json",
           *       "data": function ( d ) {
           *         return {
           *           "extra_search": $('#extra').val()
           *         };
           *       }
           *     }
           *   } );
           *
           * @example
           *   // Send request as POST
           *   $('#example').dataTable( {
           *     "ajax": {
           *       "url": "data.json",
           *       "type": "POST"
           *     }
           *   } );
           *
           * @example
           *   // Get the data from localStorage (could interface with a form for
           *   // adding, editing and removing rows).
           *   $('#example').dataTable( {
           *     "ajax": function (data, callback, settings) {
           *       callback(
           *         JSON.parse( localStorage.getItem('dataTablesData') )
           *       );
           *     }
           *   } );
           */
          "ajax": null,
          /**
           * This parameter allows you to readily specify the entries in the length drop
           * down menu that DataTables shows when pagination is enabled. It can be
           * either a 1D array of options which will be used for both the displayed
           * option and the value, or a 2D array which will use the array in the first
           * position as the value, and the array in the second position as the
           * displayed options (useful for language strings such as 'All').
           *
           * Note that the `pageLength` property will be automatically set to the
           * first value given in this array, unless `pageLength` is also provided.
           *  @type array
           *  @default [ 10, 25, 50, 100 ]
           *
           *  @dtopt Option
           *  @name DataTable.defaults.lengthMenu
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
           *      } );
           *    } );
           */
          "aLengthMenu": [10, 25, 50, 100],
          /**
           * The `columns` option in the initialisation parameter allows you to define
           * details about the way individual columns behave. For a full list of
           * column options that can be set, please see
           * {@link DataTable.defaults.column}. Note that if you use `columns` to
           * define your columns, you must have an entry in the array for every single
           * column that you have in your table (these can be null if you don't which
           * to specify any options).
           *  @member
           *
           *  @name DataTable.defaults.column
           */
          "aoColumns": null,
          /**
           * Very similar to `columns`, `columnDefs` allows you to target a specific
           * column, multiple columns, or all columns, using the `targets` property of
           * each object in the array. This allows great flexibility when creating
           * tables, as the `columnDefs` arrays can be of any length, targeting the
           * columns you specifically want. `columnDefs` may use any of the column
           * options available: {@link DataTable.defaults.column}, but it _must_
           * have `targets` defined in each object in the array. Values in the `targets`
           * array may be:
           *   <ul>
           *     <li>a string - class name will be matched on the TH for the column</li>
           *     <li>0 or a positive integer - column index counting from the left</li>
           *     <li>a negative integer - column index counting from the right</li>
           *     <li>the string "_all" - all columns (i.e. assign a default)</li>
           *   </ul>
           *  @member
           *
           *  @name DataTable.defaults.columnDefs
           */
          "aoColumnDefs": null,
          /**
           * Basically the same as `search`, this parameter defines the individual column
           * filtering state at initialisation time. The array must be of the same size
           * as the number of columns, and each element be an object with the parameters
           * `search` and `escapeRegex` (the latter is optional). 'null' is also
           * accepted and the default will be used.
           *  @type array
           *  @default []
           *
           *  @dtopt Option
           *  @name DataTable.defaults.searchCols
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "searchCols": [
           *          null,
           *          { "search": "My filter" },
           *          null,
           *          { "search": "^[0-9]", "escapeRegex": false }
           *        ]
           *      } );
           *    } )
           */
          "aoSearchCols": [],
          /**
           * An array of CSS classes that should be applied to displayed rows. This
           * array may be of any length, and DataTables will apply each class
           * sequentially, looping when required.
           *  @type array
           *  @default null <i>Will take the values determined by the `oClasses.stripe*`
           *    options</i>
           *
           *  @dtopt Option
           *  @name DataTable.defaults.stripeClasses
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
           *      } );
           *    } )
           */
          "asStripeClasses": null,
          /**
           * Enable or disable automatic column width calculation. This can be disabled
           * as an optimisation (it takes some time to calculate the widths) if the
           * tables widths are passed in using `columns`.
           *  @type boolean
           *  @default true
           *
           *  @dtopt Features
           *  @name DataTable.defaults.autoWidth
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "autoWidth": false
           *      } );
           *    } );
           */
          "bAutoWidth": true,
          /**
           * Deferred rendering can provide DataTables with a huge speed boost when you
           * are using an Ajax or JS data source for the table. This option, when set to
           * true, will cause DataTables to defer the creation of the table elements for
           * each row until they are needed for a draw - saving a significant amount of
           * time.
           *  @type boolean
           *  @default false
           *
           *  @dtopt Features
           *  @name DataTable.defaults.deferRender
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "ajax": "sources/arrays.txt",
           *        "deferRender": true
           *      } );
           *    } );
           */
          "bDeferRender": false,
          /**
           * Replace a DataTable which matches the given selector and replace it with
           * one which has the properties of the new initialisation object passed. If no
           * table matches the selector, then the new DataTable will be constructed as
           * per normal.
           *  @type boolean
           *  @default false
           *
           *  @dtopt Options
           *  @name DataTable.defaults.destroy
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "srollY": "200px",
           *        "paginate": false
           *      } );
           *
           *      // Some time later....
           *      $('#example').dataTable( {
           *        "filter": false,
           *        "destroy": true
           *      } );
           *    } );
           */
          "bDestroy": false,
          /**
           * Enable or disable filtering of data. Filtering in DataTables is "smart" in
           * that it allows the end user to input multiple words (space separated) and
           * will match a row containing those words, even if not in the order that was
           * specified (this allow matching across multiple columns). Note that if you
           * wish to use filtering in DataTables this must remain 'true' - to remove the
           * default filtering input box and retain filtering abilities, please use
           * {@link DataTable.defaults.dom}.
           *  @type boolean
           *  @default true
           *
           *  @dtopt Features
           *  @name DataTable.defaults.searching
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "searching": false
           *      } );
           *    } );
           */
          "bFilter": true,
          /**
           * Enable or disable the table information display. This shows information
           * about the data that is currently visible on the page, including information
           * about filtered data if that action is being performed.
           *  @type boolean
           *  @default true
           *
           *  @dtopt Features
           *  @name DataTable.defaults.info
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "info": false
           *      } );
           *    } );
           */
          "bInfo": true,
          /**
           * Allows the end user to select the size of a formatted page from a select
           * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
           *  @type boolean
           *  @default true
           *
           *  @dtopt Features
           *  @name DataTable.defaults.lengthChange
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "lengthChange": false
           *      } );
           *    } );
           */
          "bLengthChange": true,
          /**
           * Enable or disable pagination.
           *  @type boolean
           *  @default true
           *
           *  @dtopt Features
           *  @name DataTable.defaults.paging
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "paging": false
           *      } );
           *    } );
           */
          "bPaginate": true,
          /**
           * Enable or disable the display of a 'processing' indicator when the table is
           * being processed (e.g. a sort). This is particularly useful for tables with
           * large amounts of data where it can take a noticeable amount of time to sort
           * the entries.
           *  @type boolean
           *  @default false
           *
           *  @dtopt Features
           *  @name DataTable.defaults.processing
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "processing": true
           *      } );
           *    } );
           */
          "bProcessing": false,
          /**
           * Retrieve the DataTables object for the given selector. Note that if the
           * table has already been initialised, this parameter will cause DataTables
           * to simply return the object that has already been set up - it will not take
           * account of any changes you might have made to the initialisation object
           * passed to DataTables (setting this parameter to true is an acknowledgement
           * that you understand this). `destroy` can be used to reinitialise a table if
           * you need.
           *  @type boolean
           *  @default false
           *
           *  @dtopt Options
           *  @name DataTable.defaults.retrieve
           *
           *  @example
           *    $(document).ready( function() {
           *      initTable();
           *      tableActions();
           *    } );
           *
           *    function initTable ()
           *    {
           *      return $('#example').dataTable( {
           *        "scrollY": "200px",
           *        "paginate": false,
           *        "retrieve": true
           *      } );
           *    }
           *
           *    function tableActions ()
           *    {
           *      var table = initTable();
           *      // perform API operations with oTable
           *    }
           */
          "bRetrieve": false,
          /**
           * When vertical (y) scrolling is enabled, DataTables will force the height of
           * the table's viewport to the given height at all times (useful for layout).
           * However, this can look odd when filtering data down to a small data set,
           * and the footer is left "floating" further down. This parameter (when
           * enabled) will cause DataTables to collapse the table's viewport down when
           * the result set will fit within the given Y height.
           *  @type boolean
           *  @default false
           *
           *  @dtopt Options
           *  @name DataTable.defaults.scrollCollapse
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "scrollY": "200",
           *        "scrollCollapse": true
           *      } );
           *    } );
           */
          "bScrollCollapse": false,
          /**
           * Configure DataTables to use server-side processing. Note that the
           * `ajax` parameter must also be given in order to give DataTables a
           * source to obtain the required data for each draw.
           *  @type boolean
           *  @default false
           *
           *  @dtopt Features
           *  @dtopt Server-side
           *  @name DataTable.defaults.serverSide
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "serverSide": true,
           *        "ajax": "xhr.php"
           *      } );
           *    } );
           */
          "bServerSide": false,
          /**
           * Enable or disable sorting of columns. Sorting of individual columns can be
           * disabled by the `sortable` option for each column.
           *  @type boolean
           *  @default true
           *
           *  @dtopt Features
           *  @name DataTable.defaults.ordering
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "ordering": false
           *      } );
           *    } );
           */
          "bSort": true,
          /**
           * Enable or display DataTables' ability to sort multiple columns at the
           * same time (activated by shift-click by the user).
           *  @type boolean
           *  @default true
           *
           *  @dtopt Options
           *  @name DataTable.defaults.orderMulti
           *
           *  @example
           *    // Disable multiple column sorting ability
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "orderMulti": false
           *      } );
           *    } );
           */
          "bSortMulti": true,
          /**
           * Allows control over whether DataTables should use the top (true) unique
           * cell that is found for a single column, or the bottom (false - default).
           * This is useful when using complex headers.
           *  @type boolean
           *  @default false
           *
           *  @dtopt Options
           *  @name DataTable.defaults.orderCellsTop
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "orderCellsTop": true
           *      } );
           *    } );
           */
          "bSortCellsTop": false,
          /**
           * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
           * `sorting\_3` to the columns which are currently being sorted on. This is
           * presented as a feature switch as it can increase processing time (while
           * classes are removed and added) so for large data sets you might want to
           * turn this off.
           *  @type boolean
           *  @default true
           *
           *  @dtopt Features
           *  @name DataTable.defaults.orderClasses
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "orderClasses": false
           *      } );
           *    } );
           */
          "bSortClasses": true,
          /**
           * Enable or disable state saving. When enabled HTML5 `localStorage` will be
           * used to save table display information such as pagination information,
           * display length, filtering and sorting. As such when the end user reloads
           * the page the display display will match what thy had previously set up.
           *
           * Due to the use of `localStorage` the default state saving is not supported
           * in IE6 or 7. If state saving is required in those browsers, use
           * `stateSaveCallback` to provide a storage solution such as cookies.
           *  @type boolean
           *  @default false
           *
           *  @dtopt Features
           *  @name DataTable.defaults.stateSave
           *
           *  @example
           *    $(document).ready( function () {
           *      $('#example').dataTable( {
           *        "stateSave": true
           *      } );
           *    } );
           */
          "bStateSave": false,
          /**
           * This function is called when a TR element is created (and all TD child
           * elements have been inserted), or registered if using a DOM source, allowing
           * manipulation of the TR element (adding classes etc).
           *  @type function
           *  @param {node} row "TR" element for the current row
           *  @param {array} data Raw data array for this row
           *  @param {int} dataIndex The index of this row in the internal aoData array
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.createdRow
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "createdRow": function( row, data, dataIndex ) {
           *          // Bold the grade for all 'A' grade browsers
           *          if ( data[4] == "A" )
           *          {
           *            $('td:eq(4)', row).html( '<b>A</b>' );
           *          }
           *        }
           *      } );
           *    } );
           */
          "fnCreatedRow": null,
          /**
           * This function is called on every 'draw' event, and allows you to
           * dynamically modify any aspect you want about the created DOM.
           *  @type function
           *  @param {object} settings DataTables settings object
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.drawCallback
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "drawCallback": function( settings ) {
           *          alert( 'DataTables has redrawn the table' );
           *        }
           *      } );
           *    } );
           */
          "fnDrawCallback": null,
          /**
           * Identical to fnHeaderCallback() but for the table footer this function
           * allows you to modify the table footer on every 'draw' event.
           *  @type function
           *  @param {node} foot "TR" element for the footer
           *  @param {array} data Full table data (as derived from the original HTML)
           *  @param {int} start Index for the current display starting point in the
           *    display array
           *  @param {int} end Index for the current display ending point in the
           *    display array
           *  @param {array int} display Index array to translate the visual position
           *    to the full data array
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.footerCallback
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "footerCallback": function( tfoot, data, start, end, display ) {
           *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
           *        }
           *      } );
           *    } )
           */
          "fnFooterCallback": null,
          /**
           * When rendering large numbers in the information element for the table
           * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
           * to have a comma separator for the 'thousands' units (e.g. 1 million is
           * rendered as "1,000,000") to help readability for the end user. This
           * function will override the default method DataTables uses.
           *  @type function
           *  @member
           *  @param {int} toFormat number to be formatted
           *  @returns {string} formatted string for DataTables to show the number
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.formatNumber
           *
           *  @example
           *    // Format a number using a single quote for the separator (note that
           *    // this can also be done with the language.thousands option)
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "formatNumber": function ( toFormat ) {
           *          return toFormat.toString().replace(
           *            /\B(?=(\d{3})+(?!\d))/g, "'"
           *          );
           *        };
           *      } );
           *    } );
           */
          "fnFormatNumber": function(toFormat) {
            return toFormat.toString().replace(
              /\B(?=(\d{3})+(?!\d))/g,
              this.oLanguage.sThousands
            );
          },
          /**
           * This function is called on every 'draw' event, and allows you to
           * dynamically modify the header row. This can be used to calculate and
           * display useful information about the table.
           *  @type function
           *  @param {node} head "TR" element for the header
           *  @param {array} data Full table data (as derived from the original HTML)
           *  @param {int} start Index for the current display starting point in the
           *    display array
           *  @param {int} end Index for the current display ending point in the
           *    display array
           *  @param {array int} display Index array to translate the visual position
           *    to the full data array
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.headerCallback
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "fheaderCallback": function( head, data, start, end, display ) {
           *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
           *        }
           *      } );
           *    } )
           */
          "fnHeaderCallback": null,
          /**
           * The information element can be used to convey information about the current
           * state of the table. Although the internationalisation options presented by
           * DataTables are quite capable of dealing with most customisations, there may
           * be times where you wish to customise the string further. This callback
           * allows you to do exactly that.
           *  @type function
           *  @param {object} oSettings DataTables settings object
           *  @param {int} start Starting position in data for the draw
           *  @param {int} end End position in data for the draw
           *  @param {int} max Total number of rows in the table (regardless of
           *    filtering)
           *  @param {int} total Total number of rows in the data set, after filtering
           *  @param {string} pre The string that DataTables has formatted using it's
           *    own rules
           *  @returns {string} The string to be displayed in the information element.
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.infoCallback
           *
           *  @example
           *    $('#example').dataTable( {
           *      "infoCallback": function( settings, start, end, max, total, pre ) {
           *        return start +" to "+ end;
           *      }
           *    } );
           */
          "fnInfoCallback": null,
          /**
           * Called when the table has been initialised. Normally DataTables will
           * initialise sequentially and there will be no need for this function,
           * however, this does not hold true when using external language information
           * since that is obtained using an async XHR call.
           *  @type function
           *  @param {object} settings DataTables settings object
           *  @param {object} json The JSON object request from the server - only
           *    present if client-side Ajax sourced data is used
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.initComplete
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "initComplete": function(settings, json) {
           *          alert( 'DataTables has finished its initialisation.' );
           *        }
           *      } );
           *    } )
           */
          "fnInitComplete": null,
          /**
           * Called at the very start of each table draw and can be used to cancel the
           * draw by returning false, any other return (including undefined) results in
           * the full draw occurring).
           *  @type function
           *  @param {object} settings DataTables settings object
           *  @returns {boolean} False will cancel the draw, anything else (including no
           *    return) will allow it to complete.
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.preDrawCallback
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "preDrawCallback": function( settings ) {
           *          if ( $('#test').val() == 1 ) {
           *            return false;
           *          }
           *        }
           *      } );
           *    } );
           */
          "fnPreDrawCallback": null,
          /**
           * This function allows you to 'post process' each row after it have been
           * generated for each table draw, but before it is rendered on screen. This
           * function might be used for setting the row class name etc.
           *  @type function
           *  @param {node} row "TR" element for the current row
           *  @param {array} data Raw data array for this row
           *  @param {int} displayIndex The display index for the current table draw
           *  @param {int} displayIndexFull The index of the data in the full list of
           *    rows (after filtering)
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.rowCallback
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
           *          // Bold the grade for all 'A' grade browsers
           *          if ( data[4] == "A" ) {
           *            $('td:eq(4)', row).html( '<b>A</b>' );
           *          }
           *        }
           *      } );
           *    } );
           */
          "fnRowCallback": null,
          /**
           * __Deprecated__ The functionality provided by this parameter has now been
           * superseded by that provided through `ajax`, which should be used instead.
           *
           * This parameter allows you to override the default function which obtains
           * the data from the server so something more suitable for your application.
           * For example you could use POST data, or pull information from a Gears or
           * AIR database.
           *  @type function
           *  @member
           *  @param {string} source HTTP source to obtain the data from (`ajax`)
           *  @param {array} data A key/value pair object containing the data to send
           *    to the server
           *  @param {function} callback to be called on completion of the data get
           *    process that will draw the data on the page.
           *  @param {object} settings DataTables settings object
           *
           *  @dtopt Callbacks
           *  @dtopt Server-side
           *  @name DataTable.defaults.serverData
           *
           *  @deprecated 1.10. Please use `ajax` for this functionality now.
           */
          "fnServerData": null,
          /**
           * __Deprecated__ The functionality provided by this parameter has now been
           * superseded by that provided through `ajax`, which should be used instead.
           *
           *  It is often useful to send extra data to the server when making an Ajax
           * request - for example custom filtering information, and this callback
           * function makes it trivial to send extra information to the server. The
           * passed in parameter is the data set that has been constructed by
           * DataTables, and you can add to this or modify it as you require.
           *  @type function
           *  @param {array} data Data array (array of objects which are name/value
           *    pairs) that has been constructed by DataTables and will be sent to the
           *    server. In the case of Ajax sourced data with server-side processing
           *    this will be an empty array, for server-side processing there will be a
           *    significant number of parameters!
           *  @returns {undefined} Ensure that you modify the data array passed in,
           *    as this is passed by reference.
           *
           *  @dtopt Callbacks
           *  @dtopt Server-side
           *  @name DataTable.defaults.serverParams
           *
           *  @deprecated 1.10. Please use `ajax` for this functionality now.
           */
          "fnServerParams": null,
          /**
           * Load the table state. With this function you can define from where, and how, the
           * state of a table is loaded. By default DataTables will load from `localStorage`
           * but you might wish to use a server-side database or cookies.
           *  @type function
           *  @member
           *  @param {object} settings DataTables settings object
           *  @param {object} callback Callback that can be executed when done. It
           *    should be passed the loaded state object.
           *  @return {object} The DataTables state object to be loaded
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.stateLoadCallback
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "stateSave": true,
           *        "stateLoadCallback": function (settings, callback) {
           *          $.ajax( {
           *            "url": "/state_load",
           *            "dataType": "json",
           *            "success": function (json) {
           *              callback( json );
           *            }
           *          } );
           *        }
           *      } );
           *    } );
           */
          "fnStateLoadCallback": function(settings) {
            try {
              return JSON.parse(
                (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
                  "DataTables_" + settings.sInstance + "_" + location.pathname
                )
              );
            } catch (e) {
              return {};
            }
          },
          /**
           * Callback which allows modification of the saved state prior to loading that state.
           * This callback is called when the table is loading state from the stored data, but
           * prior to the settings object being modified by the saved state. Note that for
           * plug-in authors, you should use the `stateLoadParams` event to load parameters for
           * a plug-in.
           *  @type function
           *  @param {object} settings DataTables settings object
           *  @param {object} data The state object that is to be loaded
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.stateLoadParams
           *
           *  @example
           *    // Remove a saved filter, so filtering is never loaded
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "stateSave": true,
           *        "stateLoadParams": function (settings, data) {
           *          data.oSearch.sSearch = "";
           *        }
           *      } );
           *    } );
           *
           *  @example
           *    // Disallow state loading by returning false
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "stateSave": true,
           *        "stateLoadParams": function (settings, data) {
           *          return false;
           *        }
           *      } );
           *    } );
           */
          "fnStateLoadParams": null,
          /**
           * Callback that is called when the state has been loaded from the state saving method
           * and the DataTables settings object has been modified as a result of the loaded state.
           *  @type function
           *  @param {object} settings DataTables settings object
           *  @param {object} data The state object that was loaded
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.stateLoaded
           *
           *  @example
           *    // Show an alert with the filtering value that was saved
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "stateSave": true,
           *        "stateLoaded": function (settings, data) {
           *          alert( 'Saved filter was: '+data.oSearch.sSearch );
           *        }
           *      } );
           *    } );
           */
          "fnStateLoaded": null,
          /**
           * Save the table state. This function allows you to define where and how the state
           * information for the table is stored By default DataTables will use `localStorage`
           * but you might wish to use a server-side database or cookies.
           *  @type function
           *  @member
           *  @param {object} settings DataTables settings object
           *  @param {object} data The state object to be saved
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.stateSaveCallback
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "stateSave": true,
           *        "stateSaveCallback": function (settings, data) {
           *          // Send an Ajax request to the server with the state object
           *          $.ajax( {
           *            "url": "/state_save",
           *            "data": data,
           *            "dataType": "json",
           *            "method": "POST"
           *            "success": function () {}
           *          } );
           *        }
           *      } );
           *    } );
           */
          "fnStateSaveCallback": function(settings, data) {
            try {
              (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
                "DataTables_" + settings.sInstance + "_" + location.pathname,
                JSON.stringify(data)
              );
            } catch (e) {
            }
          },
          /**
           * Callback which allows modification of the state to be saved. Called when the table
           * has changed state a new state save is required. This method allows modification of
           * the state saving object prior to actually doing the save, including addition or
           * other state properties or modification. Note that for plug-in authors, you should
           * use the `stateSaveParams` event to save parameters for a plug-in.
           *  @type function
           *  @param {object} settings DataTables settings object
           *  @param {object} data The state object to be saved
           *
           *  @dtopt Callbacks
           *  @name DataTable.defaults.stateSaveParams
           *
           *  @example
           *    // Remove a saved filter, so filtering is never saved
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "stateSave": true,
           *        "stateSaveParams": function (settings, data) {
           *          data.oSearch.sSearch = "";
           *        }
           *      } );
           *    } );
           */
          "fnStateSaveParams": null,
          /**
           * Duration for which the saved state information is considered valid. After this period
           * has elapsed the state will be returned to the default.
           * Value is given in seconds.
           *  @type int
           *  @default 7200 <i>(2 hours)</i>
           *
           *  @dtopt Options
           *  @name DataTable.defaults.stateDuration
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "stateDuration": 60*60*24; // 1 day
           *      } );
           *    } )
           */
          "iStateDuration": 7200,
          /**
           * When enabled DataTables will not make a request to the server for the first
           * page draw - rather it will use the data already on the page (no sorting etc
           * will be applied to it), thus saving on an XHR at load time. `deferLoading`
           * is used to indicate that deferred loading is required, but it is also used
           * to tell DataTables how many records there are in the full table (allowing
           * the information element and pagination to be displayed correctly). In the case
           * where a filtering is applied to the table on initial load, this can be
           * indicated by giving the parameter as an array, where the first element is
           * the number of records available after filtering and the second element is the
           * number of records without filtering (allowing the table information element
           * to be shown correctly).
           *  @type int | array
           *  @default null
           *
           *  @dtopt Options
           *  @name DataTable.defaults.deferLoading
           *
           *  @example
           *    // 57 records available in the table, no filtering applied
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "serverSide": true,
           *        "ajax": "scripts/server_processing.php",
           *        "deferLoading": 57
           *      } );
           *    } );
           *
           *  @example
           *    // 57 records after filtering, 100 without filtering (an initial filter applied)
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "serverSide": true,
           *        "ajax": "scripts/server_processing.php",
           *        "deferLoading": [ 57, 100 ],
           *        "search": {
           *          "search": "my_filter"
           *        }
           *      } );
           *    } );
           */
          "iDeferLoading": null,
          /**
           * Number of rows to display on a single page when using pagination. If
           * feature enabled (`lengthChange`) then the end user will be able to override
           * this to a custom setting using a pop-up menu.
           *  @type int
           *  @default 10
           *
           *  @dtopt Options
           *  @name DataTable.defaults.pageLength
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "pageLength": 50
           *      } );
           *    } )
           */
          "iDisplayLength": 10,
          /**
           * Define the starting point for data display when using DataTables with
           * pagination. Note that this parameter is the number of records, rather than
           * the page number, so if you have 10 records per page and want to start on
           * the third page, it should be "20".
           *  @type int
           *  @default 0
           *
           *  @dtopt Options
           *  @name DataTable.defaults.displayStart
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "displayStart": 20
           *      } );
           *    } )
           */
          "iDisplayStart": 0,
          /**
           * By default DataTables allows keyboard navigation of the table (sorting, paging,
           * and filtering) by adding a `tabindex` attribute to the required elements. This
           * allows you to tab through the controls and press the enter key to activate them.
           * The tabindex is default 0, meaning that the tab follows the flow of the document.
           * You can overrule this using this parameter if you wish. Use a value of -1 to
           * disable built-in keyboard navigation.
           *  @type int
           *  @default 0
           *
           *  @dtopt Options
           *  @name DataTable.defaults.tabIndex
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "tabIndex": 1
           *      } );
           *    } );
           */
          "iTabIndex": 0,
          /**
           * Classes that DataTables assigns to the various components and features
           * that it adds to the HTML table. This allows classes to be configured
           * during initialisation in addition to through the static
           * {@link DataTable.ext.oStdClasses} object).
           *  @namespace
           *  @name DataTable.defaults.classes
           */
          "oClasses": {},
          /**
           * All strings that DataTables uses in the user interface that it creates
           * are defined in this object, allowing you to modified them individually or
           * completely replace them all as required.
           *  @namespace
           *  @name DataTable.defaults.language
           */
          "oLanguage": {
            /**
             * Strings that are used for WAI-ARIA labels and controls only (these are not
             * actually visible on the page, but will be read by screenreaders, and thus
             * must be internationalised as well).
             *  @namespace
             *  @name DataTable.defaults.language.aria
             */
            "oAria": {
              /**
               * ARIA label that is added to the table headers when the column may be
               * sorted ascending by activing the column (click or return when focused).
               * Note that the column header is prefixed to this string.
               *  @type string
               *  @default : activate to sort column ascending
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.aria.sortAscending
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "aria": {
               *            "sortAscending": " - click/return to sort ascending"
               *          }
               *        }
               *      } );
               *    } );
               */
              "sSortAscending": ": activate to sort column ascending",
              /**
               * ARIA label that is added to the table headers when the column may be
               * sorted descending by activing the column (click or return when focused).
               * Note that the column header is prefixed to this string.
               *  @type string
               *  @default : activate to sort column ascending
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.aria.sortDescending
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "aria": {
               *            "sortDescending": " - click/return to sort descending"
               *          }
               *        }
               *      } );
               *    } );
               */
              "sSortDescending": ": activate to sort column descending"
            },
            /**
             * Pagination string used by DataTables for the built-in pagination
             * control types.
             *  @namespace
             *  @name DataTable.defaults.language.paginate
             */
            "oPaginate": {
              /**
               * Text to use when using the 'full_numbers' type of pagination for the
               * button to take the user to the first page.
               *  @type string
               *  @default First
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.paginate.first
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "paginate": {
               *            "first": "First page"
               *          }
               *        }
               *      } );
               *    } );
               */
              "sFirst": "First",
              /**
               * Text to use when using the 'full_numbers' type of pagination for the
               * button to take the user to the last page.
               *  @type string
               *  @default Last
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.paginate.last
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "paginate": {
               *            "last": "Last page"
               *          }
               *        }
               *      } );
               *    } );
               */
              "sLast": "Last",
              /**
               * Text to use for the 'next' pagination button (to take the user to the
               * next page).
               *  @type string
               *  @default Next
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.paginate.next
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "paginate": {
               *            "next": "Next page"
               *          }
               *        }
               *      } );
               *    } );
               */
              "sNext": "Next",
              /**
               * Text to use for the 'previous' pagination button (to take the user to
               * the previous page).
               *  @type string
               *  @default Previous
               *
               *  @dtopt Language
               *  @name DataTable.defaults.language.paginate.previous
               *
               *  @example
               *    $(document).ready( function() {
               *      $('#example').dataTable( {
               *        "language": {
               *          "paginate": {
               *            "previous": "Previous page"
               *          }
               *        }
               *      } );
               *    } );
               */
              "sPrevious": "Previous"
            },
            /**
             * This string is shown in preference to `zeroRecords` when the table is
             * empty of data (regardless of filtering). Note that this is an optional
             * parameter - if it is not given, the value of `zeroRecords` will be used
             * instead (either the default or given value).
             *  @type string
             *  @default No data available in table
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.emptyTable
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "emptyTable": "No data available in table"
             *        }
             *      } );
             *    } );
             */
            "sEmptyTable": "No data available in table",
            /**
             * This string gives information to the end user about the information
             * that is current on display on the page. The following tokens can be
             * used in the string and will be dynamically replaced as the table
             * display updates. This tokens can be placed anywhere in the string, or
             * removed as needed by the language requires:
             *
             * * `\_START\_` - Display index of the first record on the current page
             * * `\_END\_` - Display index of the last record on the current page
             * * `\_TOTAL\_` - Number of records in the table after filtering
             * * `\_MAX\_` - Number of records in the table without filtering
             * * `\_PAGE\_` - Current page number
             * * `\_PAGES\_` - Total number of pages of data in the table
             *
             *  @type string
             *  @default Showing _START_ to _END_ of _TOTAL_ entries
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.info
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "info": "Showing page _PAGE_ of _PAGES_"
             *        }
             *      } );
             *    } );
             */
            "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
            /**
             * Display information string for when the table is empty. Typically the
             * format of this string should match `info`.
             *  @type string
             *  @default Showing 0 to 0 of 0 entries
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.infoEmpty
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "infoEmpty": "No entries to show"
             *        }
             *      } );
             *    } );
             */
            "sInfoEmpty": "Showing 0 to 0 of 0 entries",
            /**
             * When a user filters the information in a table, this string is appended
             * to the information (`info`) to give an idea of how strong the filtering
             * is. The variable _MAX_ is dynamically updated.
             *  @type string
             *  @default (filtered from _MAX_ total entries)
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.infoFiltered
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "infoFiltered": " - filtering from _MAX_ records"
             *        }
             *      } );
             *    } );
             */
            "sInfoFiltered": "(filtered from _MAX_ total entries)",
            /**
             * If can be useful to append extra information to the info string at times,
             * and this variable does exactly that. This information will be appended to
             * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
             * being used) at all times.
             *  @type string
             *  @default <i>Empty string</i>
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.infoPostFix
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "infoPostFix": "All records shown are derived from real information."
             *        }
             *      } );
             *    } );
             */
            "sInfoPostFix": "",
            /**
             * This decimal place operator is a little different from the other
             * language options since DataTables doesn't output floating point
             * numbers, so it won't ever use this for display of a number. Rather,
             * what this parameter does is modify the sort methods of the table so
             * that numbers which are in a format which has a character other than
             * a period (`.`) as a decimal place will be sorted numerically.
             *
             * Note that numbers with different decimal places cannot be shown in
             * the same table and still be sortable, the table must be consistent.
             * However, multiple different tables on the page can use different
             * decimal place characters.
             *  @type string
             *  @default 
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.decimal
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "decimal": ","
             *          "thousands": "."
             *        }
             *      } );
             *    } );
             */
            "sDecimal": "",
            /**
             * DataTables has a build in number formatter (`formatNumber`) which is
             * used to format large numbers that are used in the table information.
             * By default a comma is used, but this can be trivially changed to any
             * character you wish with this parameter.
             *  @type string
             *  @default ,
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.thousands
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "thousands": "'"
             *        }
             *      } );
             *    } );
             */
            "sThousands": ",",
            /**
             * Detail the action that will be taken when the drop down menu for the
             * pagination length option is changed. The '_MENU_' variable is replaced
             * with a default select list of 10, 25, 50 and 100, and can be replaced
             * with a custom select box if required.
             *  @type string
             *  @default Show _MENU_ entries
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.lengthMenu
             *
             *  @example
             *    // Language change only
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "lengthMenu": "Display _MENU_ records"
             *        }
             *      } );
             *    } );
             *
             *  @example
             *    // Language and options change
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "lengthMenu": 'Display <select>'+
             *            '<option value="10">10</option>'+
             *            '<option value="20">20</option>'+
             *            '<option value="30">30</option>'+
             *            '<option value="40">40</option>'+
             *            '<option value="50">50</option>'+
             *            '<option value="-1">All</option>'+
             *            '</select> records'
             *        }
             *      } );
             *    } );
             */
            "sLengthMenu": "Show _MENU_ entries",
            /**
             * When using Ajax sourced data and during the first draw when DataTables is
             * gathering the data, this message is shown in an empty row in the table to
             * indicate to the end user the the data is being loaded. Note that this
             * parameter is not used when loading data by server-side processing, just
             * Ajax sourced data with client-side processing.
             *  @type string
             *  @default Loading...
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.loadingRecords
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "loadingRecords": "Please wait - loading..."
             *        }
             *      } );
             *    } );
             */
            "sLoadingRecords": "Loading...",
            /**
             * Text which is displayed when the table is processing a user action
             * (usually a sort command or similar).
             *  @type string
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.processing
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "processing": "DataTables is currently busy"
             *        }
             *      } );
             *    } );
             */
            "sProcessing": "",
            /**
             * Details the actions that will be taken when the user types into the
             * filtering input text box. The variable "_INPUT_", if used in the string,
             * is replaced with the HTML text box for the filtering input allowing
             * control over where it appears in the string. If "_INPUT_" is not given
             * then the input box is appended to the string automatically.
             *  @type string
             *  @default Search:
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.search
             *
             *  @example
             *    // Input text box will be appended at the end automatically
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "search": "Filter records:"
             *        }
             *      } );
             *    } );
             *
             *  @example
             *    // Specify where the filter should appear
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "search": "Apply filter _INPUT_ to table"
             *        }
             *      } );
             *    } );
             */
            "sSearch": "Search:",
            /**
             * Assign a `placeholder` attribute to the search `input` element
             *  @type string
             *  @default 
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.searchPlaceholder
             */
            "sSearchPlaceholder": "",
            /**
             * All of the language information can be stored in a file on the
             * server-side, which DataTables will look up if this parameter is passed.
             * It must store the URL of the language file, which is in a JSON format,
             * and the object has the same properties as the oLanguage object in the
             * initialiser object (i.e. the above parameters). Please refer to one of
             * the example language files to see how this works in action.
             *  @type string
             *  @default <i>Empty string - i.e. disabled</i>
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.url
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
             *        }
             *      } );
             *    } );
             */
            "sUrl": "",
            /**
             * Text shown inside the table records when the is no information to be
             * displayed after filtering. `emptyTable` is shown when there is simply no
             * information in the table at all (regardless of filtering).
             *  @type string
             *  @default No matching records found
             *
             *  @dtopt Language
             *  @name DataTable.defaults.language.zeroRecords
             *
             *  @example
             *    $(document).ready( function() {
             *      $('#example').dataTable( {
             *        "language": {
             *          "zeroRecords": "No records to display"
             *        }
             *      } );
             *    } );
             */
            "sZeroRecords": "No matching records found"
          },
          /**
           * This parameter allows you to have define the global filtering state at
           * initialisation time. As an object the `search` parameter must be
           * defined, but all other parameters are optional. When `regex` is true,
           * the search string will be treated as a regular expression, when false
           * (default) it will be treated as a straight string. When `smart`
           * DataTables will use it's smart filtering methods (to word match at
           * any point in the data), when false this will not be done.
           *  @namespace
           *  @extends DataTable.models.oSearch
           *
           *  @dtopt Options
           *  @name DataTable.defaults.search
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "search": {"search": "Initial search"}
           *      } );
           *    } )
           */
          "oSearch": $2.extend({}, DataTable.models.oSearch),
          /**
           * __Deprecated__ The functionality provided by this parameter has now been
           * superseded by that provided through `ajax`, which should be used instead.
           *
           * By default DataTables will look for the property `data` (or `aaData` for
           * compatibility with DataTables 1.9-) when obtaining data from an Ajax
           * source or for server-side processing - this parameter allows that
           * property to be changed. You can use Javascript dotted object notation to
           * get a data source for multiple levels of nesting.
           *  @type string
           *  @default data
           *
           *  @dtopt Options
           *  @dtopt Server-side
           *  @name DataTable.defaults.ajaxDataProp
           *
           *  @deprecated 1.10. Please use `ajax` for this functionality now.
           */
          "sAjaxDataProp": "data",
          /**
           * __Deprecated__ The functionality provided by this parameter has now been
           * superseded by that provided through `ajax`, which should be used instead.
           *
           * You can instruct DataTables to load data from an external
           * source using this parameter (use aData if you want to pass data in you
           * already have). Simply provide a url a JSON object can be obtained from.
           *  @type string
           *  @default null
           *
           *  @dtopt Options
           *  @dtopt Server-side
           *  @name DataTable.defaults.ajaxSource
           *
           *  @deprecated 1.10. Please use `ajax` for this functionality now.
           */
          "sAjaxSource": null,
          /**
           * This initialisation variable allows you to specify exactly where in the
           * DOM you want DataTables to inject the various controls it adds to the page
           * (for example you might want the pagination controls at the top of the
           * table). DIV elements (with or without a custom class) can also be added to
           * aid styling. The follow syntax is used:
           *   <ul>
           *     <li>The following options are allowed:
           *       <ul>
           *         <li>'l' - Length changing</li>
           *         <li>'f' - Filtering input</li>
           *         <li>'t' - The table!</li>
           *         <li>'i' - Information</li>
           *         <li>'p' - Pagination</li>
           *         <li>'r' - pRocessing</li>
           *       </ul>
           *     </li>
           *     <li>The following constants are allowed:
           *       <ul>
           *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
           *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
           *       </ul>
           *     </li>
           *     <li>The following syntax is expected:
           *       <ul>
           *         <li>'&lt;' and '&gt;' - div elements</li>
           *         <li>'&lt;"class" and '&gt;' - div with a class</li>
           *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
           *       </ul>
           *     </li>
           *     <li>Examples:
           *       <ul>
           *         <li>'&lt;"wrapper"flipt&gt;'</li>
           *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
           *       </ul>
           *     </li>
           *   </ul>
           *  @type string
           *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
           *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
           *
           *  @dtopt Options
           *  @name DataTable.defaults.dom
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
           *      } );
           *    } );
           */
          "sDom": "lfrtip",
          /**
           * Search delay option. This will throttle full table searches that use the
           * DataTables provided search input element (it does not effect calls to
           * `dt-api search()`, providing a delay before the search is made.
           *  @type integer
           *  @default 0
           *
           *  @dtopt Options
           *  @name DataTable.defaults.searchDelay
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "searchDelay": 200
           *      } );
           *    } )
           */
          "searchDelay": null,
          /**
           * DataTables features six different built-in options for the buttons to
           * display for pagination control:
           *
           * * `numbers` - Page number buttons only
           * * `simple` - 'Previous' and 'Next' buttons only
           * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
           * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
           * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
           * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
           *  
           * Further methods can be added using {@link DataTable.ext.oPagination}.
           *  @type string
           *  @default simple_numbers
           *
           *  @dtopt Options
           *  @name DataTable.defaults.pagingType
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "pagingType": "full_numbers"
           *      } );
           *    } )
           */
          "sPaginationType": "simple_numbers",
          /**
           * Enable horizontal scrolling. When a table is too wide to fit into a
           * certain layout, or you have a large number of columns in the table, you
           * can enable x-scrolling to show the table in a viewport, which can be
           * scrolled. This property can be `true` which will allow the table to
           * scroll horizontally when needed, or any CSS unit, or a number (in which
           * case it will be treated as a pixel measurement). Setting as simply `true`
           * is recommended.
           *  @type boolean|string
           *  @default <i>blank string - i.e. disabled</i>
           *
           *  @dtopt Features
           *  @name DataTable.defaults.scrollX
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "scrollX": true,
           *        "scrollCollapse": true
           *      } );
           *    } );
           */
          "sScrollX": "",
          /**
           * This property can be used to force a DataTable to use more width than it
           * might otherwise do when x-scrolling is enabled. For example if you have a
           * table which requires to be well spaced, this parameter is useful for
           * "over-sizing" the table, and thus forcing scrolling. This property can by
           * any CSS unit, or a number (in which case it will be treated as a pixel
           * measurement).
           *  @type string
           *  @default <i>blank string - i.e. disabled</i>
           *
           *  @dtopt Options
           *  @name DataTable.defaults.scrollXInner
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "scrollX": "100%",
           *        "scrollXInner": "110%"
           *      } );
           *    } );
           */
          "sScrollXInner": "",
          /**
           * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
           * to the given height, and enable scrolling for any data which overflows the
           * current viewport. This can be used as an alternative to paging to display
           * a lot of data in a small area (although paging and scrolling can both be
           * enabled at the same time). This property can be any CSS unit, or a number
           * (in which case it will be treated as a pixel measurement).
           *  @type string
           *  @default <i>blank string - i.e. disabled</i>
           *
           *  @dtopt Features
           *  @name DataTable.defaults.scrollY
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "scrollY": "200px",
           *        "paginate": false
           *      } );
           *    } );
           */
          "sScrollY": "",
          /**
           * __Deprecated__ The functionality provided by this parameter has now been
           * superseded by that provided through `ajax`, which should be used instead.
           *
           * Set the HTTP method that is used to make the Ajax call for server-side
           * processing or Ajax sourced data.
           *  @type string
           *  @default GET
           *
           *  @dtopt Options
           *  @dtopt Server-side
           *  @name DataTable.defaults.serverMethod
           *
           *  @deprecated 1.10. Please use `ajax` for this functionality now.
           */
          "sServerMethod": "GET",
          /**
           * DataTables makes use of renderers when displaying HTML elements for
           * a table. These renderers can be added or modified by plug-ins to
           * generate suitable mark-up for a site. For example the Bootstrap
           * integration plug-in for DataTables uses a paging button renderer to
           * display pagination buttons in the mark-up required by Bootstrap.
           *
           * For further information about the renderers available see
           * DataTable.ext.renderer
           *  @type string|object
           *  @default null
           *
           *  @name DataTable.defaults.renderer
           *
           */
          "renderer": null,
          /**
           * Set the data property name that DataTables should use to get a row's id
           * to set as the `id` property in the node.
           *  @type string
           *  @default DT_RowId
           *
           *  @name DataTable.defaults.rowId
           */
          "rowId": "DT_RowId"
        };
        _fnHungarianMap(DataTable.defaults);
        DataTable.defaults.column = {
          /**
           * Define which column(s) an order will occur on for this column. This
           * allows a column's ordering to take multiple columns into account when
           * doing a sort or use the data from a different column. For example first
           * name / last name columns make sense to do a multi-column sort over the
           * two columns.
           *  @type array|int
           *  @default null <i>Takes the value of the column index automatically</i>
           *
           *  @name DataTable.defaults.column.orderData
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
           *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
           *          { "orderData": 2, "targets": [ 2 ] }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          { "orderData": [ 0, 1 ] },
           *          { "orderData": [ 1, 0 ] },
           *          { "orderData": 2 },
           *          null,
           *          null
           *        ]
           *      } );
           *    } );
           */
          "aDataSort": null,
          "iDataSort": -1,
          /**
           * You can control the default ordering direction, and even alter the
           * behaviour of the sort handler (i.e. only allow ascending ordering etc)
           * using this parameter.
           *  @type array
           *  @default [ 'asc', 'desc' ]
           *
           *  @name DataTable.defaults.column.orderSequence
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
           *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
           *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          null,
           *          { "orderSequence": [ "asc" ] },
           *          { "orderSequence": [ "desc", "asc", "asc" ] },
           *          { "orderSequence": [ "desc" ] },
           *          null
           *        ]
           *      } );
           *    } );
           */
          "asSorting": ["asc", "desc"],
          /**
           * Enable or disable filtering on the data in this column.
           *  @type boolean
           *  @default true
           *
           *  @name DataTable.defaults.column.searchable
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "searchable": false, "targets": [ 0 ] }
           *        ] } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          { "searchable": false },
           *          null,
           *          null,
           *          null,
           *          null
           *        ] } );
           *    } );
           */
          "bSearchable": true,
          /**
           * Enable or disable ordering on this column.
           *  @type boolean
           *  @default true
           *
           *  @name DataTable.defaults.column.orderable
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "orderable": false, "targets": [ 0 ] }
           *        ] } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          { "orderable": false },
           *          null,
           *          null,
           *          null,
           *          null
           *        ] } );
           *    } );
           */
          "bSortable": true,
          /**
           * Enable or disable the display of this column.
           *  @type boolean
           *  @default true
           *
           *  @name DataTable.defaults.column.visible
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "visible": false, "targets": [ 0 ] }
           *        ] } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          { "visible": false },
           *          null,
           *          null,
           *          null,
           *          null
           *        ] } );
           *    } );
           */
          "bVisible": true,
          /**
           * Developer definable function that is called whenever a cell is created (Ajax source,
           * etc) or processed for input (DOM source). This can be used as a compliment to mRender
           * allowing you to modify the DOM element (add background colour for example) when the
           * element is available.
           *  @type function
           *  @param {element} td The TD node that has been created
           *  @param {*} cellData The Data for the cell
           *  @param {array|object} rowData The data for the whole row
           *  @param {int} row The row index for the aoData data store
           *  @param {int} col The column index for aoColumns
           *
           *  @name DataTable.defaults.column.createdCell
           *  @dtopt Columns
           *
           *  @example
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [ {
           *          "targets": [3],
           *          "createdCell": function (td, cellData, rowData, row, col) {
           *            if ( cellData == "1.7" ) {
           *              $(td).css('color', 'blue')
           *            }
           *          }
           *        } ]
           *      });
           *    } );
           */
          "fnCreatedCell": null,
          /**
           * This parameter has been replaced by `data` in DataTables to ensure naming
           * consistency. `dataProp` can still be used, as there is backwards
           * compatibility in DataTables for this option, but it is strongly
           * recommended that you use `data` in preference to `dataProp`.
           *  @name DataTable.defaults.column.dataProp
           */
          /**
           * This property can be used to read data from any data source property,
           * including deeply nested objects / properties. `data` can be given in a
           * number of different ways which effect its behaviour:
           *
           * * `integer` - treated as an array index for the data source. This is the
           *   default that DataTables uses (incrementally increased for each column).
           * * `string` - read an object property from the data source. There are
           *   three 'special' options that can be used in the string to alter how
           *   DataTables reads the data from the source object:
           *    * `.` - Dotted Javascript notation. Just as you use a `.` in
           *      Javascript to read from nested objects, so to can the options
           *      specified in `data`. For example: `browser.version` or
           *      `browser.name`. If your object parameter name contains a period, use
           *      `\\` to escape it - i.e. `first\\.name`.
           *    * `[]` - Array notation. DataTables can automatically combine data
           *      from and array source, joining the data with the characters provided
           *      between the two brackets. For example: `name[, ]` would provide a
           *      comma-space separated list from the source array. If no characters
           *      are provided between the brackets, the original array source is
           *      returned.
           *    * `()` - Function notation. Adding `()` to the end of a parameter will
           *      execute a function of the name given. For example: `browser()` for a
           *      simple function on the data source, `browser.version()` for a
           *      function in a nested property or even `browser().version` to get an
           *      object property if the function called returns an object. Note that
           *      function notation is recommended for use in `render` rather than
           *      `data` as it is much simpler to use as a renderer.
           * * `null` - use the original data source for the row rather than plucking
           *   data directly from it. This action has effects on two other
           *   initialisation options:
           *    * `defaultContent` - When null is given as the `data` option and
           *      `defaultContent` is specified for the column, the value defined by
           *      `defaultContent` will be used for the cell.
           *    * `render` - When null is used for the `data` option and the `render`
           *      option is specified for the column, the whole data source for the
           *      row is used for the renderer.
           * * `function` - the function given will be executed whenever DataTables
           *   needs to set or get the data for a cell in the column. The function
           *   takes three parameters:
           *    * Parameters:
           *      * `{array|object}` The data source for the row
           *      * `{string}` The type call data requested - this will be 'set' when
           *        setting data or 'filter', 'display', 'type', 'sort' or undefined
           *        when gathering data. Note that when `undefined` is given for the
           *        type DataTables expects to get the raw data for the object back<
           *      * `{*}` Data to set when the second parameter is 'set'.
           *    * Return:
           *      * The return value from the function is not required when 'set' is
           *        the type of call, but otherwise the return is what will be used
           *        for the data requested.
           *
           * Note that `data` is a getter and setter option. If you just require
           * formatting of data for output, you will likely want to use `render` which
           * is simply a getter and thus simpler to use.
           *
           * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
           * name change reflects the flexibility of this property and is consistent
           * with the naming of mRender. If 'mDataProp' is given, then it will still
           * be used by DataTables, as it automatically maps the old name to the new
           * if required.
           *
           *  @type string|int|function|null
           *  @default null <i>Use automatically calculated column index</i>
           *
           *  @name DataTable.defaults.column.data
           *  @dtopt Columns
           *
           *  @example
           *    // Read table data from objects
           *    // JSON structure for each row:
           *    //   {
           *    //      "engine": {value},
           *    //      "browser": {value},
           *    //      "platform": {value},
           *    //      "version": {value},
           *    //      "grade": {value}
           *    //   }
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "ajaxSource": "sources/objects.txt",
           *        "columns": [
           *          { "data": "engine" },
           *          { "data": "browser" },
           *          { "data": "platform" },
           *          { "data": "version" },
           *          { "data": "grade" }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Read information from deeply nested objects
           *    // JSON structure for each row:
           *    //   {
           *    //      "engine": {value},
           *    //      "browser": {value},
           *    //      "platform": {
           *    //         "inner": {value}
           *    //      },
           *    //      "details": [
           *    //         {value}, {value}
           *    //      ]
           *    //   }
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "ajaxSource": "sources/deep.txt",
           *        "columns": [
           *          { "data": "engine" },
           *          { "data": "browser" },
           *          { "data": "platform.inner" },
           *          { "data": "details.0" },
           *          { "data": "details.1" }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `data` as a function to provide different information for
           *    // sorting, filtering and display. In this case, currency (price)
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [ {
           *          "targets": [ 0 ],
           *          "data": function ( source, type, val ) {
           *            if (type === 'set') {
           *              source.price = val;
           *              // Store the computed display and filter values for efficiency
           *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
           *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
           *              return;
           *            }
           *            else if (type === 'display') {
           *              return source.price_display;
           *            }
           *            else if (type === 'filter') {
           *              return source.price_filter;
           *            }
           *            // 'sort', 'type' and undefined all just use the integer
           *            return source.price;
           *          }
           *        } ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using default content
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [ {
           *          "targets": [ 0 ],
           *          "data": null,
           *          "defaultContent": "Click to edit"
           *        } ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using array notation - outputting a list from an array
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [ {
           *          "targets": [ 0 ],
           *          "data": "name[, ]"
           *        } ]
           *      } );
           *    } );
           *
           */
          "mData": null,
          /**
           * This property is the rendering partner to `data` and it is suggested that
           * when you want to manipulate data for display (including filtering,
           * sorting etc) without altering the underlying data for the table, use this
           * property. `render` can be considered to be the the read only companion to
           * `data` which is read / write (then as such more complex). Like `data`
           * this option can be given in a number of different ways to effect its
           * behaviour:
           *
           * * `integer` - treated as an array index for the data source. This is the
           *   default that DataTables uses (incrementally increased for each column).
           * * `string` - read an object property from the data source. There are
           *   three 'special' options that can be used in the string to alter how
           *   DataTables reads the data from the source object:
           *    * `.` - Dotted Javascript notation. Just as you use a `.` in
           *      Javascript to read from nested objects, so to can the options
           *      specified in `data`. For example: `browser.version` or
           *      `browser.name`. If your object parameter name contains a period, use
           *      `\\` to escape it - i.e. `first\\.name`.
           *    * `[]` - Array notation. DataTables can automatically combine data
           *      from and array source, joining the data with the characters provided
           *      between the two brackets. For example: `name[, ]` would provide a
           *      comma-space separated list from the source array. If no characters
           *      are provided between the brackets, the original array source is
           *      returned.
           *    * `()` - Function notation. Adding `()` to the end of a parameter will
           *      execute a function of the name given. For example: `browser()` for a
           *      simple function on the data source, `browser.version()` for a
           *      function in a nested property or even `browser().version` to get an
           *      object property if the function called returns an object.
           * * `object` - use different data for the different data types requested by
           *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
           *   of the object is the data type the property refers to and the value can
           *   defined using an integer, string or function using the same rules as
           *   `render` normally does. Note that an `_` option _must_ be specified.
           *   This is the default value to use if you haven't specified a value for
           *   the data type requested by DataTables.
           * * `function` - the function given will be executed whenever DataTables
           *   needs to set or get the data for a cell in the column. The function
           *   takes three parameters:
           *    * Parameters:
           *      * {array|object} The data source for the row (based on `data`)
           *      * {string} The type call data requested - this will be 'filter',
           *        'display', 'type' or 'sort'.
           *      * {array|object} The full data source for the row (not based on
           *        `data`)
           *    * Return:
           *      * The return value from the function is what will be used for the
           *        data requested.
           *
           *  @type string|int|function|object|null
           *  @default null Use the data source value.
           *
           *  @name DataTable.defaults.column.render
           *  @dtopt Columns
           *
           *  @example
           *    // Create a comma separated list from an array of objects
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "ajaxSource": "sources/deep.txt",
           *        "columns": [
           *          { "data": "engine" },
           *          { "data": "browser" },
           *          {
           *            "data": "platform",
           *            "render": "[, ].name"
           *          }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Execute a function to obtain data
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [ {
           *          "targets": [ 0 ],
           *          "data": null, // Use the full data source object for the renderer's source
           *          "render": "browserName()"
           *        } ]
           *      } );
           *    } );
           *
           *  @example
           *    // As an object, extracting different data for the different types
           *    // This would be used with a data source such as:
           *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
           *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
           *    // (which has both forms) is used for filtering for if a user inputs either format, while
           *    // the formatted phone number is the one that is shown in the table.
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [ {
           *          "targets": [ 0 ],
           *          "data": null, // Use the full data source object for the renderer's source
           *          "render": {
           *            "_": "phone",
           *            "filter": "phone_filter",
           *            "display": "phone_display"
           *          }
           *        } ]
           *      } );
           *    } );
           *
           *  @example
           *    // Use as a function to create a link from the data source
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [ {
           *          "targets": [ 0 ],
           *          "data": "download_link",
           *          "render": function ( data, type, full ) {
           *            return '<a href="'+data+'">Download</a>';
           *          }
           *        } ]
           *      } );
           *    } );
           */
          "mRender": null,
          /**
           * Change the cell type created for the column - either TD cells or TH cells. This
           * can be useful as TH cells have semantic meaning in the table body, allowing them
           * to act as a header for a row (you may wish to add scope='row' to the TH elements).
           *  @type string
           *  @default td
           *
           *  @name DataTable.defaults.column.cellType
           *  @dtopt Columns
           *
           *  @example
           *    // Make the first column use TH cells
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [ {
           *          "targets": [ 0 ],
           *          "cellType": "th"
           *        } ]
           *      } );
           *    } );
           */
          "sCellType": "td",
          /**
           * Class to give to each cell in this column.
           *  @type string
           *  @default <i>Empty string</i>
           *
           *  @name DataTable.defaults.column.class
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "class": "my_class", "targets": [ 0 ] }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          { "class": "my_class" },
           *          null,
           *          null,
           *          null,
           *          null
           *        ]
           *      } );
           *    } );
           */
          "sClass": "",
          /**
           * When DataTables calculates the column widths to assign to each column,
           * it finds the longest string in each column and then constructs a
           * temporary table and reads the widths from that. The problem with this
           * is that "mmm" is much wider then "iiii", but the latter is a longer
           * string - thus the calculation can go wrong (doing it properly and putting
           * it into an DOM object and measuring that is horribly(!) slow). Thus as
           * a "work around" we provide this option. It will append its value to the
           * text that is found to be the longest string for the column - i.e. padding.
           * Generally you shouldn't need this!
           *  @type string
           *  @default <i>Empty string<i>
           *
           *  @name DataTable.defaults.column.contentPadding
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          null,
           *          null,
           *          null,
           *          {
           *            "contentPadding": "mmm"
           *          }
           *        ]
           *      } );
           *    } );
           */
          "sContentPadding": "",
          /**
           * Allows a default value to be given for a column's data, and will be used
           * whenever a null data source is encountered (this can be because `data`
           * is set to null, or because the data source itself is null).
           *  @type string
           *  @default null
           *
           *  @name DataTable.defaults.column.defaultContent
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          {
           *            "data": null,
           *            "defaultContent": "Edit",
           *            "targets": [ -1 ]
           *          }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          null,
           *          null,
           *          null,
           *          {
           *            "data": null,
           *            "defaultContent": "Edit"
           *          }
           *        ]
           *      } );
           *    } );
           */
          "sDefaultContent": null,
          /**
           * This parameter is only used in DataTables' server-side processing. It can
           * be exceptionally useful to know what columns are being displayed on the
           * client side, and to map these to database fields. When defined, the names
           * also allow DataTables to reorder information from the server if it comes
           * back in an unexpected order (i.e. if you switch your columns around on the
           * client-side, your server-side code does not also need updating).
           *  @type string
           *  @default <i>Empty string</i>
           *
           *  @name DataTable.defaults.column.name
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "name": "engine", "targets": [ 0 ] },
           *          { "name": "browser", "targets": [ 1 ] },
           *          { "name": "platform", "targets": [ 2 ] },
           *          { "name": "version", "targets": [ 3 ] },
           *          { "name": "grade", "targets": [ 4 ] }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          { "name": "engine" },
           *          { "name": "browser" },
           *          { "name": "platform" },
           *          { "name": "version" },
           *          { "name": "grade" }
           *        ]
           *      } );
           *    } );
           */
          "sName": "",
          /**
           * Defines a data source type for the ordering which can be used to read
           * real-time information from the table (updating the internally cached
           * version) prior to ordering. This allows ordering to occur on user
           * editable elements such as form inputs.
           *  @type string
           *  @default std
           *
           *  @name DataTable.defaults.column.orderDataType
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
           *          { "type": "numeric", "targets": [ 3 ] },
           *          { "orderDataType": "dom-select", "targets": [ 4 ] },
           *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          null,
           *          null,
           *          { "orderDataType": "dom-text" },
           *          { "orderDataType": "dom-text", "type": "numeric" },
           *          { "orderDataType": "dom-select" },
           *          { "orderDataType": "dom-checkbox" }
           *        ]
           *      } );
           *    } );
           */
          "sSortDataType": "std",
          /**
           * The title of this column.
           *  @type string
           *  @default null <i>Derived from the 'TH' value for this column in the
           *    original HTML table.</i>
           *
           *  @name DataTable.defaults.column.title
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "title": "My column title", "targets": [ 0 ] }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          { "title": "My column title" },
           *          null,
           *          null,
           *          null,
           *          null
           *        ]
           *      } );
           *    } );
           */
          "sTitle": null,
          /**
           * The type allows you to specify how the data for this column will be
           * ordered. Four types (string, numeric, date and html (which will strip
           * HTML tags before ordering)) are currently available. Note that only date
           * formats understood by Javascript's Date() object will be accepted as type
           * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
           * 'numeric', 'date' or 'html' (by default). Further types can be adding
           * through plug-ins.
           *  @type string
           *  @default null <i>Auto-detected from raw data</i>
           *
           *  @name DataTable.defaults.column.type
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "type": "html", "targets": [ 0 ] }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          { "type": "html" },
           *          null,
           *          null,
           *          null,
           *          null
           *        ]
           *      } );
           *    } );
           */
          "sType": null,
          /**
           * Defining the width of the column, this parameter may take any CSS value
           * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
           * been given a specific width through this interface ensuring that the table
           * remains readable.
           *  @type string
           *  @default null <i>Automatic</i>
           *
           *  @name DataTable.defaults.column.width
           *  @dtopt Columns
           *
           *  @example
           *    // Using `columnDefs`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columnDefs": [
           *          { "width": "20%", "targets": [ 0 ] }
           *        ]
           *      } );
           *    } );
           *
           *  @example
           *    // Using `columns`
           *    $(document).ready( function() {
           *      $('#example').dataTable( {
           *        "columns": [
           *          { "width": "20%" },
           *          null,
           *          null,
           *          null,
           *          null
           *        ]
           *      } );
           *    } );
           */
          "sWidth": null
        };
        _fnHungarianMap(DataTable.defaults.column);
        DataTable.models.oSettings = {
          /**
           * Primary features of DataTables and their enablement state.
           *  @namespace
           */
          "oFeatures": {
            /**
             * Flag to say if DataTables should automatically try to calculate the
             * optimum table and columns widths (true) or not (false).
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bAutoWidth": null,
            /**
             * Delay the creation of TR and TD elements until they are actually
             * needed by a driven page draw. This can give a significant speed
             * increase for Ajax source and Javascript source data, but makes no
             * difference at all for DOM and server-side processing tables.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bDeferRender": null,
            /**
             * Enable filtering on the table or not. Note that if this is disabled
             * then there is no filtering at all on the table, including fnFilter.
             * To just remove the filtering input use sDom and remove the 'f' option.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bFilter": null,
            /**
             * Table information element (the 'Showing x of y records' div) enable
             * flag.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bInfo": null,
            /**
             * Present a user control allowing the end user to change the page size
             * when pagination is enabled.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bLengthChange": null,
            /**
             * Pagination enabled or not. Note that if this is disabled then length
             * changing must also be disabled.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bPaginate": null,
            /**
             * Processing indicator enable flag whenever DataTables is enacting a
             * user request - typically an Ajax request for server-side processing.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bProcessing": null,
            /**
             * Server-side processing enabled flag - when enabled DataTables will
             * get all data from the server for every draw - there is no filtering,
             * sorting or paging done on the client-side.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bServerSide": null,
            /**
             * Sorting enablement flag.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bSort": null,
            /**
             * Multi-column sorting
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bSortMulti": null,
            /**
             * Apply a class to the columns which are being sorted to provide a
             * visual highlight or not. This can slow things down when enabled since
             * there is a lot of DOM interaction.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bSortClasses": null,
            /**
             * State saving enablement flag.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bStateSave": null
          },
          /**
           * Scrolling settings for a table.
           *  @namespace
           */
          "oScroll": {
            /**
             * When the table is shorter in height than sScrollY, collapse the
             * table container down to the height of the table (when true).
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type boolean
             */
            "bCollapse": null,
            /**
             * Width of the scrollbar for the web-browser's platform. Calculated
             * during table initialisation.
             *  @type int
             *  @default 0
             */
            "iBarWidth": 0,
            /**
             * Viewport width for horizontal scrolling. Horizontal scrolling is
             * disabled if an empty string.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             */
            "sX": null,
            /**
             * Width to expand the table to when using x-scrolling. Typically you
             * should not need to use this.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             *  @deprecated
             */
            "sXInner": null,
            /**
             * Viewport height for vertical scrolling. Vertical scrolling is disabled
             * if an empty string.
             * Note that this parameter will be set by the initialisation routine. To
             * set a default use {@link DataTable.defaults}.
             *  @type string
             */
            "sY": null
          },
          /**
           * Language information for the table.
           *  @namespace
           *  @extends DataTable.defaults.oLanguage
           */
          "oLanguage": {
            /**
             * Information callback function. See
             * {@link DataTable.defaults.fnInfoCallback}
             *  @type function
             *  @default null
             */
            "fnInfoCallback": null
          },
          /**
           * Browser support parameters
           *  @namespace
           */
          "oBrowser": {
            /**
             * Indicate if the browser incorrectly calculates width:100% inside a
             * scrolling element (IE6/7)
             *  @type boolean
             *  @default false
             */
            "bScrollOversize": false,
            /**
             * Determine if the vertical scrollbar is on the right or left of the
             * scrolling container - needed for rtl language layout, although not
             * all browsers move the scrollbar (Safari).
             *  @type boolean
             *  @default false
             */
            "bScrollbarLeft": false,
            /**
             * Flag for if `getBoundingClientRect` is fully supported or not
             *  @type boolean
             *  @default false
             */
            "bBounding": false,
            /**
             * Browser scrollbar width
             *  @type integer
             *  @default 0
             */
            "barWidth": 0
          },
          "ajax": null,
          /**
           * Array referencing the nodes which are used for the features. The
           * parameters of this object match what is allowed by sDom - i.e.
           *   <ul>
           *     <li>'l' - Length changing</li>
           *     <li>'f' - Filtering input</li>
           *     <li>'t' - The table!</li>
           *     <li>'i' - Information</li>
           *     <li>'p' - Pagination</li>
           *     <li>'r' - pRocessing</li>
           *   </ul>
           *  @type array
           *  @default []
           */
          "aanFeatures": [],
          /**
           * Store data information - see {@link DataTable.models.oRow} for detailed
           * information.
           *  @type array
           *  @default []
           */
          "aoData": [],
          /**
           * Array of indexes which are in the current display (after filtering etc)
           *  @type array
           *  @default []
           */
          "aiDisplay": [],
          /**
           * Array of indexes for display - no filtering
           *  @type array
           *  @default []
           */
          "aiDisplayMaster": [],
          /**
           * Map of row ids to data indexes
           *  @type object
           *  @default {}
           */
          "aIds": {},
          /**
           * Store information about each column that is in use
           *  @type array
           *  @default []
           */
          "aoColumns": [],
          /**
           * Store information about the table's header
           *  @type array
           *  @default []
           */
          "aoHeader": [],
          /**
           * Store information about the table's footer
           *  @type array
           *  @default []
           */
          "aoFooter": [],
          /**
           * Store the applied global search information in case we want to force a
           * research or compare the old search to a new one.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @namespace
           *  @extends DataTable.models.oSearch
           */
          "oPreviousSearch": {},
          /**
           * Store the applied search for each column - see
           * {@link DataTable.models.oSearch} for the format that is used for the
           * filtering information for each column.
           *  @type array
           *  @default []
           */
          "aoPreSearchCols": [],
          /**
           * Sorting that is applied to the table. Note that the inner arrays are
           * used in the following manner:
           * <ul>
           *   <li>Index 0 - column number</li>
           *   <li>Index 1 - current sorting direction</li>
           * </ul>
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type array
           *  @todo These inner arrays should really be objects
           */
          "aaSorting": null,
          /**
           * Sorting that is always applied to the table (i.e. prefixed in front of
           * aaSorting).
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type array
           *  @default []
           */
          "aaSortingFixed": [],
          /**
           * Classes to use for the striping of a table.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type array
           *  @default []
           */
          "asStripeClasses": null,
          /**
           * If restoring a table - we should restore its striping classes as well
           *  @type array
           *  @default []
           */
          "asDestroyStripes": [],
          /**
           * If restoring a table - we should restore its width
           *  @type int
           *  @default 0
           */
          "sDestroyWidth": 0,
          /**
           * Callback functions array for every time a row is inserted (i.e. on a draw).
           *  @type array
           *  @default []
           */
          "aoRowCallback": [],
          /**
           * Callback functions for the header on each draw.
           *  @type array
           *  @default []
           */
          "aoHeaderCallback": [],
          /**
           * Callback function for the footer on each draw.
           *  @type array
           *  @default []
           */
          "aoFooterCallback": [],
          /**
           * Array of callback functions for draw callback functions
           *  @type array
           *  @default []
           */
          "aoDrawCallback": [],
          /**
           * Array of callback functions for row created function
           *  @type array
           *  @default []
           */
          "aoRowCreatedCallback": [],
          /**
           * Callback functions for just before the table is redrawn. A return of
           * false will be used to cancel the draw.
           *  @type array
           *  @default []
           */
          "aoPreDrawCallback": [],
          /**
           * Callback functions for when the table has been initialised.
           *  @type array
           *  @default []
           */
          "aoInitComplete": [],
          /**
           * Callbacks for modifying the settings to be stored for state saving, prior to
           * saving state.
           *  @type array
           *  @default []
           */
          "aoStateSaveParams": [],
          /**
           * Callbacks for modifying the settings that have been stored for state saving
           * prior to using the stored values to restore the state.
           *  @type array
           *  @default []
           */
          "aoStateLoadParams": [],
          /**
           * Callbacks for operating on the settings object once the saved state has been
           * loaded
           *  @type array
           *  @default []
           */
          "aoStateLoaded": [],
          /**
           * Cache the table ID for quick access
           *  @type string
           *  @default <i>Empty string</i>
           */
          "sTableId": "",
          /**
           * The TABLE node for the main table
           *  @type node
           *  @default null
           */
          "nTable": null,
          /**
           * Permanent ref to the thead element
           *  @type node
           *  @default null
           */
          "nTHead": null,
          /**
           * Permanent ref to the tfoot element - if it exists
           *  @type node
           *  @default null
           */
          "nTFoot": null,
          /**
           * Permanent ref to the tbody element
           *  @type node
           *  @default null
           */
          "nTBody": null,
          /**
           * Cache the wrapper node (contains all DataTables controlled elements)
           *  @type node
           *  @default null
           */
          "nTableWrapper": null,
          /**
           * Indicate if when using server-side processing the loading of data
           * should be deferred until the second draw.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type boolean
           *  @default false
           */
          "bDeferLoading": false,
          /**
           * Indicate if all required information has been read in
           *  @type boolean
           *  @default false
           */
          "bInitialised": false,
          /**
           * Information about open rows. Each object in the array has the parameters
           * 'nTr' and 'nParent'
           *  @type array
           *  @default []
           */
          "aoOpenRows": [],
          /**
           * Dictate the positioning of DataTables' control elements - see
           * {@link DataTable.model.oInit.sDom}.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type string
           *  @default null
           */
          "sDom": null,
          /**
           * Search delay (in mS)
           *  @type integer
           *  @default null
           */
          "searchDelay": null,
          /**
           * Which type of pagination should be used.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type string
           *  @default two_button
           */
          "sPaginationType": "two_button",
          /**
           * The state duration (for `stateSave`) in seconds.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type int
           *  @default 0
           */
          "iStateDuration": 0,
          /**
           * Array of callback functions for state saving. Each array element is an
           * object with the following parameters:
           *   <ul>
           *     <li>function:fn - function to call. Takes two parameters, oSettings
           *       and the JSON string to save that has been thus far created. Returns
           *       a JSON string to be inserted into a json object
           *       (i.e. '"param": [ 0, 1, 2]')</li>
           *     <li>string:sName - name of callback</li>
           *   </ul>
           *  @type array
           *  @default []
           */
          "aoStateSave": [],
          /**
           * Array of callback functions for state loading. Each array element is an
           * object with the following parameters:
           *   <ul>
           *     <li>function:fn - function to call. Takes two parameters, oSettings
           *       and the object stored. May return false to cancel state loading</li>
           *     <li>string:sName - name of callback</li>
           *   </ul>
           *  @type array
           *  @default []
           */
          "aoStateLoad": [],
          /**
           * State that was saved. Useful for back reference
           *  @type object
           *  @default null
           */
          "oSavedState": null,
          /**
           * State that was loaded. Useful for back reference
           *  @type object
           *  @default null
           */
          "oLoadedState": null,
          /**
           * Source url for AJAX data for the table.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type string
           *  @default null
           */
          "sAjaxSource": null,
          /**
           * Property from a given object from which to read the table data from. This
           * can be an empty string (when not server-side processing), in which case
           * it is  assumed an an array is given directly.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type string
           */
          "sAjaxDataProp": null,
          /**
           * The last jQuery XHR object that was used for server-side data gathering.
           * This can be used for working with the XHR information in one of the
           * callbacks
           *  @type object
           *  @default null
           */
          "jqXHR": null,
          /**
           * JSON returned from the server in the last Ajax request
           *  @type object
           *  @default undefined
           */
          "json": undefined2,
          /**
           * Data submitted as part of the last Ajax request
           *  @type object
           *  @default undefined
           */
          "oAjaxData": undefined2,
          /**
           * Function to get the server-side data.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type function
           */
          "fnServerData": null,
          /**
           * Functions which are called prior to sending an Ajax request so extra
           * parameters can easily be sent to the server
           *  @type array
           *  @default []
           */
          "aoServerParams": [],
          /**
           * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
           * required).
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type string
           */
          "sServerMethod": null,
          /**
           * Format numbers for display.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type function
           */
          "fnFormatNumber": null,
          /**
           * List of options that can be used for the user selectable length menu.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type array
           *  @default []
           */
          "aLengthMenu": null,
          /**
           * Counter for the draws that the table does. Also used as a tracker for
           * server-side processing
           *  @type int
           *  @default 0
           */
          "iDraw": 0,
          /**
           * Indicate if a redraw is being done - useful for Ajax
           *  @type boolean
           *  @default false
           */
          "bDrawing": false,
          /**
           * Draw index (iDraw) of the last error when parsing the returned data
           *  @type int
           *  @default -1
           */
          "iDrawError": -1,
          /**
           * Paging display length
           *  @type int
           *  @default 10
           */
          "_iDisplayLength": 10,
          /**
           * Paging start point - aiDisplay index
           *  @type int
           *  @default 0
           */
          "_iDisplayStart": 0,
          /**
           * Server-side processing - number of records in the result set
           * (i.e. before filtering), Use fnRecordsTotal rather than
           * this property to get the value of the number of records, regardless of
           * the server-side processing setting.
           *  @type int
           *  @default 0
           *  @private
           */
          "_iRecordsTotal": 0,
          /**
           * Server-side processing - number of records in the current display set
           * (i.e. after filtering). Use fnRecordsDisplay rather than
           * this property to get the value of the number of records, regardless of
           * the server-side processing setting.
           *  @type boolean
           *  @default 0
           *  @private
           */
          "_iRecordsDisplay": 0,
          /**
           * The classes to use for the table
           *  @type object
           *  @default {}
           */
          "oClasses": {},
          /**
           * Flag attached to the settings object so you can check in the draw
           * callback if filtering has been done in the draw. Deprecated in favour of
           * events.
           *  @type boolean
           *  @default false
           *  @deprecated
           */
          "bFiltered": false,
          /**
           * Flag attached to the settings object so you can check in the draw
           * callback if sorting has been done in the draw. Deprecated in favour of
           * events.
           *  @type boolean
           *  @default false
           *  @deprecated
           */
          "bSorted": false,
          /**
           * Indicate that if multiple rows are in the header and there is more than
           * one unique cell per column, if the top one (true) or bottom one (false)
           * should be used for sorting / title by DataTables.
           * Note that this parameter will be set by the initialisation routine. To
           * set a default use {@link DataTable.defaults}.
           *  @type boolean
           */
          "bSortCellsTop": null,
          /**
           * Initialisation object that is used for the table
           *  @type object
           *  @default null
           */
          "oInit": null,
          /**
           * Destroy callback functions - for plug-ins to attach themselves to the
           * destroy so they can clean up markup and events.
           *  @type array
           *  @default []
           */
          "aoDestroyCallback": [],
          /**
           * Get the number of records in the current record set, before filtering
           *  @type function
           */
          "fnRecordsTotal": function() {
            return _fnDataSource(this) == "ssp" ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;
          },
          /**
           * Get the number of records in the current record set, after filtering
           *  @type function
           */
          "fnRecordsDisplay": function() {
            return _fnDataSource(this) == "ssp" ? this._iRecordsDisplay * 1 : this.aiDisplay.length;
          },
          /**
           * Get the display end point - aiDisplay index
           *  @type function
           */
          "fnDisplayEnd": function() {
            var len = this._iDisplayLength, start2 = this._iDisplayStart, calc = start2 + len, records = this.aiDisplay.length, features = this.oFeatures, paginate = features.bPaginate;
            if (features.bServerSide) {
              return paginate === false || len === -1 ? start2 + records : Math.min(start2 + len, this._iRecordsDisplay);
            } else {
              return !paginate || calc > records || len === -1 ? records : calc;
            }
          },
          /**
           * The DataTables object for this table
           *  @type object
           *  @default null
           */
          "oInstance": null,
          /**
           * Unique identifier for each instance of the DataTables object. If there
           * is an ID on the table node, then it takes that value, otherwise an
           * incrementing internal counter is used.
           *  @type string
           *  @default null
           */
          "sInstance": null,
          /**
           * tabindex attribute value that is added to DataTables control elements, allowing
           * keyboard navigation of the table and its controls.
           */
          "iTabIndex": 0,
          /**
           * DIV container for the footer scrolling table if scrolling
           */
          "nScrollHead": null,
          /**
           * DIV container for the footer scrolling table if scrolling
           */
          "nScrollFoot": null,
          /**
           * Last applied sort
           *  @type array
           *  @default []
           */
          "aLastSort": [],
          /**
           * Stored plug-in instances
           *  @type object
           *  @default {}
           */
          "oPlugins": {},
          /**
           * Function used to get a row's id from the row's data
           *  @type function
           *  @default null
           */
          "rowIdFn": null,
          /**
           * Data location where to store a row's id
           *  @type string
           *  @default null
           */
          "rowId": null
        };
        DataTable.ext = _ext = {
          /**
           * Buttons. For use with the Buttons extension for DataTables. This is
           * defined here so other extensions can define buttons regardless of load
           * order. It is _not_ used by DataTables core.
           *
           *  @type object
           *  @default {}
           */
          buttons: {},
          /**
           * Element class names
           *
           *  @type object
           *  @default {}
           */
          classes: {},
          /**
           * DataTables build type (expanded by the download builder)
           *
           *  @type string
           */
          builder: "-source-",
          /**
           * Error reporting.
           * 
           * How should DataTables report an error. Can take the value 'alert',
           * 'throw', 'none' or a function.
           *
           *  @type string|function
           *  @default alert
           */
          errMode: "alert",
          /**
           * Feature plug-ins.
           * 
           * This is an array of objects which describe the feature plug-ins that are
           * available to DataTables. These feature plug-ins are then available for
           * use through the `dom` initialisation option.
           * 
           * Each feature plug-in is described by an object which must have the
           * following properties:
           * 
           * * `fnInit` - function that is used to initialise the plug-in,
           * * `cFeature` - a character so the feature can be enabled by the `dom`
           *   instillation option. This is case sensitive.
           *
           * The `fnInit` function has the following input parameters:
           *
           * 1. `{object}` DataTables settings object: see
           *    {@link DataTable.models.oSettings}
           *
           * And the following return is expected:
           * 
           * * {node|null} The element which contains your feature. Note that the
           *   return may also be void if your plug-in does not require to inject any
           *   DOM elements into DataTables control (`dom`) - for example this might
           *   be useful when developing a plug-in which allows table control via
           *   keyboard entry
           *
           *  @type array
           *
           *  @example
           *    $.fn.dataTable.ext.features.push( {
           *      "fnInit": function( oSettings ) {
           *        return new TableTools( { "oDTSettings": oSettings } );
           *      },
           *      "cFeature": "T"
           *    } );
           */
          feature: [],
          /**
           * Row searching.
           * 
           * This method of searching is complimentary to the default type based
           * searching, and a lot more comprehensive as it allows you complete control
           * over the searching logic. Each element in this array is a function
           * (parameters described below) that is called for every row in the table,
           * and your logic decides if it should be included in the searching data set
           * or not.
           *
           * Searching functions have the following input parameters:
           *
           * 1. `{object}` DataTables settings object: see
           *    {@link DataTable.models.oSettings}
           * 2. `{array|object}` Data for the row to be processed (same as the
           *    original format that was passed in as the data source, or an array
           *    from a DOM data source
           * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
           *    can be useful to retrieve the `TR` element if you need DOM interaction.
           *
           * And the following return is expected:
           *
           * * {boolean} Include the row in the searched result set (true) or not
           *   (false)
           *
           * Note that as with the main search ability in DataTables, technically this
           * is "filtering", since it is subtractive. However, for consistency in
           * naming we call it searching here.
           *
           *  @type array
           *  @default []
           *
           *  @example
           *    // The following example shows custom search being applied to the
           *    // fourth column (i.e. the data[3] index) based on two input values
           *    // from the end-user, matching the data in a certain range.
           *    $.fn.dataTable.ext.search.push(
           *      function( settings, data, dataIndex ) {
           *        var min = document.getElementById('min').value * 1;
           *        var max = document.getElementById('max').value * 1;
           *        var version = data[3] == "-" ? 0 : data[3]*1;
           *
           *        if ( min == "" && max == "" ) {
           *          return true;
           *        }
           *        else if ( min == "" && version < max ) {
           *          return true;
           *        }
           *        else if ( min < version && "" == max ) {
           *          return true;
           *        }
           *        else if ( min < version && version < max ) {
           *          return true;
           *        }
           *        return false;
           *      }
           *    );
           */
          search: [],
          /**
           * Selector extensions
           *
           * The `selector` option can be used to extend the options available for the
           * selector modifier options (`selector-modifier` object data type) that
           * each of the three built in selector types offer (row, column and cell +
           * their plural counterparts). For example the Select extension uses this
           * mechanism to provide an option to select only rows, columns and cells
           * that have been marked as selected by the end user (`{selected: true}`),
           * which can be used in conjunction with the existing built in selector
           * options.
           *
           * Each property is an array to which functions can be pushed. The functions
           * take three attributes:
           *
           * * Settings object for the host table
           * * Options object (`selector-modifier` object type)
           * * Array of selected item indexes
           *
           * The return is an array of the resulting item indexes after the custom
           * selector has been applied.
           *
           *  @type object
           */
          selector: {
            cell: [],
            column: [],
            row: []
          },
          /**
           * Internal functions, exposed for used in plug-ins.
           * 
           * Please note that you should not need to use the internal methods for
           * anything other than a plug-in (and even then, try to avoid if possible).
           * The internal function may change between releases.
           *
           *  @type object
           *  @default {}
           */
          internal: {},
          /**
           * Legacy configuration options. Enable and disable legacy options that
           * are available in DataTables.
           *
           *  @type object
           */
          legacy: {
            /**
             * Enable / disable DataTables 1.9 compatible server-side processing
             * requests
             *
             *  @type boolean
             *  @default null
             */
            ajax: null
          },
          /**
           * Pagination plug-in methods.
           * 
           * Each entry in this object is a function and defines which buttons should
           * be shown by the pagination rendering method that is used for the table:
           * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
           * buttons are displayed in the document, while the functions here tell it
           * what buttons to display. This is done by returning an array of button
           * descriptions (what each button will do).
           *
           * Pagination types (the four built in options and any additional plug-in
           * options defined here) can be used through the `paginationType`
           * initialisation parameter.
           *
           * The functions defined take two parameters:
           *
           * 1. `{int} page` The current page index
           * 2. `{int} pages` The number of pages in the table
           *
           * Each function is expected to return an array where each element of the
           * array can be one of:
           *
           * * `first` - Jump to first page when activated
           * * `last` - Jump to last page when activated
           * * `previous` - Show previous page when activated
           * * `next` - Show next page when activated
           * * `{int}` - Show page of the index given
           * * `{array}` - A nested array containing the above elements to add a
           *   containing 'DIV' element (might be useful for styling).
           *
           * Note that DataTables v1.9- used this object slightly differently whereby
           * an object with two functions would be defined for each plug-in. That
           * ability is still supported by DataTables 1.10+ to provide backwards
           * compatibility, but this option of use is now decremented and no longer
           * documented in DataTables 1.10+.
           *
           *  @type object
           *  @default {}
           *
           *  @example
           *    // Show previous, next and current page buttons only
           *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
           *      return [ 'previous', page, 'next' ];
           *    };
           */
          pager: {},
          renderer: {
            pageButton: {},
            header: {}
          },
          /**
           * Ordering plug-ins - custom data source
           * 
           * The extension options for ordering of data available here is complimentary
           * to the default type based ordering that DataTables typically uses. It
           * allows much greater control over the the data that is being used to
           * order a column, but is necessarily therefore more complex.
           * 
           * This type of ordering is useful if you want to do ordering based on data
           * live from the DOM (for example the contents of an 'input' element) rather
           * than just the static string that DataTables knows of.
           * 
           * The way these plug-ins work is that you create an array of the values you
           * wish to be ordering for the column in question and then return that
           * array. The data in the array much be in the index order of the rows in
           * the table (not the currently ordering order!). Which order data gathering
           * function is run here depends on the `dt-init columns.orderDataType`
           * parameter that is used for the column (if any).
           *
           * The functions defined take two parameters:
           *
           * 1. `{object}` DataTables settings object: see
           *    {@link DataTable.models.oSettings}
           * 2. `{int}` Target column index
           *
           * Each function is expected to return an array:
           *
           * * `{array}` Data for the column to be ordering upon
           *
           *  @type array
           *
           *  @example
           *    // Ordering using `input` node values
           *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
           *    {
           *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
           *        return $('input', td).val();
           *      } );
           *    }
           */
          order: {},
          /**
           * Type based plug-ins.
           *
           * Each column in DataTables has a type assigned to it, either by automatic
           * detection or by direct assignment using the `type` option for the column.
           * The type of a column will effect how it is ordering and search (plug-ins
           * can also make use of the column type if required).
           *
           * @namespace
           */
          type: {
            /**
             * Type detection functions.
             *
             * The functions defined in this object are used to automatically detect
             * a column's type, making initialisation of DataTables super easy, even
             * when complex data is in the table.
             *
             * The functions defined take two parameters:
             *
                *  1. `{*}` Data from the column cell to be analysed
                *  2. `{settings}` DataTables settings object. This can be used to
                *     perform context specific type detection - for example detection
                *     based on language settings such as using a comma for a decimal
                *     place. Generally speaking the options from the settings will not
                *     be required
             *
             * Each function is expected to return:
             *
             * * `{string|null}` Data type detected, or null if unknown (and thus
             *   pass it on to the other type detection functions.
             *
             *  @type array
             *
             *  @example
             *    // Currency type detection plug-in:
             *    $.fn.dataTable.ext.type.detect.push(
             *      function ( data, settings ) {
             *        // Check the numeric part
             *        if ( ! data.substring(1).match(/[0-9]/) ) {
             *          return null;
             *        }
             *
             *        // Check prefixed by currency
             *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
             *          return 'currency';
             *        }
             *        return null;
             *      }
             *    );
             */
            detect: [],
            /**
             * Type based search formatting.
             *
             * The type based searching functions can be used to pre-format the
             * data to be search on. For example, it can be used to strip HTML
             * tags or to de-format telephone numbers for numeric only searching.
             *
             * Note that is a search is not defined for a column of a given type,
             * no search formatting will be performed.
             * 
             * Pre-processing of searching data plug-ins - When you assign the sType
             * for a column (or have it automatically detected for you by DataTables
             * or a type detection plug-in), you will typically be using this for
             * custom sorting, but it can also be used to provide custom searching
             * by allowing you to pre-processing the data and returning the data in
             * the format that should be searched upon. This is done by adding
             * functions this object with a parameter name which matches the sType
             * for that target column. This is the corollary of <i>afnSortData</i>
             * for searching data.
             *
             * The functions defined take a single parameter:
             *
                *  1. `{*}` Data from the column cell to be prepared for searching
             *
             * Each function is expected to return:
             *
             * * `{string|null}` Formatted string that will be used for the searching.
             *
             *  @type object
             *  @default {}
             *
             *  @example
             *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
             *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
             *    }
             */
            search: {},
            /**
             * Type based ordering.
             *
             * The column type tells DataTables what ordering to apply to the table
             * when a column is sorted upon. The order for each type that is defined,
             * is defined by the functions available in this object.
             *
             * Each ordering option can be described by three properties added to
             * this object:
             *
             * * `{type}-pre` - Pre-formatting function
             * * `{type}-asc` - Ascending order function
             * * `{type}-desc` - Descending order function
             *
             * All three can be used together, only `{type}-pre` or only
             * `{type}-asc` and `{type}-desc` together. It is generally recommended
             * that only `{type}-pre` is used, as this provides the optimal
             * implementation in terms of speed, although the others are provided
             * for compatibility with existing Javascript sort functions.
             *
             * `{type}-pre`: Functions defined take a single parameter:
             *
                *  1. `{*}` Data from the column cell to be prepared for ordering
             *
             * And return:
             *
             * * `{*}` Data to be sorted upon
             *
             * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
             * functions, taking two parameters:
             *
                *  1. `{*}` Data to compare to the second parameter
                *  2. `{*}` Data to compare to the first parameter
             *
             * And returning:
             *
             * * `{*}` Ordering match: <0 if first parameter should be sorted lower
             *   than the second parameter, ===0 if the two parameters are equal and
             *   >0 if the first parameter should be sorted height than the second
             *   parameter.
             * 
             *  @type object
             *  @default {}
             *
             *  @example
             *    // Numeric ordering of formatted numbers with a pre-formatter
             *    $.extend( $.fn.dataTable.ext.type.order, {
             *      "string-pre": function(x) {
             *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
             *        return parseFloat( a );
             *      }
             *    } );
             *
             *  @example
             *    // Case-sensitive string ordering, with no pre-formatting method
             *    $.extend( $.fn.dataTable.ext.order, {
             *      "string-case-asc": function(x,y) {
             *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
             *      },
             *      "string-case-desc": function(x,y) {
             *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
             *      }
             *    } );
             */
            order: {}
          },
          /**
           * Unique DataTables instance counter
           *
           * @type int
           * @private
           */
          _unique: 0,
          //
          // Depreciated
          // The following properties are retained for backwards compatibility only.
          // The should not be used in new projects and will be removed in a future
          // version
          //
          /**
           * Version check function.
           *  @type function
           *  @depreciated Since 1.10
           */
          fnVersionCheck: DataTable.fnVersionCheck,
          /**
           * Index for what 'this' index API functions should use
           *  @type int
           *  @deprecated Since v1.10
           */
          iApiIndex: 0,
          /**
           * jQuery UI class container
           *  @type object
           *  @deprecated Since v1.10
           */
          oJUIClasses: {},
          /**
           * Software version
           *  @type string
           *  @deprecated Since v1.10
           */
          sVersion: DataTable.version
        };
        $2.extend(_ext, {
          afnFiltering: _ext.search,
          aTypes: _ext.type.detect,
          ofnSearch: _ext.type.search,
          oSort: _ext.type.order,
          afnSortData: _ext.order,
          aoFeatures: _ext.feature,
          oApi: _ext.internal,
          oStdClasses: _ext.classes,
          oPagination: _ext.pager
        });
        $2.extend(DataTable.ext.classes, {
          "sTable": "dataTable",
          "sNoFooter": "no-footer",
          /* Paging buttons */
          "sPageButton": "paginate_button",
          "sPageButtonActive": "current",
          "sPageButtonDisabled": "disabled",
          /* Striping classes */
          "sStripeOdd": "odd",
          "sStripeEven": "even",
          /* Empty row */
          "sRowEmpty": "dataTables_empty",
          /* Features */
          "sWrapper": "dataTables_wrapper",
          "sFilter": "dataTables_filter",
          "sInfo": "dataTables_info",
          "sPaging": "dataTables_paginate paging_",
          /* Note that the type is postfixed */
          "sLength": "dataTables_length",
          "sProcessing": "dataTables_processing",
          /* Sorting */
          "sSortAsc": "sorting_asc",
          "sSortDesc": "sorting_desc",
          "sSortable": "sorting",
          /* Sortable in both directions */
          "sSortableAsc": "sorting_desc_disabled",
          "sSortableDesc": "sorting_asc_disabled",
          "sSortableNone": "sorting_disabled",
          "sSortColumn": "sorting_",
          /* Note that an int is postfixed for the sorting order */
          /* Filtering */
          "sFilterInput": "",
          /* Page length */
          "sLengthSelect": "",
          /* Scrolling */
          "sScrollWrapper": "dataTables_scroll",
          "sScrollHead": "dataTables_scrollHead",
          "sScrollHeadInner": "dataTables_scrollHeadInner",
          "sScrollBody": "dataTables_scrollBody",
          "sScrollFoot": "dataTables_scrollFoot",
          "sScrollFootInner": "dataTables_scrollFootInner",
          /* Misc */
          "sHeaderTH": "",
          "sFooterTH": "",
          // Deprecated
          "sSortJUIAsc": "",
          "sSortJUIDesc": "",
          "sSortJUI": "",
          "sSortJUIAscAllowed": "",
          "sSortJUIDescAllowed": "",
          "sSortJUIWrapper": "",
          "sSortIcon": "",
          "sJUIHeader": "",
          "sJUIFooter": ""
        });
        var extPagination = DataTable.ext.pager;
        function _numbers(page, pages) {
          var numbers = [], buttons = extPagination.numbers_length, half = Math.floor(buttons / 2), i2 = 1;
          if (pages <= buttons) {
            numbers = _range(0, pages);
          } else if (page <= half) {
            numbers = _range(0, buttons - 2);
            numbers.push("ellipsis");
            numbers.push(pages - 1);
          } else if (page >= pages - 1 - half) {
            numbers = _range(pages - (buttons - 2), pages);
            numbers.splice(0, 0, "ellipsis");
            numbers.splice(0, 0, 0);
          } else {
            numbers = _range(page - half + 2, page + half - 1);
            numbers.push("ellipsis");
            numbers.push(pages - 1);
            numbers.splice(0, 0, "ellipsis");
            numbers.splice(0, 0, 0);
          }
          numbers.DT_el = "span";
          return numbers;
        }
        $2.extend(extPagination, {
          simple: function(page, pages) {
            return ["previous", "next"];
          },
          full: function(page, pages) {
            return ["first", "previous", "next", "last"];
          },
          numbers: function(page, pages) {
            return [_numbers(page, pages)];
          },
          simple_numbers: function(page, pages) {
            return ["previous", _numbers(page, pages), "next"];
          },
          full_numbers: function(page, pages) {
            return ["first", "previous", _numbers(page, pages), "next", "last"];
          },
          first_last_numbers: function(page, pages) {
            return ["first", _numbers(page, pages), "last"];
          },
          // For testing and plug-ins to use
          _numbers,
          // Number of number buttons (including ellipsis) to show. _Must be odd!_
          numbers_length: 7
        });
        $2.extend(true, DataTable.ext.renderer, {
          pageButton: {
            _: function(settings, host, idx, buttons, page, pages) {
              var classes = settings.oClasses;
              var lang = settings.oLanguage.oPaginate;
              var aria = settings.oLanguage.oAria.paginate || {};
              var btnDisplay, btnClass, counter = 0;
              var attach = function(container, buttons2) {
                var i2, ien, node, button, tabIndex;
                var disabledClass = classes.sPageButtonDisabled;
                var clickHandler = function(e) {
                  _fnPageChange(settings, e.data.action, true);
                };
                for (i2 = 0, ien = buttons2.length; i2 < ien; i2++) {
                  button = buttons2[i2];
                  if (Array.isArray(button)) {
                    var inner = $2("<" + (button.DT_el || "div") + "/>").appendTo(container);
                    attach(inner, button);
                  } else {
                    btnDisplay = null;
                    btnClass = button;
                    tabIndex = settings.iTabIndex;
                    switch (button) {
                      case "ellipsis":
                        container.append('<span class="ellipsis">&#x2026;</span>');
                        break;
                      case "first":
                        btnDisplay = lang.sFirst;
                        if (page === 0) {
                          tabIndex = -1;
                          btnClass += " " + disabledClass;
                        }
                        break;
                      case "previous":
                        btnDisplay = lang.sPrevious;
                        if (page === 0) {
                          tabIndex = -1;
                          btnClass += " " + disabledClass;
                        }
                        break;
                      case "next":
                        btnDisplay = lang.sNext;
                        if (pages === 0 || page === pages - 1) {
                          tabIndex = -1;
                          btnClass += " " + disabledClass;
                        }
                        break;
                      case "last":
                        btnDisplay = lang.sLast;
                        if (pages === 0 || page === pages - 1) {
                          tabIndex = -1;
                          btnClass += " " + disabledClass;
                        }
                        break;
                      default:
                        btnDisplay = settings.fnFormatNumber(button + 1);
                        btnClass = page === button ? classes.sPageButtonActive : "";
                        break;
                    }
                    if (btnDisplay !== null) {
                      node = $2("<a>", {
                        "class": classes.sPageButton + " " + btnClass,
                        "aria-controls": settings.sTableId,
                        "aria-label": aria[button],
                        "data-dt-idx": counter,
                        "tabindex": tabIndex,
                        "id": idx === 0 && typeof button === "string" ? settings.sTableId + "_" + button : null
                      }).html(btnDisplay).appendTo(container);
                      _fnBindAction(
                        node,
                        { action: button },
                        clickHandler
                      );
                      counter++;
                    }
                  }
                }
              };
              var activeEl;
              try {
                activeEl = $2(host).find(document2.activeElement).data("dt-idx");
              } catch (e) {
              }
              attach($2(host).empty(), buttons);
              if (activeEl !== undefined2) {
                $2(host).find("[data-dt-idx=" + activeEl + "]").trigger("focus");
              }
            }
          }
        });
        $2.extend(DataTable.ext.type.detect, [
          // Plain numbers - first since V8 detects some plain numbers as dates
          // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
          function(d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _isNumber(d, decimal) ? "num" + decimal : null;
          },
          // Dates (only those recognised by the browser's Date.parse)
          function(d, settings) {
            if (d && !(d instanceof Date) && !_re_date.test(d)) {
              return null;
            }
            var parsed = Date.parse(d);
            return parsed !== null && !isNaN(parsed) || _empty(d) ? "date" : null;
          },
          // Formatted numbers
          function(d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _isNumber(d, decimal, true) ? "num-fmt" + decimal : null;
          },
          // HTML numeric
          function(d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _htmlNumeric(d, decimal) ? "html-num" + decimal : null;
          },
          // HTML numeric, formatted
          function(d, settings) {
            var decimal = settings.oLanguage.sDecimal;
            return _htmlNumeric(d, decimal, true) ? "html-num-fmt" + decimal : null;
          },
          // HTML (this is strict checking - there must be html)
          function(d, settings) {
            return _empty(d) || typeof d === "string" && d.indexOf("<") !== -1 ? "html" : null;
          }
        ]);
        $2.extend(DataTable.ext.type.search, {
          html: function(data) {
            return _empty(data) ? data : typeof data === "string" ? data.replace(_re_new_lines, " ").replace(_re_html, "") : "";
          },
          string: function(data) {
            return _empty(data) ? data : typeof data === "string" ? data.replace(_re_new_lines, " ") : data;
          }
        });
        var __numericReplace = function(d, decimalPlace, re1, re2) {
          if (d !== 0 && (!d || d === "-")) {
            return -Infinity;
          }
          if (decimalPlace) {
            d = _numToDecimal(d, decimalPlace);
          }
          if (d.replace) {
            if (re1) {
              d = d.replace(re1, "");
            }
            if (re2) {
              d = d.replace(re2, "");
            }
          }
          return d * 1;
        };
        function _addNumericSort(decimalPlace) {
          $2.each(
            {
              // Plain numbers
              "num": function(d) {
                return __numericReplace(d, decimalPlace);
              },
              // Formatted numbers
              "num-fmt": function(d) {
                return __numericReplace(d, decimalPlace, _re_formatted_numeric);
              },
              // HTML numeric
              "html-num": function(d) {
                return __numericReplace(d, decimalPlace, _re_html);
              },
              // HTML numeric, formatted
              "html-num-fmt": function(d) {
                return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
              }
            },
            function(key, fn2) {
              _ext.type.order[key + decimalPlace + "-pre"] = fn2;
              if (key.match(/^html\-/)) {
                _ext.type.search[key + decimalPlace] = _ext.type.search.html;
              }
            }
          );
        }
        $2.extend(_ext.type.order, {
          // Dates
          "date-pre": function(d) {
            var ts = Date.parse(d);
            return isNaN(ts) ? -Infinity : ts;
          },
          // html
          "html-pre": function(a) {
            return _empty(a) ? "" : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + "";
          },
          // string
          "string-pre": function(a) {
            return _empty(a) ? "" : typeof a === "string" ? a.toLowerCase() : !a.toString ? "" : a.toString();
          },
          // string-asc and -desc are retained only for compatibility with the old
          // sort methods
          "string-asc": function(x, y) {
            return x < y ? -1 : x > y ? 1 : 0;
          },
          "string-desc": function(x, y) {
            return x < y ? 1 : x > y ? -1 : 0;
          }
        });
        _addNumericSort("");
        $2.extend(true, DataTable.ext.renderer, {
          header: {
            _: function(settings, cell, column, classes) {
              $2(settings.nTable).on("order.dt.DT", function(e, ctx, sorting, columns) {
                if (settings !== ctx) {
                  return;
                }
                var colIdx = column.idx;
                cell.removeClass(
                  classes.sSortAsc + " " + classes.sSortDesc
                ).addClass(
                  columns[colIdx] == "asc" ? classes.sSortAsc : columns[colIdx] == "desc" ? classes.sSortDesc : column.sSortingClass
                );
              });
            },
            jqueryui: function(settings, cell, column, classes) {
              $2("<div/>").addClass(classes.sSortJUIWrapper).append(cell.contents()).append(
                $2("<span/>").addClass(classes.sSortIcon + " " + column.sSortingClassJUI)
              ).appendTo(cell);
              $2(settings.nTable).on("order.dt.DT", function(e, ctx, sorting, columns) {
                if (settings !== ctx) {
                  return;
                }
                var colIdx = column.idx;
                cell.removeClass(classes.sSortAsc + " " + classes.sSortDesc).addClass(
                  columns[colIdx] == "asc" ? classes.sSortAsc : columns[colIdx] == "desc" ? classes.sSortDesc : column.sSortingClass
                );
                cell.find("span." + classes.sSortIcon).removeClass(
                  classes.sSortJUIAsc + " " + classes.sSortJUIDesc + " " + classes.sSortJUI + " " + classes.sSortJUIAscAllowed + " " + classes.sSortJUIDescAllowed
                ).addClass(
                  columns[colIdx] == "asc" ? classes.sSortJUIAsc : columns[colIdx] == "desc" ? classes.sSortJUIDesc : column.sSortingClassJUI
                );
              });
            }
          }
        });
        var __htmlEscapeEntities = function(d) {
          if (Array.isArray(d)) {
            d = d.join(",");
          }
          return typeof d === "string" ? d.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") : d;
        };
        function __mld(dt, momentFn, luxonFn, dateFn, arg1) {
          if (window2.moment) {
            return dt[momentFn](arg1);
          } else if (window2.luxon) {
            return dt[luxonFn](arg1);
          }
          return dateFn ? dt[dateFn](arg1) : dt;
        }
        var __mlWarning = false;
        function __mldObj(d, format2, locale) {
          var dt;
          if (window2.moment) {
            dt = window2.moment.utc(d, format2, locale, true);
            if (!dt.isValid()) {
              return null;
            }
          } else if (window2.luxon) {
            dt = format2 ? window2.luxon.DateTime.fromFormat(d, format2) : window2.luxon.DateTime.fromISO(d);
            if (!dt.isValid) {
              return null;
            }
            dt.setLocale(locale);
          } else if (!format2) {
            dt = new Date(d);
          } else {
            if (!__mlWarning) {
              alert("DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17");
            }
            __mlWarning = true;
          }
          return dt;
        }
        function __mlHelper(localeString) {
          return function(from, to, locale, def) {
            if (arguments.length === 0) {
              locale = "en";
              to = null;
              from = null;
            } else if (arguments.length === 1) {
              locale = "en";
              to = from;
              from = null;
            } else if (arguments.length === 2) {
              locale = to;
              to = from;
              from = null;
            }
            var typeName = "datetime-" + to;
            if (!DataTable.ext.type.order[typeName]) {
              DataTable.ext.type.detect.unshift(function(d) {
                return d === typeName ? typeName : false;
              });
              DataTable.ext.type.order[typeName + "-asc"] = function(a, b) {
                var x = a.valueOf();
                var y = b.valueOf();
                return x === y ? 0 : x < y ? -1 : 1;
              };
              DataTable.ext.type.order[typeName + "-desc"] = function(a, b) {
                var x = a.valueOf();
                var y = b.valueOf();
                return x === y ? 0 : x > y ? -1 : 1;
              };
            }
            return function(d, type) {
              if (d === null || d === undefined2) {
                if (def === "--now") {
                  var local = /* @__PURE__ */ new Date();
                  d = new Date(Date.UTC(
                    local.getFullYear(),
                    local.getMonth(),
                    local.getDate(),
                    local.getHours(),
                    local.getMinutes(),
                    local.getSeconds()
                  ));
                } else {
                  d = "";
                }
              }
              if (type === "type") {
                return typeName;
              }
              if (d === "") {
                return type !== "sort" ? "" : __mldObj("0000-01-01 00:00:00", null, locale);
              }
              if (to !== null && from === to && type !== "sort" && type !== "type" && !(d instanceof Date)) {
                return d;
              }
              var dt = __mldObj(d, from, locale);
              if (dt === null) {
                return d;
              }
              if (type === "sort") {
                return dt;
              }
              var formatted = to === null ? __mld(dt, "toDate", "toJSDate", "")[localeString]() : __mld(dt, "format", "toFormat", "toISOString", to);
              return type === "display" ? __htmlEscapeEntities(formatted) : formatted;
            };
          };
        }
        var __thousands = ",";
        var __decimal = ".";
        if (Intl) {
          try {
            var num = new Intl.NumberFormat().formatToParts(100000.1);
            for (var i = 0; i < num.length; i++) {
              if (num[i].type === "group") {
                __thousands = num[i].value;
              } else if (num[i].type === "decimal") {
                __decimal = num[i].value;
              }
            }
          } catch (e) {
          }
        }
        DataTable.datetime = function(format2, locale) {
          var typeName = "datetime-detect-" + format2;
          if (!locale) {
            locale = "en";
          }
          if (!DataTable.ext.type.order[typeName]) {
            DataTable.ext.type.detect.unshift(function(d) {
              var dt = __mldObj(d, format2, locale);
              return d === "" || dt ? typeName : false;
            });
            DataTable.ext.type.order[typeName + "-pre"] = function(d) {
              return __mldObj(d, format2, locale) || 0;
            };
          }
        };
        DataTable.render = {
          date: __mlHelper("toLocaleDateString"),
          datetime: __mlHelper("toLocaleString"),
          time: __mlHelper("toLocaleTimeString"),
          number: function(thousands, decimal, precision, prefix, postfix) {
            if (thousands === null || thousands === undefined2) {
              thousands = __thousands;
            }
            if (decimal === null || decimal === undefined2) {
              decimal = __decimal;
            }
            return {
              display: function(d) {
                if (typeof d !== "number" && typeof d !== "string") {
                  return d;
                }
                if (d === "" || d === null) {
                  return d;
                }
                var negative = d < 0 ? "-" : "";
                var flo = parseFloat(d);
                if (isNaN(flo)) {
                  return __htmlEscapeEntities(d);
                }
                flo = flo.toFixed(precision);
                d = Math.abs(flo);
                var intPart = parseInt(d, 10);
                var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : "";
                if (intPart === 0 && parseFloat(floatPart) === 0) {
                  negative = "";
                }
                return negative + (prefix || "") + intPart.toString().replace(
                  /\B(?=(\d{3})+(?!\d))/g,
                  thousands
                ) + floatPart + (postfix || "");
              }
            };
          },
          text: function() {
            return {
              display: __htmlEscapeEntities,
              filter: __htmlEscapeEntities
            };
          }
        };
        function _fnExternApiFunc(fn2) {
          return function() {
            var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(
              Array.prototype.slice.call(arguments)
            );
            return DataTable.ext.internal[fn2].apply(this, args);
          };
        }
        $2.extend(DataTable.ext.internal, {
          _fnExternApiFunc,
          _fnBuildAjax,
          _fnAjaxUpdate,
          _fnAjaxParameters,
          _fnAjaxUpdateDraw,
          _fnAjaxDataSrc,
          _fnAddColumn,
          _fnColumnOptions,
          _fnAdjustColumnSizing,
          _fnVisibleToColumnIndex,
          _fnColumnIndexToVisible,
          _fnVisbleColumns,
          _fnGetColumns,
          _fnColumnTypes,
          _fnApplyColumnDefs,
          _fnHungarianMap,
          _fnCamelToHungarian,
          _fnLanguageCompat,
          _fnBrowserDetect,
          _fnAddData,
          _fnAddTr,
          _fnNodeToDataIndex,
          _fnNodeToColumnIndex,
          _fnGetCellData,
          _fnSetCellData,
          _fnSplitObjNotation,
          _fnGetObjectDataFn,
          _fnSetObjectDataFn,
          _fnGetDataMaster,
          _fnClearTable,
          _fnDeleteIndex,
          _fnInvalidate,
          _fnGetRowElements,
          _fnCreateTr,
          _fnBuildHead,
          _fnDrawHead,
          _fnDraw,
          _fnReDraw,
          _fnAddOptionsHtml,
          _fnDetectHeader,
          _fnGetUniqueThs,
          _fnFeatureHtmlFilter,
          _fnFilterComplete,
          _fnFilterCustom,
          _fnFilterColumn,
          _fnFilter,
          _fnFilterCreateSearch,
          _fnEscapeRegex,
          _fnFilterData,
          _fnFeatureHtmlInfo,
          _fnUpdateInfo,
          _fnInfoMacros,
          _fnInitialise,
          _fnInitComplete,
          _fnLengthChange,
          _fnFeatureHtmlLength,
          _fnFeatureHtmlPaginate,
          _fnPageChange,
          _fnFeatureHtmlProcessing,
          _fnProcessingDisplay,
          _fnFeatureHtmlTable,
          _fnScrollDraw,
          _fnApplyToChildren,
          _fnCalculateColumnWidths,
          _fnThrottle,
          _fnConvertToWidth,
          _fnGetWidestNode,
          _fnGetMaxLenString,
          _fnStringToCss,
          _fnSortFlatten,
          _fnSort,
          _fnSortAria,
          _fnSortListener,
          _fnSortAttachListener,
          _fnSortingClasses,
          _fnSortData,
          _fnSaveState,
          _fnLoadState,
          _fnImplementState,
          _fnSettingsFromNode,
          _fnLog,
          _fnMap,
          _fnBindAction,
          _fnCallbackReg,
          _fnCallbackFire,
          _fnLengthOverflow,
          _fnRenderer,
          _fnDataSource,
          _fnRowAttributes,
          _fnExtend,
          _fnCalculateEnd: function() {
          }
          // Used by a lot of plug-ins, but redundant
          // in 1.10, so this dead-end function is
          // added to prevent errors
        });
        $2.fn.dataTable = DataTable;
        DataTable.$ = $2;
        $2.fn.dataTableSettings = DataTable.settings;
        $2.fn.dataTableExt = DataTable.ext;
        $2.fn.DataTable = function(opts) {
          return $2(this).dataTable(opts).api();
        };
        $2.each(DataTable, function(prop, val) {
          $2.fn.DataTable[prop] = val;
        });
        return DataTable;
      });
    }
  });

  // node_modules/datatables.net-dt/js/dataTables.dataTables.js
  var require_dataTables_dataTables = __commonJS({
    "node_modules/datatables.net-dt/js/dataTables.dataTables.js"(exports, module) {
      (function(factory) {
        if (typeof define === "function" && define.amd) {
          define(["jquery", "datatables.net"], function($2) {
            return factory($2, window, document);
          });
        } else if (typeof exports === "object") {
          var jq = require_jquery();
          var cjsRequires = function(root, $2) {
            if (!$2.fn.dataTable) {
              require_jquery_dataTables()(root, $2);
            }
          };
          if (typeof window !== "undefined") {
            module.exports = function(root, $2) {
              if (!root) {
                root = window;
              }
              if (!$2) {
                $2 = jq(root);
              }
              cjsRequires(root, $2);
              return factory($2, root, root.document);
            };
          } else {
            cjsRequires(window, jq);
            module.exports = factory(jq, window, window.document);
          }
        } else {
          factory(jQuery, window, document);
        }
      })(function($2, window2, document2, undefined2) {
        "use strict";
        var DataTable = $2.fn.dataTable;
        return DataTable;
      });
    }
  });

  // node_modules/select2/dist/js/select2.js
  var require_select2 = __commonJS({
    "node_modules/select2/dist/js/select2.js"(exports, module) {
      (function(factory) {
        if (typeof define === "function" && define.amd) {
          define(["jquery"], factory);
        } else if (typeof module === "object" && module.exports) {
          module.exports = function(root, jQuery2) {
            if (jQuery2 === void 0) {
              if (typeof window !== "undefined") {
                jQuery2 = require_jquery();
              } else {
                jQuery2 = require_jquery()(root);
              }
            }
            factory(jQuery2);
            return jQuery2;
          };
        } else {
          factory(jQuery);
        }
      })(function(jQuery2) {
        var S2 = function() {
          if (jQuery2 && jQuery2.fn && jQuery2.fn.select2 && jQuery2.fn.select2.amd) {
            var S22 = jQuery2.fn.select2.amd;
          }
          var S22;
          (function() {
            if (!S22 || !S22.requirejs) {
              if (!S22) {
                S22 = {};
              } else {
                require2 = S22;
              }
              var requirejs, require2, define2;
              (function(undef) {
                var main2, req, makeMap, handlers, defined = {}, waiting = {}, config = {}, defining = {}, hasOwn = Object.prototype.hasOwnProperty, aps = [].slice, jsSuffixRegExp = /\.js$/;
                function hasProp(obj, prop) {
                  return hasOwn.call(obj, prop);
                }
                function normalize(name, baseName) {
                  var nameParts, nameSegment, mapValue, foundMap, lastIndex, foundI, foundStarMap, starI, i, j, part, normalizedBaseParts, baseParts = baseName && baseName.split("/"), map = config.map, starMap = map && map["*"] || {};
                  if (name) {
                    name = name.split("/");
                    lastIndex = name.length - 1;
                    if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                      name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, "");
                    }
                    if (name[0].charAt(0) === "." && baseParts) {
                      normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                      name = normalizedBaseParts.concat(name);
                    }
                    for (i = 0; i < name.length; i++) {
                      part = name[i];
                      if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                      } else if (part === "..") {
                        if (i === 0 || i === 1 && name[2] === ".." || name[i - 1] === "..") {
                          continue;
                        } else if (i > 0) {
                          name.splice(i - 1, 2);
                          i -= 2;
                        }
                      }
                    }
                    name = name.join("/");
                  }
                  if ((baseParts || starMap) && map) {
                    nameParts = name.split("/");
                    for (i = nameParts.length; i > 0; i -= 1) {
                      nameSegment = nameParts.slice(0, i).join("/");
                      if (baseParts) {
                        for (j = baseParts.length; j > 0; j -= 1) {
                          mapValue = map[baseParts.slice(0, j).join("/")];
                          if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                              foundMap = mapValue;
                              foundI = i;
                              break;
                            }
                          }
                        }
                      }
                      if (foundMap) {
                        break;
                      }
                      if (!foundStarMap && starMap && starMap[nameSegment]) {
                        foundStarMap = starMap[nameSegment];
                        starI = i;
                      }
                    }
                    if (!foundMap && foundStarMap) {
                      foundMap = foundStarMap;
                      foundI = starI;
                    }
                    if (foundMap) {
                      nameParts.splice(0, foundI, foundMap);
                      name = nameParts.join("/");
                    }
                  }
                  return name;
                }
                function makeRequire(relName, forceSync) {
                  return function() {
                    var args = aps.call(arguments, 0);
                    if (typeof args[0] !== "string" && args.length === 1) {
                      args.push(null);
                    }
                    return req.apply(undef, args.concat([relName, forceSync]));
                  };
                }
                function makeNormalize(relName) {
                  return function(name) {
                    return normalize(name, relName);
                  };
                }
                function makeLoad(depName) {
                  return function(value) {
                    defined[depName] = value;
                  };
                }
                function callDep(name) {
                  if (hasProp(waiting, name)) {
                    var args = waiting[name];
                    delete waiting[name];
                    defining[name] = true;
                    main2.apply(undef, args);
                  }
                  if (!hasProp(defined, name) && !hasProp(defining, name)) {
                    throw new Error("No " + name);
                  }
                  return defined[name];
                }
                function splitPrefix(name) {
                  var prefix, index = name ? name.indexOf("!") : -1;
                  if (index > -1) {
                    prefix = name.substring(0, index);
                    name = name.substring(index + 1, name.length);
                  }
                  return [prefix, name];
                }
                function makeRelParts(relName) {
                  return relName ? splitPrefix(relName) : [];
                }
                makeMap = function(name, relParts) {
                  var plugin, parts = splitPrefix(name), prefix = parts[0], relResourceName = relParts[1];
                  name = parts[1];
                  if (prefix) {
                    prefix = normalize(prefix, relResourceName);
                    plugin = callDep(prefix);
                  }
                  if (prefix) {
                    if (plugin && plugin.normalize) {
                      name = plugin.normalize(name, makeNormalize(relResourceName));
                    } else {
                      name = normalize(name, relResourceName);
                    }
                  } else {
                    name = normalize(name, relResourceName);
                    parts = splitPrefix(name);
                    prefix = parts[0];
                    name = parts[1];
                    if (prefix) {
                      plugin = callDep(prefix);
                    }
                  }
                  return {
                    f: prefix ? prefix + "!" + name : name,
                    //fullName
                    n: name,
                    pr: prefix,
                    p: plugin
                  };
                };
                function makeConfig(name) {
                  return function() {
                    return config && config.config && config.config[name] || {};
                  };
                }
                handlers = {
                  require: function(name) {
                    return makeRequire(name);
                  },
                  exports: function(name) {
                    var e = defined[name];
                    if (typeof e !== "undefined") {
                      return e;
                    } else {
                      return defined[name] = {};
                    }
                  },
                  module: function(name) {
                    return {
                      id: name,
                      uri: "",
                      exports: defined[name],
                      config: makeConfig(name)
                    };
                  }
                };
                main2 = function(name, deps, callback, relName) {
                  var cjsModule, depName, ret, map, i, relParts, args = [], callbackType = typeof callback, usingExports;
                  relName = relName || name;
                  relParts = makeRelParts(relName);
                  if (callbackType === "undefined" || callbackType === "function") {
                    deps = !deps.length && callback.length ? ["require", "exports", "module"] : deps;
                    for (i = 0; i < deps.length; i += 1) {
                      map = makeMap(deps[i], relParts);
                      depName = map.f;
                      if (depName === "require") {
                        args[i] = handlers.require(name);
                      } else if (depName === "exports") {
                        args[i] = handlers.exports(name);
                        usingExports = true;
                      } else if (depName === "module") {
                        cjsModule = args[i] = handlers.module(name);
                      } else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) {
                        args[i] = callDep(depName);
                      } else if (map.p) {
                        map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                        args[i] = defined[depName];
                      } else {
                        throw new Error(name + " missing " + depName);
                      }
                    }
                    ret = callback ? callback.apply(defined[name], args) : void 0;
                    if (name) {
                      if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) {
                        defined[name] = cjsModule.exports;
                      } else if (ret !== undef || !usingExports) {
                        defined[name] = ret;
                      }
                    }
                  } else if (name) {
                    defined[name] = callback;
                  }
                };
                requirejs = require2 = req = function(deps, callback, relName, forceSync, alt) {
                  if (typeof deps === "string") {
                    if (handlers[deps]) {
                      return handlers[deps](callback);
                    }
                    return callDep(makeMap(deps, makeRelParts(callback)).f);
                  } else if (!deps.splice) {
                    config = deps;
                    if (config.deps) {
                      req(config.deps, config.callback);
                    }
                    if (!callback) {
                      return;
                    }
                    if (callback.splice) {
                      deps = callback;
                      callback = relName;
                      relName = null;
                    } else {
                      deps = undef;
                    }
                  }
                  callback = callback || function() {
                  };
                  if (typeof relName === "function") {
                    relName = forceSync;
                    forceSync = alt;
                  }
                  if (forceSync) {
                    main2(undef, deps, callback, relName);
                  } else {
                    setTimeout(function() {
                      main2(undef, deps, callback, relName);
                    }, 4);
                  }
                  return req;
                };
                req.config = function(cfg) {
                  return req(cfg);
                };
                requirejs._defined = defined;
                define2 = function(name, deps, callback) {
                  if (typeof name !== "string") {
                    throw new Error("See almond README: incorrect module build, no module name");
                  }
                  if (!deps.splice) {
                    callback = deps;
                    deps = [];
                  }
                  if (!hasProp(defined, name) && !hasProp(waiting, name)) {
                    waiting[name] = [name, deps, callback];
                  }
                };
                define2.amd = {
                  jQuery: true
                };
              })();
              S22.requirejs = requirejs;
              S22.require = require2;
              S22.define = define2;
            }
          })();
          S22.define("almond", function() {
          });
          S22.define("jquery", [], function() {
            var _$ = jQuery2 || $;
            if (_$ == null && console && console.error) {
              console.error(
                "Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."
              );
            }
            return _$;
          });
          S22.define("select2/utils", [
            "jquery"
          ], function($2) {
            var Utils = {};
            Utils.Extend = function(ChildClass, SuperClass) {
              var __hasProp = {}.hasOwnProperty;
              function BaseConstructor() {
                this.constructor = ChildClass;
              }
              for (var key in SuperClass) {
                if (__hasProp.call(SuperClass, key)) {
                  ChildClass[key] = SuperClass[key];
                }
              }
              BaseConstructor.prototype = SuperClass.prototype;
              ChildClass.prototype = new BaseConstructor();
              ChildClass.__super__ = SuperClass.prototype;
              return ChildClass;
            };
            function getMethods(theClass) {
              var proto = theClass.prototype;
              var methods = [];
              for (var methodName in proto) {
                var m = proto[methodName];
                if (typeof m !== "function") {
                  continue;
                }
                if (methodName === "constructor") {
                  continue;
                }
                methods.push(methodName);
              }
              return methods;
            }
            Utils.Decorate = function(SuperClass, DecoratorClass) {
              var decoratedMethods = getMethods(DecoratorClass);
              var superMethods = getMethods(SuperClass);
              function DecoratedClass() {
                var unshift = Array.prototype.unshift;
                var argCount = DecoratorClass.prototype.constructor.length;
                var calledConstructor = SuperClass.prototype.constructor;
                if (argCount > 0) {
                  unshift.call(arguments, SuperClass.prototype.constructor);
                  calledConstructor = DecoratorClass.prototype.constructor;
                }
                calledConstructor.apply(this, arguments);
              }
              DecoratorClass.displayName = SuperClass.displayName;
              function ctr() {
                this.constructor = DecoratedClass;
              }
              DecoratedClass.prototype = new ctr();
              for (var m = 0; m < superMethods.length; m++) {
                var superMethod = superMethods[m];
                DecoratedClass.prototype[superMethod] = SuperClass.prototype[superMethod];
              }
              var calledMethod = function(methodName) {
                var originalMethod = function() {
                };
                if (methodName in DecoratedClass.prototype) {
                  originalMethod = DecoratedClass.prototype[methodName];
                }
                var decoratedMethod2 = DecoratorClass.prototype[methodName];
                return function() {
                  var unshift = Array.prototype.unshift;
                  unshift.call(arguments, originalMethod);
                  return decoratedMethod2.apply(this, arguments);
                };
              };
              for (var d = 0; d < decoratedMethods.length; d++) {
                var decoratedMethod = decoratedMethods[d];
                DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
              }
              return DecoratedClass;
            };
            var Observable = function() {
              this.listeners = {};
            };
            Observable.prototype.on = function(event, callback) {
              this.listeners = this.listeners || {};
              if (event in this.listeners) {
                this.listeners[event].push(callback);
              } else {
                this.listeners[event] = [callback];
              }
            };
            Observable.prototype.trigger = function(event) {
              var slice = Array.prototype.slice;
              var params = slice.call(arguments, 1);
              this.listeners = this.listeners || {};
              if (params == null) {
                params = [];
              }
              if (params.length === 0) {
                params.push({});
              }
              params[0]._type = event;
              if (event in this.listeners) {
                this.invoke(this.listeners[event], slice.call(arguments, 1));
              }
              if ("*" in this.listeners) {
                this.invoke(this.listeners["*"], arguments);
              }
            };
            Observable.prototype.invoke = function(listeners, params) {
              for (var i = 0, len = listeners.length; i < len; i++) {
                listeners[i].apply(this, params);
              }
            };
            Utils.Observable = Observable;
            Utils.generateChars = function(length) {
              var chars = "";
              for (var i = 0; i < length; i++) {
                var randomChar = Math.floor(Math.random() * 36);
                chars += randomChar.toString(36);
              }
              return chars;
            };
            Utils.bind = function(func, context) {
              return function() {
                func.apply(context, arguments);
              };
            };
            Utils._convertData = function(data) {
              for (var originalKey in data) {
                var keys = originalKey.split("-");
                var dataLevel = data;
                if (keys.length === 1) {
                  continue;
                }
                for (var k = 0; k < keys.length; k++) {
                  var key = keys[k];
                  key = key.substring(0, 1).toLowerCase() + key.substring(1);
                  if (!(key in dataLevel)) {
                    dataLevel[key] = {};
                  }
                  if (k == keys.length - 1) {
                    dataLevel[key] = data[originalKey];
                  }
                  dataLevel = dataLevel[key];
                }
                delete data[originalKey];
              }
              return data;
            };
            Utils.hasScroll = function(index, el) {
              var $el = $2(el);
              var overflowX = el.style.overflowX;
              var overflowY = el.style.overflowY;
              if (overflowX === overflowY && (overflowY === "hidden" || overflowY === "visible")) {
                return false;
              }
              if (overflowX === "scroll" || overflowY === "scroll") {
                return true;
              }
              return $el.innerHeight() < el.scrollHeight || $el.innerWidth() < el.scrollWidth;
            };
            Utils.escapeMarkup = function(markup) {
              var replaceMap = {
                "\\": "&#92;",
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;",
                "/": "&#47;"
              };
              if (typeof markup !== "string") {
                return markup;
              }
              return String(markup).replace(/[&<>"'\/\\]/g, function(match) {
                return replaceMap[match];
              });
            };
            Utils.appendMany = function($element, $nodes) {
              if ($2.fn.jquery.substr(0, 3) === "1.7") {
                var $jqNodes = $2();
                $2.map($nodes, function(node) {
                  $jqNodes = $jqNodes.add(node);
                });
                $nodes = $jqNodes;
              }
              $element.append($nodes);
            };
            Utils.__cache = {};
            var id = 0;
            Utils.GetUniqueElementId = function(element) {
              var select2Id = element.getAttribute("data-select2-id");
              if (select2Id == null) {
                if (element.id) {
                  select2Id = element.id;
                  element.setAttribute("data-select2-id", select2Id);
                } else {
                  element.setAttribute("data-select2-id", ++id);
                  select2Id = id.toString();
                }
              }
              return select2Id;
            };
            Utils.StoreData = function(element, name, value) {
              var id2 = Utils.GetUniqueElementId(element);
              if (!Utils.__cache[id2]) {
                Utils.__cache[id2] = {};
              }
              Utils.__cache[id2][name] = value;
            };
            Utils.GetData = function(element, name) {
              var id2 = Utils.GetUniqueElementId(element);
              if (name) {
                if (Utils.__cache[id2]) {
                  if (Utils.__cache[id2][name] != null) {
                    return Utils.__cache[id2][name];
                  }
                  return $2(element).data(name);
                }
                return $2(element).data(name);
              } else {
                return Utils.__cache[id2];
              }
            };
            Utils.RemoveData = function(element) {
              var id2 = Utils.GetUniqueElementId(element);
              if (Utils.__cache[id2] != null) {
                delete Utils.__cache[id2];
              }
              element.removeAttribute("data-select2-id");
            };
            return Utils;
          });
          S22.define("select2/results", [
            "jquery",
            "./utils"
          ], function($2, Utils) {
            function Results($element, options, dataAdapter) {
              this.$element = $element;
              this.data = dataAdapter;
              this.options = options;
              Results.__super__.constructor.call(this);
            }
            Utils.Extend(Results, Utils.Observable);
            Results.prototype.render = function() {
              var $results = $2(
                '<ul class="select2-results__options" role="listbox"></ul>'
              );
              if (this.options.get("multiple")) {
                $results.attr("aria-multiselectable", "true");
              }
              this.$results = $results;
              return $results;
            };
            Results.prototype.clear = function() {
              this.$results.empty();
            };
            Results.prototype.displayMessage = function(params) {
              var escapeMarkup = this.options.get("escapeMarkup");
              this.clear();
              this.hideLoading();
              var $message = $2(
                '<li role="alert" aria-live="assertive" class="select2-results__option"></li>'
              );
              var message = this.options.get("translations").get(params.message);
              $message.append(
                escapeMarkup(
                  message(params.args)
                )
              );
              $message[0].className += " select2-results__message";
              this.$results.append($message);
            };
            Results.prototype.hideMessages = function() {
              this.$results.find(".select2-results__message").remove();
            };
            Results.prototype.append = function(data) {
              this.hideLoading();
              var $options = [];
              if (data.results == null || data.results.length === 0) {
                if (this.$results.children().length === 0) {
                  this.trigger("results:message", {
                    message: "noResults"
                  });
                }
                return;
              }
              data.results = this.sort(data.results);
              for (var d = 0; d < data.results.length; d++) {
                var item = data.results[d];
                var $option = this.option(item);
                $options.push($option);
              }
              this.$results.append($options);
            };
            Results.prototype.position = function($results, $dropdown) {
              var $resultsContainer = $dropdown.find(".select2-results");
              $resultsContainer.append($results);
            };
            Results.prototype.sort = function(data) {
              var sorter = this.options.get("sorter");
              return sorter(data);
            };
            Results.prototype.highlightFirstItem = function() {
              var $options = this.$results.find(".select2-results__option[aria-selected]");
              var $selected = $options.filter("[aria-selected=true]");
              if ($selected.length > 0) {
                $selected.first().trigger("mouseenter");
              } else {
                $options.first().trigger("mouseenter");
              }
              this.ensureHighlightVisible();
            };
            Results.prototype.setClasses = function() {
              var self2 = this;
              this.data.current(function(selected) {
                var selectedIds = $2.map(selected, function(s) {
                  return s.id.toString();
                });
                var $options = self2.$results.find(".select2-results__option[aria-selected]");
                $options.each(function() {
                  var $option = $2(this);
                  var item = Utils.GetData(this, "data");
                  var id = "" + item.id;
                  if (item.element != null && item.element.selected || item.element == null && $2.inArray(id, selectedIds) > -1) {
                    $option.attr("aria-selected", "true");
                  } else {
                    $option.attr("aria-selected", "false");
                  }
                });
              });
            };
            Results.prototype.showLoading = function(params) {
              this.hideLoading();
              var loadingMore = this.options.get("translations").get("searching");
              var loading = {
                disabled: true,
                loading: true,
                text: loadingMore(params)
              };
              var $loading = this.option(loading);
              $loading.className += " loading-results";
              this.$results.prepend($loading);
            };
            Results.prototype.hideLoading = function() {
              this.$results.find(".loading-results").remove();
            };
            Results.prototype.option = function(data) {
              var option = document.createElement("li");
              option.className = "select2-results__option";
              var attrs = {
                "role": "option",
                "aria-selected": "false"
              };
              var matches = window.Element.prototype.matches || window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector;
              if (data.element != null && matches.call(data.element, ":disabled") || data.element == null && data.disabled) {
                delete attrs["aria-selected"];
                attrs["aria-disabled"] = "true";
              }
              if (data.id == null) {
                delete attrs["aria-selected"];
              }
              if (data._resultId != null) {
                option.id = data._resultId;
              }
              if (data.title) {
                option.title = data.title;
              }
              if (data.children) {
                attrs.role = "group";
                attrs["aria-label"] = data.text;
                delete attrs["aria-selected"];
              }
              for (var attr in attrs) {
                var val = attrs[attr];
                option.setAttribute(attr, val);
              }
              if (data.children) {
                var $option = $2(option);
                var label = document.createElement("strong");
                label.className = "select2-results__group";
                var $label = $2(label);
                this.template(data, label);
                var $children = [];
                for (var c = 0; c < data.children.length; c++) {
                  var child = data.children[c];
                  var $child = this.option(child);
                  $children.push($child);
                }
                var $childrenContainer = $2("<ul></ul>", {
                  "class": "select2-results__options select2-results__options--nested"
                });
                $childrenContainer.append($children);
                $option.append(label);
                $option.append($childrenContainer);
              } else {
                this.template(data, option);
              }
              Utils.StoreData(option, "data", data);
              return option;
            };
            Results.prototype.bind = function(container, $container) {
              var self2 = this;
              var id = container.id + "-results";
              this.$results.attr("id", id);
              container.on("results:all", function(params) {
                self2.clear();
                self2.append(params.data);
                if (container.isOpen()) {
                  self2.setClasses();
                  self2.highlightFirstItem();
                }
              });
              container.on("results:append", function(params) {
                self2.append(params.data);
                if (container.isOpen()) {
                  self2.setClasses();
                }
              });
              container.on("query", function(params) {
                self2.hideMessages();
                self2.showLoading(params);
              });
              container.on("select", function() {
                if (!container.isOpen()) {
                  return;
                }
                self2.setClasses();
                if (self2.options.get("scrollAfterSelect")) {
                  self2.highlightFirstItem();
                }
              });
              container.on("unselect", function() {
                if (!container.isOpen()) {
                  return;
                }
                self2.setClasses();
                if (self2.options.get("scrollAfterSelect")) {
                  self2.highlightFirstItem();
                }
              });
              container.on("open", function() {
                self2.$results.attr("aria-expanded", "true");
                self2.$results.attr("aria-hidden", "false");
                self2.setClasses();
                self2.ensureHighlightVisible();
              });
              container.on("close", function() {
                self2.$results.attr("aria-expanded", "false");
                self2.$results.attr("aria-hidden", "true");
                self2.$results.removeAttr("aria-activedescendant");
              });
              container.on("results:toggle", function() {
                var $highlighted = self2.getHighlightedResults();
                if ($highlighted.length === 0) {
                  return;
                }
                $highlighted.trigger("mouseup");
              });
              container.on("results:select", function() {
                var $highlighted = self2.getHighlightedResults();
                if ($highlighted.length === 0) {
                  return;
                }
                var data = Utils.GetData($highlighted[0], "data");
                if ($highlighted.attr("aria-selected") == "true") {
                  self2.trigger("close", {});
                } else {
                  self2.trigger("select", {
                    data
                  });
                }
              });
              container.on("results:previous", function() {
                var $highlighted = self2.getHighlightedResults();
                var $options = self2.$results.find("[aria-selected]");
                var currentIndex = $options.index($highlighted);
                if (currentIndex <= 0) {
                  return;
                }
                var nextIndex = currentIndex - 1;
                if ($highlighted.length === 0) {
                  nextIndex = 0;
                }
                var $next = $options.eq(nextIndex);
                $next.trigger("mouseenter");
                var currentOffset = self2.$results.offset().top;
                var nextTop = $next.offset().top;
                var nextOffset = self2.$results.scrollTop() + (nextTop - currentOffset);
                if (nextIndex === 0) {
                  self2.$results.scrollTop(0);
                } else if (nextTop - currentOffset < 0) {
                  self2.$results.scrollTop(nextOffset);
                }
              });
              container.on("results:next", function() {
                var $highlighted = self2.getHighlightedResults();
                var $options = self2.$results.find("[aria-selected]");
                var currentIndex = $options.index($highlighted);
                var nextIndex = currentIndex + 1;
                if (nextIndex >= $options.length) {
                  return;
                }
                var $next = $options.eq(nextIndex);
                $next.trigger("mouseenter");
                var currentOffset = self2.$results.offset().top + self2.$results.outerHeight(false);
                var nextBottom = $next.offset().top + $next.outerHeight(false);
                var nextOffset = self2.$results.scrollTop() + nextBottom - currentOffset;
                if (nextIndex === 0) {
                  self2.$results.scrollTop(0);
                } else if (nextBottom > currentOffset) {
                  self2.$results.scrollTop(nextOffset);
                }
              });
              container.on("results:focus", function(params) {
                params.element.addClass("select2-results__option--highlighted");
              });
              container.on("results:message", function(params) {
                self2.displayMessage(params);
              });
              if ($2.fn.mousewheel) {
                this.$results.on("mousewheel", function(e) {
                  var top2 = self2.$results.scrollTop();
                  var bottom2 = self2.$results.get(0).scrollHeight - top2 + e.deltaY;
                  var isAtTop = e.deltaY > 0 && top2 - e.deltaY <= 0;
                  var isAtBottom = e.deltaY < 0 && bottom2 <= self2.$results.height();
                  if (isAtTop) {
                    self2.$results.scrollTop(0);
                    e.preventDefault();
                    e.stopPropagation();
                  } else if (isAtBottom) {
                    self2.$results.scrollTop(
                      self2.$results.get(0).scrollHeight - self2.$results.height()
                    );
                    e.preventDefault();
                    e.stopPropagation();
                  }
                });
              }
              this.$results.on(
                "mouseup",
                ".select2-results__option[aria-selected]",
                function(evt) {
                  var $this = $2(this);
                  var data = Utils.GetData(this, "data");
                  if ($this.attr("aria-selected") === "true") {
                    if (self2.options.get("multiple")) {
                      self2.trigger("unselect", {
                        originalEvent: evt,
                        data
                      });
                    } else {
                      self2.trigger("close", {});
                    }
                    return;
                  }
                  self2.trigger("select", {
                    originalEvent: evt,
                    data
                  });
                }
              );
              this.$results.on(
                "mouseenter",
                ".select2-results__option[aria-selected]",
                function(evt) {
                  var data = Utils.GetData(this, "data");
                  self2.getHighlightedResults().removeClass("select2-results__option--highlighted");
                  self2.trigger("results:focus", {
                    data,
                    element: $2(this)
                  });
                }
              );
            };
            Results.prototype.getHighlightedResults = function() {
              var $highlighted = this.$results.find(".select2-results__option--highlighted");
              return $highlighted;
            };
            Results.prototype.destroy = function() {
              this.$results.remove();
            };
            Results.prototype.ensureHighlightVisible = function() {
              var $highlighted = this.getHighlightedResults();
              if ($highlighted.length === 0) {
                return;
              }
              var $options = this.$results.find("[aria-selected]");
              var currentIndex = $options.index($highlighted);
              var currentOffset = this.$results.offset().top;
              var nextTop = $highlighted.offset().top;
              var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);
              var offsetDelta = nextTop - currentOffset;
              nextOffset -= $highlighted.outerHeight(false) * 2;
              if (currentIndex <= 2) {
                this.$results.scrollTop(0);
              } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
                this.$results.scrollTop(nextOffset);
              }
            };
            Results.prototype.template = function(result, container) {
              var template = this.options.get("templateResult");
              var escapeMarkup = this.options.get("escapeMarkup");
              var content = template(result, container);
              if (content == null) {
                container.style.display = "none";
              } else if (typeof content === "string") {
                container.innerHTML = escapeMarkup(content);
              } else {
                $2(container).append(content);
              }
            };
            return Results;
          });
          S22.define("select2/keys", [], function() {
            var KEYS = {
              BACKSPACE: 8,
              TAB: 9,
              ENTER: 13,
              SHIFT: 16,
              CTRL: 17,
              ALT: 18,
              ESC: 27,
              SPACE: 32,
              PAGE_UP: 33,
              PAGE_DOWN: 34,
              END: 35,
              HOME: 36,
              LEFT: 37,
              UP: 38,
              RIGHT: 39,
              DOWN: 40,
              DELETE: 46
            };
            return KEYS;
          });
          S22.define("select2/selection/base", [
            "jquery",
            "../utils",
            "../keys"
          ], function($2, Utils, KEYS) {
            function BaseSelection($element, options) {
              this.$element = $element;
              this.options = options;
              BaseSelection.__super__.constructor.call(this);
            }
            Utils.Extend(BaseSelection, Utils.Observable);
            BaseSelection.prototype.render = function() {
              var $selection = $2(
                '<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>'
              );
              this._tabindex = 0;
              if (Utils.GetData(this.$element[0], "old-tabindex") != null) {
                this._tabindex = Utils.GetData(this.$element[0], "old-tabindex");
              } else if (this.$element.attr("tabindex") != null) {
                this._tabindex = this.$element.attr("tabindex");
              }
              $selection.attr("title", this.$element.attr("title"));
              $selection.attr("tabindex", this._tabindex);
              $selection.attr("aria-disabled", "false");
              this.$selection = $selection;
              return $selection;
            };
            BaseSelection.prototype.bind = function(container, $container) {
              var self2 = this;
              var resultsId = container.id + "-results";
              this.container = container;
              this.$selection.on("focus", function(evt) {
                self2.trigger("focus", evt);
              });
              this.$selection.on("blur", function(evt) {
                self2._handleBlur(evt);
              });
              this.$selection.on("keydown", function(evt) {
                self2.trigger("keypress", evt);
                if (evt.which === KEYS.SPACE) {
                  evt.preventDefault();
                }
              });
              container.on("results:focus", function(params) {
                self2.$selection.attr("aria-activedescendant", params.data._resultId);
              });
              container.on("selection:update", function(params) {
                self2.update(params.data);
              });
              container.on("open", function() {
                self2.$selection.attr("aria-expanded", "true");
                self2.$selection.attr("aria-owns", resultsId);
                self2._attachCloseHandler(container);
              });
              container.on("close", function() {
                self2.$selection.attr("aria-expanded", "false");
                self2.$selection.removeAttr("aria-activedescendant");
                self2.$selection.removeAttr("aria-owns");
                self2.$selection.trigger("focus");
                self2._detachCloseHandler(container);
              });
              container.on("enable", function() {
                self2.$selection.attr("tabindex", self2._tabindex);
                self2.$selection.attr("aria-disabled", "false");
              });
              container.on("disable", function() {
                self2.$selection.attr("tabindex", "-1");
                self2.$selection.attr("aria-disabled", "true");
              });
            };
            BaseSelection.prototype._handleBlur = function(evt) {
              var self2 = this;
              window.setTimeout(function() {
                if (document.activeElement == self2.$selection[0] || $2.contains(self2.$selection[0], document.activeElement)) {
                  return;
                }
                self2.trigger("blur", evt);
              }, 1);
            };
            BaseSelection.prototype._attachCloseHandler = function(container) {
              $2(document.body).on("mousedown.select2." + container.id, function(e) {
                var $target = $2(e.target);
                var $select = $target.closest(".select2");
                var $all = $2(".select2.select2-container--open");
                $all.each(function() {
                  if (this == $select[0]) {
                    return;
                  }
                  var $element = Utils.GetData(this, "element");
                  $element.select2("close");
                });
              });
            };
            BaseSelection.prototype._detachCloseHandler = function(container) {
              $2(document.body).off("mousedown.select2." + container.id);
            };
            BaseSelection.prototype.position = function($selection, $container) {
              var $selectionContainer = $container.find(".selection");
              $selectionContainer.append($selection);
            };
            BaseSelection.prototype.destroy = function() {
              this._detachCloseHandler(this.container);
            };
            BaseSelection.prototype.update = function(data) {
              throw new Error("The `update` method must be defined in child classes.");
            };
            BaseSelection.prototype.isEnabled = function() {
              return !this.isDisabled();
            };
            BaseSelection.prototype.isDisabled = function() {
              return this.options.get("disabled");
            };
            return BaseSelection;
          });
          S22.define("select2/selection/single", [
            "jquery",
            "./base",
            "../utils",
            "../keys"
          ], function($2, BaseSelection, Utils, KEYS) {
            function SingleSelection() {
              SingleSelection.__super__.constructor.apply(this, arguments);
            }
            Utils.Extend(SingleSelection, BaseSelection);
            SingleSelection.prototype.render = function() {
              var $selection = SingleSelection.__super__.render.call(this);
              $selection.addClass("select2-selection--single");
              $selection.html(
                '<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'
              );
              return $selection;
            };
            SingleSelection.prototype.bind = function(container, $container) {
              var self2 = this;
              SingleSelection.__super__.bind.apply(this, arguments);
              var id = container.id + "-container";
              this.$selection.find(".select2-selection__rendered").attr("id", id).attr("role", "textbox").attr("aria-readonly", "true");
              this.$selection.attr("aria-labelledby", id);
              this.$selection.on("mousedown", function(evt) {
                if (evt.which !== 1) {
                  return;
                }
                self2.trigger("toggle", {
                  originalEvent: evt
                });
              });
              this.$selection.on("focus", function(evt) {
              });
              this.$selection.on("blur", function(evt) {
              });
              container.on("focus", function(evt) {
                if (!container.isOpen()) {
                  self2.$selection.trigger("focus");
                }
              });
            };
            SingleSelection.prototype.clear = function() {
              var $rendered = this.$selection.find(".select2-selection__rendered");
              $rendered.empty();
              $rendered.removeAttr("title");
            };
            SingleSelection.prototype.display = function(data, container) {
              var template = this.options.get("templateSelection");
              var escapeMarkup = this.options.get("escapeMarkup");
              return escapeMarkup(template(data, container));
            };
            SingleSelection.prototype.selectionContainer = function() {
              return $2("<span></span>");
            };
            SingleSelection.prototype.update = function(data) {
              if (data.length === 0) {
                this.clear();
                return;
              }
              var selection = data[0];
              var $rendered = this.$selection.find(".select2-selection__rendered");
              var formatted = this.display(selection, $rendered);
              $rendered.empty().append(formatted);
              var title = selection.title || selection.text;
              if (title) {
                $rendered.attr("title", title);
              } else {
                $rendered.removeAttr("title");
              }
            };
            return SingleSelection;
          });
          S22.define("select2/selection/multiple", [
            "jquery",
            "./base",
            "../utils"
          ], function($2, BaseSelection, Utils) {
            function MultipleSelection($element, options) {
              MultipleSelection.__super__.constructor.apply(this, arguments);
            }
            Utils.Extend(MultipleSelection, BaseSelection);
            MultipleSelection.prototype.render = function() {
              var $selection = MultipleSelection.__super__.render.call(this);
              $selection.addClass("select2-selection--multiple");
              $selection.html(
                '<ul class="select2-selection__rendered"></ul>'
              );
              return $selection;
            };
            MultipleSelection.prototype.bind = function(container, $container) {
              var self2 = this;
              MultipleSelection.__super__.bind.apply(this, arguments);
              this.$selection.on("click", function(evt) {
                self2.trigger("toggle", {
                  originalEvent: evt
                });
              });
              this.$selection.on(
                "click",
                ".select2-selection__choice__remove",
                function(evt) {
                  if (self2.isDisabled()) {
                    return;
                  }
                  var $remove = $2(this);
                  var $selection = $remove.parent();
                  var data = Utils.GetData($selection[0], "data");
                  self2.trigger("unselect", {
                    originalEvent: evt,
                    data
                  });
                }
              );
            };
            MultipleSelection.prototype.clear = function() {
              var $rendered = this.$selection.find(".select2-selection__rendered");
              $rendered.empty();
              $rendered.removeAttr("title");
            };
            MultipleSelection.prototype.display = function(data, container) {
              var template = this.options.get("templateSelection");
              var escapeMarkup = this.options.get("escapeMarkup");
              return escapeMarkup(template(data, container));
            };
            MultipleSelection.prototype.selectionContainer = function() {
              var $container = $2(
                '<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>'
              );
              return $container;
            };
            MultipleSelection.prototype.update = function(data) {
              this.clear();
              if (data.length === 0) {
                return;
              }
              var $selections = [];
              for (var d = 0; d < data.length; d++) {
                var selection = data[d];
                var $selection = this.selectionContainer();
                var formatted = this.display(selection, $selection);
                $selection.append(formatted);
                var title = selection.title || selection.text;
                if (title) {
                  $selection.attr("title", title);
                }
                Utils.StoreData($selection[0], "data", selection);
                $selections.push($selection);
              }
              var $rendered = this.$selection.find(".select2-selection__rendered");
              Utils.appendMany($rendered, $selections);
            };
            return MultipleSelection;
          });
          S22.define("select2/selection/placeholder", [
            "../utils"
          ], function(Utils) {
            function Placeholder(decorated, $element, options) {
              this.placeholder = this.normalizePlaceholder(options.get("placeholder"));
              decorated.call(this, $element, options);
            }
            Placeholder.prototype.normalizePlaceholder = function(_, placeholder) {
              if (typeof placeholder === "string") {
                placeholder = {
                  id: "",
                  text: placeholder
                };
              }
              return placeholder;
            };
            Placeholder.prototype.createPlaceholder = function(decorated, placeholder) {
              var $placeholder = this.selectionContainer();
              $placeholder.html(this.display(placeholder));
              $placeholder.addClass("select2-selection__placeholder").removeClass("select2-selection__choice");
              return $placeholder;
            };
            Placeholder.prototype.update = function(decorated, data) {
              var singlePlaceholder = data.length == 1 && data[0].id != this.placeholder.id;
              var multipleSelections = data.length > 1;
              if (multipleSelections || singlePlaceholder) {
                return decorated.call(this, data);
              }
              this.clear();
              var $placeholder = this.createPlaceholder(this.placeholder);
              this.$selection.find(".select2-selection__rendered").append($placeholder);
            };
            return Placeholder;
          });
          S22.define("select2/selection/allowClear", [
            "jquery",
            "../keys",
            "../utils"
          ], function($2, KEYS, Utils) {
            function AllowClear() {
            }
            AllowClear.prototype.bind = function(decorated, container, $container) {
              var self2 = this;
              decorated.call(this, container, $container);
              if (this.placeholder == null) {
                if (this.options.get("debug") && window.console && console.error) {
                  console.error(
                    "Select2: The `allowClear` option should be used in combination with the `placeholder` option."
                  );
                }
              }
              this.$selection.on(
                "mousedown",
                ".select2-selection__clear",
                function(evt) {
                  self2._handleClear(evt);
                }
              );
              container.on("keypress", function(evt) {
                self2._handleKeyboardClear(evt, container);
              });
            };
            AllowClear.prototype._handleClear = function(_, evt) {
              if (this.isDisabled()) {
                return;
              }
              var $clear = this.$selection.find(".select2-selection__clear");
              if ($clear.length === 0) {
                return;
              }
              evt.stopPropagation();
              var data = Utils.GetData($clear[0], "data");
              var previousVal = this.$element.val();
              this.$element.val(this.placeholder.id);
              var unselectData = {
                data
              };
              this.trigger("clear", unselectData);
              if (unselectData.prevented) {
                this.$element.val(previousVal);
                return;
              }
              for (var d = 0; d < data.length; d++) {
                unselectData = {
                  data: data[d]
                };
                this.trigger("unselect", unselectData);
                if (unselectData.prevented) {
                  this.$element.val(previousVal);
                  return;
                }
              }
              this.$element.trigger("input").trigger("change");
              this.trigger("toggle", {});
            };
            AllowClear.prototype._handleKeyboardClear = function(_, evt, container) {
              if (container.isOpen()) {
                return;
              }
              if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
                this._handleClear(evt);
              }
            };
            AllowClear.prototype.update = function(decorated, data) {
              decorated.call(this, data);
              if (this.$selection.find(".select2-selection__placeholder").length > 0 || data.length === 0) {
                return;
              }
              var removeAll = this.options.get("translations").get("removeAllItems");
              var $remove = $2(
                '<span class="select2-selection__clear" title="' + removeAll() + '">&times;</span>'
              );
              Utils.StoreData($remove[0], "data", data);
              this.$selection.find(".select2-selection__rendered").prepend($remove);
            };
            return AllowClear;
          });
          S22.define("select2/selection/search", [
            "jquery",
            "../utils",
            "../keys"
          ], function($2, Utils, KEYS) {
            function Search(decorated, $element, options) {
              decorated.call(this, $element, options);
            }
            Search.prototype.render = function(decorated) {
              var $search = $2(
                '<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></li>'
              );
              this.$searchContainer = $search;
              this.$search = $search.find("input");
              var $rendered = decorated.call(this);
              this._transferTabIndex();
              return $rendered;
            };
            Search.prototype.bind = function(decorated, container, $container) {
              var self2 = this;
              var resultsId = container.id + "-results";
              decorated.call(this, container, $container);
              container.on("open", function() {
                self2.$search.attr("aria-controls", resultsId);
                self2.$search.trigger("focus");
              });
              container.on("close", function() {
                self2.$search.val("");
                self2.$search.removeAttr("aria-controls");
                self2.$search.removeAttr("aria-activedescendant");
                self2.$search.trigger("focus");
              });
              container.on("enable", function() {
                self2.$search.prop("disabled", false);
                self2._transferTabIndex();
              });
              container.on("disable", function() {
                self2.$search.prop("disabled", true);
              });
              container.on("focus", function(evt) {
                self2.$search.trigger("focus");
              });
              container.on("results:focus", function(params) {
                if (params.data._resultId) {
                  self2.$search.attr("aria-activedescendant", params.data._resultId);
                } else {
                  self2.$search.removeAttr("aria-activedescendant");
                }
              });
              this.$selection.on("focusin", ".select2-search--inline", function(evt) {
                self2.trigger("focus", evt);
              });
              this.$selection.on("focusout", ".select2-search--inline", function(evt) {
                self2._handleBlur(evt);
              });
              this.$selection.on("keydown", ".select2-search--inline", function(evt) {
                evt.stopPropagation();
                self2.trigger("keypress", evt);
                self2._keyUpPrevented = evt.isDefaultPrevented();
                var key = evt.which;
                if (key === KEYS.BACKSPACE && self2.$search.val() === "") {
                  var $previousChoice = self2.$searchContainer.prev(".select2-selection__choice");
                  if ($previousChoice.length > 0) {
                    var item = Utils.GetData($previousChoice[0], "data");
                    self2.searchRemoveChoice(item);
                    evt.preventDefault();
                  }
                }
              });
              this.$selection.on("click", ".select2-search--inline", function(evt) {
                if (self2.$search.val()) {
                  evt.stopPropagation();
                }
              });
              var msie = document.documentMode;
              var disableInputEvents = msie && msie <= 11;
              this.$selection.on(
                "input.searchcheck",
                ".select2-search--inline",
                function(evt) {
                  if (disableInputEvents) {
                    self2.$selection.off("input.search input.searchcheck");
                    return;
                  }
                  self2.$selection.off("keyup.search");
                }
              );
              this.$selection.on(
                "keyup.search input.search",
                ".select2-search--inline",
                function(evt) {
                  if (disableInputEvents && evt.type === "input") {
                    self2.$selection.off("input.search input.searchcheck");
                    return;
                  }
                  var key = evt.which;
                  if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
                    return;
                  }
                  if (key == KEYS.TAB) {
                    return;
                  }
                  self2.handleSearch(evt);
                }
              );
            };
            Search.prototype._transferTabIndex = function(decorated) {
              this.$search.attr("tabindex", this.$selection.attr("tabindex"));
              this.$selection.attr("tabindex", "-1");
            };
            Search.prototype.createPlaceholder = function(decorated, placeholder) {
              this.$search.attr("placeholder", placeholder.text);
            };
            Search.prototype.update = function(decorated, data) {
              var searchHadFocus = this.$search[0] == document.activeElement;
              this.$search.attr("placeholder", "");
              decorated.call(this, data);
              this.$selection.find(".select2-selection__rendered").append(this.$searchContainer);
              this.resizeSearch();
              if (searchHadFocus) {
                this.$search.trigger("focus");
              }
            };
            Search.prototype.handleSearch = function() {
              this.resizeSearch();
              if (!this._keyUpPrevented) {
                var input = this.$search.val();
                this.trigger("query", {
                  term: input
                });
              }
              this._keyUpPrevented = false;
            };
            Search.prototype.searchRemoveChoice = function(decorated, item) {
              this.trigger("unselect", {
                data: item
              });
              this.$search.val(item.text);
              this.handleSearch();
            };
            Search.prototype.resizeSearch = function() {
              this.$search.css("width", "25px");
              var width = "";
              if (this.$search.attr("placeholder") !== "") {
                width = this.$selection.find(".select2-selection__rendered").width();
              } else {
                var minimumWidth = this.$search.val().length + 1;
                width = minimumWidth * 0.75 + "em";
              }
              this.$search.css("width", width);
            };
            return Search;
          });
          S22.define("select2/selection/eventRelay", [
            "jquery"
          ], function($2) {
            function EventRelay() {
            }
            EventRelay.prototype.bind = function(decorated, container, $container) {
              var self2 = this;
              var relayEvents = [
                "open",
                "opening",
                "close",
                "closing",
                "select",
                "selecting",
                "unselect",
                "unselecting",
                "clear",
                "clearing"
              ];
              var preventableEvents = [
                "opening",
                "closing",
                "selecting",
                "unselecting",
                "clearing"
              ];
              decorated.call(this, container, $container);
              container.on("*", function(name, params) {
                if ($2.inArray(name, relayEvents) === -1) {
                  return;
                }
                params = params || {};
                var evt = $2.Event("select2:" + name, {
                  params
                });
                self2.$element.trigger(evt);
                if ($2.inArray(name, preventableEvents) === -1) {
                  return;
                }
                params.prevented = evt.isDefaultPrevented();
              });
            };
            return EventRelay;
          });
          S22.define("select2/translation", [
            "jquery",
            "require"
          ], function($2, require2) {
            function Translation(dict) {
              this.dict = dict || {};
            }
            Translation.prototype.all = function() {
              return this.dict;
            };
            Translation.prototype.get = function(key) {
              return this.dict[key];
            };
            Translation.prototype.extend = function(translation) {
              this.dict = $2.extend({}, translation.all(), this.dict);
            };
            Translation._cache = {};
            Translation.loadPath = function(path) {
              if (!(path in Translation._cache)) {
                var translations = require2(path);
                Translation._cache[path] = translations;
              }
              return new Translation(Translation._cache[path]);
            };
            return Translation;
          });
          S22.define("select2/diacritics", [], function() {
            var diacritics = {
              "\u24B6": "A",
              "\uFF21": "A",
              "\xC0": "A",
              "\xC1": "A",
              "\xC2": "A",
              "\u1EA6": "A",
              "\u1EA4": "A",
              "\u1EAA": "A",
              "\u1EA8": "A",
              "\xC3": "A",
              "\u0100": "A",
              "\u0102": "A",
              "\u1EB0": "A",
              "\u1EAE": "A",
              "\u1EB4": "A",
              "\u1EB2": "A",
              "\u0226": "A",
              "\u01E0": "A",
              "\xC4": "A",
              "\u01DE": "A",
              "\u1EA2": "A",
              "\xC5": "A",
              "\u01FA": "A",
              "\u01CD": "A",
              "\u0200": "A",
              "\u0202": "A",
              "\u1EA0": "A",
              "\u1EAC": "A",
              "\u1EB6": "A",
              "\u1E00": "A",
              "\u0104": "A",
              "\u023A": "A",
              "\u2C6F": "A",
              "\uA732": "AA",
              "\xC6": "AE",
              "\u01FC": "AE",
              "\u01E2": "AE",
              "\uA734": "AO",
              "\uA736": "AU",
              "\uA738": "AV",
              "\uA73A": "AV",
              "\uA73C": "AY",
              "\u24B7": "B",
              "\uFF22": "B",
              "\u1E02": "B",
              "\u1E04": "B",
              "\u1E06": "B",
              "\u0243": "B",
              "\u0182": "B",
              "\u0181": "B",
              "\u24B8": "C",
              "\uFF23": "C",
              "\u0106": "C",
              "\u0108": "C",
              "\u010A": "C",
              "\u010C": "C",
              "\xC7": "C",
              "\u1E08": "C",
              "\u0187": "C",
              "\u023B": "C",
              "\uA73E": "C",
              "\u24B9": "D",
              "\uFF24": "D",
              "\u1E0A": "D",
              "\u010E": "D",
              "\u1E0C": "D",
              "\u1E10": "D",
              "\u1E12": "D",
              "\u1E0E": "D",
              "\u0110": "D",
              "\u018B": "D",
              "\u018A": "D",
              "\u0189": "D",
              "\uA779": "D",
              "\u01F1": "DZ",
              "\u01C4": "DZ",
              "\u01F2": "Dz",
              "\u01C5": "Dz",
              "\u24BA": "E",
              "\uFF25": "E",
              "\xC8": "E",
              "\xC9": "E",
              "\xCA": "E",
              "\u1EC0": "E",
              "\u1EBE": "E",
              "\u1EC4": "E",
              "\u1EC2": "E",
              "\u1EBC": "E",
              "\u0112": "E",
              "\u1E14": "E",
              "\u1E16": "E",
              "\u0114": "E",
              "\u0116": "E",
              "\xCB": "E",
              "\u1EBA": "E",
              "\u011A": "E",
              "\u0204": "E",
              "\u0206": "E",
              "\u1EB8": "E",
              "\u1EC6": "E",
              "\u0228": "E",
              "\u1E1C": "E",
              "\u0118": "E",
              "\u1E18": "E",
              "\u1E1A": "E",
              "\u0190": "E",
              "\u018E": "E",
              "\u24BB": "F",
              "\uFF26": "F",
              "\u1E1E": "F",
              "\u0191": "F",
              "\uA77B": "F",
              "\u24BC": "G",
              "\uFF27": "G",
              "\u01F4": "G",
              "\u011C": "G",
              "\u1E20": "G",
              "\u011E": "G",
              "\u0120": "G",
              "\u01E6": "G",
              "\u0122": "G",
              "\u01E4": "G",
              "\u0193": "G",
              "\uA7A0": "G",
              "\uA77D": "G",
              "\uA77E": "G",
              "\u24BD": "H",
              "\uFF28": "H",
              "\u0124": "H",
              "\u1E22": "H",
              "\u1E26": "H",
              "\u021E": "H",
              "\u1E24": "H",
              "\u1E28": "H",
              "\u1E2A": "H",
              "\u0126": "H",
              "\u2C67": "H",
              "\u2C75": "H",
              "\uA78D": "H",
              "\u24BE": "I",
              "\uFF29": "I",
              "\xCC": "I",
              "\xCD": "I",
              "\xCE": "I",
              "\u0128": "I",
              "\u012A": "I",
              "\u012C": "I",
              "\u0130": "I",
              "\xCF": "I",
              "\u1E2E": "I",
              "\u1EC8": "I",
              "\u01CF": "I",
              "\u0208": "I",
              "\u020A": "I",
              "\u1ECA": "I",
              "\u012E": "I",
              "\u1E2C": "I",
              "\u0197": "I",
              "\u24BF": "J",
              "\uFF2A": "J",
              "\u0134": "J",
              "\u0248": "J",
              "\u24C0": "K",
              "\uFF2B": "K",
              "\u1E30": "K",
              "\u01E8": "K",
              "\u1E32": "K",
              "\u0136": "K",
              "\u1E34": "K",
              "\u0198": "K",
              "\u2C69": "K",
              "\uA740": "K",
              "\uA742": "K",
              "\uA744": "K",
              "\uA7A2": "K",
              "\u24C1": "L",
              "\uFF2C": "L",
              "\u013F": "L",
              "\u0139": "L",
              "\u013D": "L",
              "\u1E36": "L",
              "\u1E38": "L",
              "\u013B": "L",
              "\u1E3C": "L",
              "\u1E3A": "L",
              "\u0141": "L",
              "\u023D": "L",
              "\u2C62": "L",
              "\u2C60": "L",
              "\uA748": "L",
              "\uA746": "L",
              "\uA780": "L",
              "\u01C7": "LJ",
              "\u01C8": "Lj",
              "\u24C2": "M",
              "\uFF2D": "M",
              "\u1E3E": "M",
              "\u1E40": "M",
              "\u1E42": "M",
              "\u2C6E": "M",
              "\u019C": "M",
              "\u24C3": "N",
              "\uFF2E": "N",
              "\u01F8": "N",
              "\u0143": "N",
              "\xD1": "N",
              "\u1E44": "N",
              "\u0147": "N",
              "\u1E46": "N",
              "\u0145": "N",
              "\u1E4A": "N",
              "\u1E48": "N",
              "\u0220": "N",
              "\u019D": "N",
              "\uA790": "N",
              "\uA7A4": "N",
              "\u01CA": "NJ",
              "\u01CB": "Nj",
              "\u24C4": "O",
              "\uFF2F": "O",
              "\xD2": "O",
              "\xD3": "O",
              "\xD4": "O",
              "\u1ED2": "O",
              "\u1ED0": "O",
              "\u1ED6": "O",
              "\u1ED4": "O",
              "\xD5": "O",
              "\u1E4C": "O",
              "\u022C": "O",
              "\u1E4E": "O",
              "\u014C": "O",
              "\u1E50": "O",
              "\u1E52": "O",
              "\u014E": "O",
              "\u022E": "O",
              "\u0230": "O",
              "\xD6": "O",
              "\u022A": "O",
              "\u1ECE": "O",
              "\u0150": "O",
              "\u01D1": "O",
              "\u020C": "O",
              "\u020E": "O",
              "\u01A0": "O",
              "\u1EDC": "O",
              "\u1EDA": "O",
              "\u1EE0": "O",
              "\u1EDE": "O",
              "\u1EE2": "O",
              "\u1ECC": "O",
              "\u1ED8": "O",
              "\u01EA": "O",
              "\u01EC": "O",
              "\xD8": "O",
              "\u01FE": "O",
              "\u0186": "O",
              "\u019F": "O",
              "\uA74A": "O",
              "\uA74C": "O",
              "\u0152": "OE",
              "\u01A2": "OI",
              "\uA74E": "OO",
              "\u0222": "OU",
              "\u24C5": "P",
              "\uFF30": "P",
              "\u1E54": "P",
              "\u1E56": "P",
              "\u01A4": "P",
              "\u2C63": "P",
              "\uA750": "P",
              "\uA752": "P",
              "\uA754": "P",
              "\u24C6": "Q",
              "\uFF31": "Q",
              "\uA756": "Q",
              "\uA758": "Q",
              "\u024A": "Q",
              "\u24C7": "R",
              "\uFF32": "R",
              "\u0154": "R",
              "\u1E58": "R",
              "\u0158": "R",
              "\u0210": "R",
              "\u0212": "R",
              "\u1E5A": "R",
              "\u1E5C": "R",
              "\u0156": "R",
              "\u1E5E": "R",
              "\u024C": "R",
              "\u2C64": "R",
              "\uA75A": "R",
              "\uA7A6": "R",
              "\uA782": "R",
              "\u24C8": "S",
              "\uFF33": "S",
              "\u1E9E": "S",
              "\u015A": "S",
              "\u1E64": "S",
              "\u015C": "S",
              "\u1E60": "S",
              "\u0160": "S",
              "\u1E66": "S",
              "\u1E62": "S",
              "\u1E68": "S",
              "\u0218": "S",
              "\u015E": "S",
              "\u2C7E": "S",
              "\uA7A8": "S",
              "\uA784": "S",
              "\u24C9": "T",
              "\uFF34": "T",
              "\u1E6A": "T",
              "\u0164": "T",
              "\u1E6C": "T",
              "\u021A": "T",
              "\u0162": "T",
              "\u1E70": "T",
              "\u1E6E": "T",
              "\u0166": "T",
              "\u01AC": "T",
              "\u01AE": "T",
              "\u023E": "T",
              "\uA786": "T",
              "\uA728": "TZ",
              "\u24CA": "U",
              "\uFF35": "U",
              "\xD9": "U",
              "\xDA": "U",
              "\xDB": "U",
              "\u0168": "U",
              "\u1E78": "U",
              "\u016A": "U",
              "\u1E7A": "U",
              "\u016C": "U",
              "\xDC": "U",
              "\u01DB": "U",
              "\u01D7": "U",
              "\u01D5": "U",
              "\u01D9": "U",
              "\u1EE6": "U",
              "\u016E": "U",
              "\u0170": "U",
              "\u01D3": "U",
              "\u0214": "U",
              "\u0216": "U",
              "\u01AF": "U",
              "\u1EEA": "U",
              "\u1EE8": "U",
              "\u1EEE": "U",
              "\u1EEC": "U",
              "\u1EF0": "U",
              "\u1EE4": "U",
              "\u1E72": "U",
              "\u0172": "U",
              "\u1E76": "U",
              "\u1E74": "U",
              "\u0244": "U",
              "\u24CB": "V",
              "\uFF36": "V",
              "\u1E7C": "V",
              "\u1E7E": "V",
              "\u01B2": "V",
              "\uA75E": "V",
              "\u0245": "V",
              "\uA760": "VY",
              "\u24CC": "W",
              "\uFF37": "W",
              "\u1E80": "W",
              "\u1E82": "W",
              "\u0174": "W",
              "\u1E86": "W",
              "\u1E84": "W",
              "\u1E88": "W",
              "\u2C72": "W",
              "\u24CD": "X",
              "\uFF38": "X",
              "\u1E8A": "X",
              "\u1E8C": "X",
              "\u24CE": "Y",
              "\uFF39": "Y",
              "\u1EF2": "Y",
              "\xDD": "Y",
              "\u0176": "Y",
              "\u1EF8": "Y",
              "\u0232": "Y",
              "\u1E8E": "Y",
              "\u0178": "Y",
              "\u1EF6": "Y",
              "\u1EF4": "Y",
              "\u01B3": "Y",
              "\u024E": "Y",
              "\u1EFE": "Y",
              "\u24CF": "Z",
              "\uFF3A": "Z",
              "\u0179": "Z",
              "\u1E90": "Z",
              "\u017B": "Z",
              "\u017D": "Z",
              "\u1E92": "Z",
              "\u1E94": "Z",
              "\u01B5": "Z",
              "\u0224": "Z",
              "\u2C7F": "Z",
              "\u2C6B": "Z",
              "\uA762": "Z",
              "\u24D0": "a",
              "\uFF41": "a",
              "\u1E9A": "a",
              "\xE0": "a",
              "\xE1": "a",
              "\xE2": "a",
              "\u1EA7": "a",
              "\u1EA5": "a",
              "\u1EAB": "a",
              "\u1EA9": "a",
              "\xE3": "a",
              "\u0101": "a",
              "\u0103": "a",
              "\u1EB1": "a",
              "\u1EAF": "a",
              "\u1EB5": "a",
              "\u1EB3": "a",
              "\u0227": "a",
              "\u01E1": "a",
              "\xE4": "a",
              "\u01DF": "a",
              "\u1EA3": "a",
              "\xE5": "a",
              "\u01FB": "a",
              "\u01CE": "a",
              "\u0201": "a",
              "\u0203": "a",
              "\u1EA1": "a",
              "\u1EAD": "a",
              "\u1EB7": "a",
              "\u1E01": "a",
              "\u0105": "a",
              "\u2C65": "a",
              "\u0250": "a",
              "\uA733": "aa",
              "\xE6": "ae",
              "\u01FD": "ae",
              "\u01E3": "ae",
              "\uA735": "ao",
              "\uA737": "au",
              "\uA739": "av",
              "\uA73B": "av",
              "\uA73D": "ay",
              "\u24D1": "b",
              "\uFF42": "b",
              "\u1E03": "b",
              "\u1E05": "b",
              "\u1E07": "b",
              "\u0180": "b",
              "\u0183": "b",
              "\u0253": "b",
              "\u24D2": "c",
              "\uFF43": "c",
              "\u0107": "c",
              "\u0109": "c",
              "\u010B": "c",
              "\u010D": "c",
              "\xE7": "c",
              "\u1E09": "c",
              "\u0188": "c",
              "\u023C": "c",
              "\uA73F": "c",
              "\u2184": "c",
              "\u24D3": "d",
              "\uFF44": "d",
              "\u1E0B": "d",
              "\u010F": "d",
              "\u1E0D": "d",
              "\u1E11": "d",
              "\u1E13": "d",
              "\u1E0F": "d",
              "\u0111": "d",
              "\u018C": "d",
              "\u0256": "d",
              "\u0257": "d",
              "\uA77A": "d",
              "\u01F3": "dz",
              "\u01C6": "dz",
              "\u24D4": "e",
              "\uFF45": "e",
              "\xE8": "e",
              "\xE9": "e",
              "\xEA": "e",
              "\u1EC1": "e",
              "\u1EBF": "e",
              "\u1EC5": "e",
              "\u1EC3": "e",
              "\u1EBD": "e",
              "\u0113": "e",
              "\u1E15": "e",
              "\u1E17": "e",
              "\u0115": "e",
              "\u0117": "e",
              "\xEB": "e",
              "\u1EBB": "e",
              "\u011B": "e",
              "\u0205": "e",
              "\u0207": "e",
              "\u1EB9": "e",
              "\u1EC7": "e",
              "\u0229": "e",
              "\u1E1D": "e",
              "\u0119": "e",
              "\u1E19": "e",
              "\u1E1B": "e",
              "\u0247": "e",
              "\u025B": "e",
              "\u01DD": "e",
              "\u24D5": "f",
              "\uFF46": "f",
              "\u1E1F": "f",
              "\u0192": "f",
              "\uA77C": "f",
              "\u24D6": "g",
              "\uFF47": "g",
              "\u01F5": "g",
              "\u011D": "g",
              "\u1E21": "g",
              "\u011F": "g",
              "\u0121": "g",
              "\u01E7": "g",
              "\u0123": "g",
              "\u01E5": "g",
              "\u0260": "g",
              "\uA7A1": "g",
              "\u1D79": "g",
              "\uA77F": "g",
              "\u24D7": "h",
              "\uFF48": "h",
              "\u0125": "h",
              "\u1E23": "h",
              "\u1E27": "h",
              "\u021F": "h",
              "\u1E25": "h",
              "\u1E29": "h",
              "\u1E2B": "h",
              "\u1E96": "h",
              "\u0127": "h",
              "\u2C68": "h",
              "\u2C76": "h",
              "\u0265": "h",
              "\u0195": "hv",
              "\u24D8": "i",
              "\uFF49": "i",
              "\xEC": "i",
              "\xED": "i",
              "\xEE": "i",
              "\u0129": "i",
              "\u012B": "i",
              "\u012D": "i",
              "\xEF": "i",
              "\u1E2F": "i",
              "\u1EC9": "i",
              "\u01D0": "i",
              "\u0209": "i",
              "\u020B": "i",
              "\u1ECB": "i",
              "\u012F": "i",
              "\u1E2D": "i",
              "\u0268": "i",
              "\u0131": "i",
              "\u24D9": "j",
              "\uFF4A": "j",
              "\u0135": "j",
              "\u01F0": "j",
              "\u0249": "j",
              "\u24DA": "k",
              "\uFF4B": "k",
              "\u1E31": "k",
              "\u01E9": "k",
              "\u1E33": "k",
              "\u0137": "k",
              "\u1E35": "k",
              "\u0199": "k",
              "\u2C6A": "k",
              "\uA741": "k",
              "\uA743": "k",
              "\uA745": "k",
              "\uA7A3": "k",
              "\u24DB": "l",
              "\uFF4C": "l",
              "\u0140": "l",
              "\u013A": "l",
              "\u013E": "l",
              "\u1E37": "l",
              "\u1E39": "l",
              "\u013C": "l",
              "\u1E3D": "l",
              "\u1E3B": "l",
              "\u017F": "l",
              "\u0142": "l",
              "\u019A": "l",
              "\u026B": "l",
              "\u2C61": "l",
              "\uA749": "l",
              "\uA781": "l",
              "\uA747": "l",
              "\u01C9": "lj",
              "\u24DC": "m",
              "\uFF4D": "m",
              "\u1E3F": "m",
              "\u1E41": "m",
              "\u1E43": "m",
              "\u0271": "m",
              "\u026F": "m",
              "\u24DD": "n",
              "\uFF4E": "n",
              "\u01F9": "n",
              "\u0144": "n",
              "\xF1": "n",
              "\u1E45": "n",
              "\u0148": "n",
              "\u1E47": "n",
              "\u0146": "n",
              "\u1E4B": "n",
              "\u1E49": "n",
              "\u019E": "n",
              "\u0272": "n",
              "\u0149": "n",
              "\uA791": "n",
              "\uA7A5": "n",
              "\u01CC": "nj",
              "\u24DE": "o",
              "\uFF4F": "o",
              "\xF2": "o",
              "\xF3": "o",
              "\xF4": "o",
              "\u1ED3": "o",
              "\u1ED1": "o",
              "\u1ED7": "o",
              "\u1ED5": "o",
              "\xF5": "o",
              "\u1E4D": "o",
              "\u022D": "o",
              "\u1E4F": "o",
              "\u014D": "o",
              "\u1E51": "o",
              "\u1E53": "o",
              "\u014F": "o",
              "\u022F": "o",
              "\u0231": "o",
              "\xF6": "o",
              "\u022B": "o",
              "\u1ECF": "o",
              "\u0151": "o",
              "\u01D2": "o",
              "\u020D": "o",
              "\u020F": "o",
              "\u01A1": "o",
              "\u1EDD": "o",
              "\u1EDB": "o",
              "\u1EE1": "o",
              "\u1EDF": "o",
              "\u1EE3": "o",
              "\u1ECD": "o",
              "\u1ED9": "o",
              "\u01EB": "o",
              "\u01ED": "o",
              "\xF8": "o",
              "\u01FF": "o",
              "\u0254": "o",
              "\uA74B": "o",
              "\uA74D": "o",
              "\u0275": "o",
              "\u0153": "oe",
              "\u01A3": "oi",
              "\u0223": "ou",
              "\uA74F": "oo",
              "\u24DF": "p",
              "\uFF50": "p",
              "\u1E55": "p",
              "\u1E57": "p",
              "\u01A5": "p",
              "\u1D7D": "p",
              "\uA751": "p",
              "\uA753": "p",
              "\uA755": "p",
              "\u24E0": "q",
              "\uFF51": "q",
              "\u024B": "q",
              "\uA757": "q",
              "\uA759": "q",
              "\u24E1": "r",
              "\uFF52": "r",
              "\u0155": "r",
              "\u1E59": "r",
              "\u0159": "r",
              "\u0211": "r",
              "\u0213": "r",
              "\u1E5B": "r",
              "\u1E5D": "r",
              "\u0157": "r",
              "\u1E5F": "r",
              "\u024D": "r",
              "\u027D": "r",
              "\uA75B": "r",
              "\uA7A7": "r",
              "\uA783": "r",
              "\u24E2": "s",
              "\uFF53": "s",
              "\xDF": "s",
              "\u015B": "s",
              "\u1E65": "s",
              "\u015D": "s",
              "\u1E61": "s",
              "\u0161": "s",
              "\u1E67": "s",
              "\u1E63": "s",
              "\u1E69": "s",
              "\u0219": "s",
              "\u015F": "s",
              "\u023F": "s",
              "\uA7A9": "s",
              "\uA785": "s",
              "\u1E9B": "s",
              "\u24E3": "t",
              "\uFF54": "t",
              "\u1E6B": "t",
              "\u1E97": "t",
              "\u0165": "t",
              "\u1E6D": "t",
              "\u021B": "t",
              "\u0163": "t",
              "\u1E71": "t",
              "\u1E6F": "t",
              "\u0167": "t",
              "\u01AD": "t",
              "\u0288": "t",
              "\u2C66": "t",
              "\uA787": "t",
              "\uA729": "tz",
              "\u24E4": "u",
              "\uFF55": "u",
              "\xF9": "u",
              "\xFA": "u",
              "\xFB": "u",
              "\u0169": "u",
              "\u1E79": "u",
              "\u016B": "u",
              "\u1E7B": "u",
              "\u016D": "u",
              "\xFC": "u",
              "\u01DC": "u",
              "\u01D8": "u",
              "\u01D6": "u",
              "\u01DA": "u",
              "\u1EE7": "u",
              "\u016F": "u",
              "\u0171": "u",
              "\u01D4": "u",
              "\u0215": "u",
              "\u0217": "u",
              "\u01B0": "u",
              "\u1EEB": "u",
              "\u1EE9": "u",
              "\u1EEF": "u",
              "\u1EED": "u",
              "\u1EF1": "u",
              "\u1EE5": "u",
              "\u1E73": "u",
              "\u0173": "u",
              "\u1E77": "u",
              "\u1E75": "u",
              "\u0289": "u",
              "\u24E5": "v",
              "\uFF56": "v",
              "\u1E7D": "v",
              "\u1E7F": "v",
              "\u028B": "v",
              "\uA75F": "v",
              "\u028C": "v",
              "\uA761": "vy",
              "\u24E6": "w",
              "\uFF57": "w",
              "\u1E81": "w",
              "\u1E83": "w",
              "\u0175": "w",
              "\u1E87": "w",
              "\u1E85": "w",
              "\u1E98": "w",
              "\u1E89": "w",
              "\u2C73": "w",
              "\u24E7": "x",
              "\uFF58": "x",
              "\u1E8B": "x",
              "\u1E8D": "x",
              "\u24E8": "y",
              "\uFF59": "y",
              "\u1EF3": "y",
              "\xFD": "y",
              "\u0177": "y",
              "\u1EF9": "y",
              "\u0233": "y",
              "\u1E8F": "y",
              "\xFF": "y",
              "\u1EF7": "y",
              "\u1E99": "y",
              "\u1EF5": "y",
              "\u01B4": "y",
              "\u024F": "y",
              "\u1EFF": "y",
              "\u24E9": "z",
              "\uFF5A": "z",
              "\u017A": "z",
              "\u1E91": "z",
              "\u017C": "z",
              "\u017E": "z",
              "\u1E93": "z",
              "\u1E95": "z",
              "\u01B6": "z",
              "\u0225": "z",
              "\u0240": "z",
              "\u2C6C": "z",
              "\uA763": "z",
              "\u0386": "\u0391",
              "\u0388": "\u0395",
              "\u0389": "\u0397",
              "\u038A": "\u0399",
              "\u03AA": "\u0399",
              "\u038C": "\u039F",
              "\u038E": "\u03A5",
              "\u03AB": "\u03A5",
              "\u038F": "\u03A9",
              "\u03AC": "\u03B1",
              "\u03AD": "\u03B5",
              "\u03AE": "\u03B7",
              "\u03AF": "\u03B9",
              "\u03CA": "\u03B9",
              "\u0390": "\u03B9",
              "\u03CC": "\u03BF",
              "\u03CD": "\u03C5",
              "\u03CB": "\u03C5",
              "\u03B0": "\u03C5",
              "\u03CE": "\u03C9",
              "\u03C2": "\u03C3",
              "\u2019": "'"
            };
            return diacritics;
          });
          S22.define("select2/data/base", [
            "../utils"
          ], function(Utils) {
            function BaseAdapter($element, options) {
              BaseAdapter.__super__.constructor.call(this);
            }
            Utils.Extend(BaseAdapter, Utils.Observable);
            BaseAdapter.prototype.current = function(callback) {
              throw new Error("The `current` method must be defined in child classes.");
            };
            BaseAdapter.prototype.query = function(params, callback) {
              throw new Error("The `query` method must be defined in child classes.");
            };
            BaseAdapter.prototype.bind = function(container, $container) {
            };
            BaseAdapter.prototype.destroy = function() {
            };
            BaseAdapter.prototype.generateResultId = function(container, data) {
              var id = container.id + "-result-";
              id += Utils.generateChars(4);
              if (data.id != null) {
                id += "-" + data.id.toString();
              } else {
                id += "-" + Utils.generateChars(4);
              }
              return id;
            };
            return BaseAdapter;
          });
          S22.define("select2/data/select", [
            "./base",
            "../utils",
            "jquery"
          ], function(BaseAdapter, Utils, $2) {
            function SelectAdapter($element, options) {
              this.$element = $element;
              this.options = options;
              SelectAdapter.__super__.constructor.call(this);
            }
            Utils.Extend(SelectAdapter, BaseAdapter);
            SelectAdapter.prototype.current = function(callback) {
              var data = [];
              var self2 = this;
              this.$element.find(":selected").each(function() {
                var $option = $2(this);
                var option = self2.item($option);
                data.push(option);
              });
              callback(data);
            };
            SelectAdapter.prototype.select = function(data) {
              var self2 = this;
              data.selected = true;
              if ($2(data.element).is("option")) {
                data.element.selected = true;
                this.$element.trigger("input").trigger("change");
                return;
              }
              if (this.$element.prop("multiple")) {
                this.current(function(currentData) {
                  var val2 = [];
                  data = [data];
                  data.push.apply(data, currentData);
                  for (var d = 0; d < data.length; d++) {
                    var id = data[d].id;
                    if ($2.inArray(id, val2) === -1) {
                      val2.push(id);
                    }
                  }
                  self2.$element.val(val2);
                  self2.$element.trigger("input").trigger("change");
                });
              } else {
                var val = data.id;
                this.$element.val(val);
                this.$element.trigger("input").trigger("change");
              }
            };
            SelectAdapter.prototype.unselect = function(data) {
              var self2 = this;
              if (!this.$element.prop("multiple")) {
                return;
              }
              data.selected = false;
              if ($2(data.element).is("option")) {
                data.element.selected = false;
                this.$element.trigger("input").trigger("change");
                return;
              }
              this.current(function(currentData) {
                var val = [];
                for (var d = 0; d < currentData.length; d++) {
                  var id = currentData[d].id;
                  if (id !== data.id && $2.inArray(id, val) === -1) {
                    val.push(id);
                  }
                }
                self2.$element.val(val);
                self2.$element.trigger("input").trigger("change");
              });
            };
            SelectAdapter.prototype.bind = function(container, $container) {
              var self2 = this;
              this.container = container;
              container.on("select", function(params) {
                self2.select(params.data);
              });
              container.on("unselect", function(params) {
                self2.unselect(params.data);
              });
            };
            SelectAdapter.prototype.destroy = function() {
              this.$element.find("*").each(function() {
                Utils.RemoveData(this);
              });
            };
            SelectAdapter.prototype.query = function(params, callback) {
              var data = [];
              var self2 = this;
              var $options = this.$element.children();
              $options.each(function() {
                var $option = $2(this);
                if (!$option.is("option") && !$option.is("optgroup")) {
                  return;
                }
                var option = self2.item($option);
                var matches = self2.matches(params, option);
                if (matches !== null) {
                  data.push(matches);
                }
              });
              callback({
                results: data
              });
            };
            SelectAdapter.prototype.addOptions = function($options) {
              Utils.appendMany(this.$element, $options);
            };
            SelectAdapter.prototype.option = function(data) {
              var option;
              if (data.children) {
                option = document.createElement("optgroup");
                option.label = data.text;
              } else {
                option = document.createElement("option");
                if (option.textContent !== void 0) {
                  option.textContent = data.text;
                } else {
                  option.innerText = data.text;
                }
              }
              if (data.id !== void 0) {
                option.value = data.id;
              }
              if (data.disabled) {
                option.disabled = true;
              }
              if (data.selected) {
                option.selected = true;
              }
              if (data.title) {
                option.title = data.title;
              }
              var $option = $2(option);
              var normalizedData = this._normalizeItem(data);
              normalizedData.element = option;
              Utils.StoreData(option, "data", normalizedData);
              return $option;
            };
            SelectAdapter.prototype.item = function($option) {
              var data = {};
              data = Utils.GetData($option[0], "data");
              if (data != null) {
                return data;
              }
              if ($option.is("option")) {
                data = {
                  id: $option.val(),
                  text: $option.text(),
                  disabled: $option.prop("disabled"),
                  selected: $option.prop("selected"),
                  title: $option.prop("title")
                };
              } else if ($option.is("optgroup")) {
                data = {
                  text: $option.prop("label"),
                  children: [],
                  title: $option.prop("title")
                };
                var $children = $option.children("option");
                var children = [];
                for (var c = 0; c < $children.length; c++) {
                  var $child = $2($children[c]);
                  var child = this.item($child);
                  children.push(child);
                }
                data.children = children;
              }
              data = this._normalizeItem(data);
              data.element = $option[0];
              Utils.StoreData($option[0], "data", data);
              return data;
            };
            SelectAdapter.prototype._normalizeItem = function(item) {
              if (item !== Object(item)) {
                item = {
                  id: item,
                  text: item
                };
              }
              item = $2.extend({}, {
                text: ""
              }, item);
              var defaults = {
                selected: false,
                disabled: false
              };
              if (item.id != null) {
                item.id = item.id.toString();
              }
              if (item.text != null) {
                item.text = item.text.toString();
              }
              if (item._resultId == null && item.id && this.container != null) {
                item._resultId = this.generateResultId(this.container, item);
              }
              return $2.extend({}, defaults, item);
            };
            SelectAdapter.prototype.matches = function(params, data) {
              var matcher = this.options.get("matcher");
              return matcher(params, data);
            };
            return SelectAdapter;
          });
          S22.define("select2/data/array", [
            "./select",
            "../utils",
            "jquery"
          ], function(SelectAdapter, Utils, $2) {
            function ArrayAdapter($element, options) {
              this._dataToConvert = options.get("data") || [];
              ArrayAdapter.__super__.constructor.call(this, $element, options);
            }
            Utils.Extend(ArrayAdapter, SelectAdapter);
            ArrayAdapter.prototype.bind = function(container, $container) {
              ArrayAdapter.__super__.bind.call(this, container, $container);
              this.addOptions(this.convertToOptions(this._dataToConvert));
            };
            ArrayAdapter.prototype.select = function(data) {
              var $option = this.$element.find("option").filter(function(i, elm) {
                return elm.value == data.id.toString();
              });
              if ($option.length === 0) {
                $option = this.option(data);
                this.addOptions($option);
              }
              ArrayAdapter.__super__.select.call(this, data);
            };
            ArrayAdapter.prototype.convertToOptions = function(data) {
              var self2 = this;
              var $existing = this.$element.find("option");
              var existingIds = $existing.map(function() {
                return self2.item($2(this)).id;
              }).get();
              var $options = [];
              function onlyItem(item2) {
                return function() {
                  return $2(this).val() == item2.id;
                };
              }
              for (var d = 0; d < data.length; d++) {
                var item = this._normalizeItem(data[d]);
                if ($2.inArray(item.id, existingIds) >= 0) {
                  var $existingOption = $existing.filter(onlyItem(item));
                  var existingData = this.item($existingOption);
                  var newData = $2.extend(true, {}, item, existingData);
                  var $newOption = this.option(newData);
                  $existingOption.replaceWith($newOption);
                  continue;
                }
                var $option = this.option(item);
                if (item.children) {
                  var $children = this.convertToOptions(item.children);
                  Utils.appendMany($option, $children);
                }
                $options.push($option);
              }
              return $options;
            };
            return ArrayAdapter;
          });
          S22.define("select2/data/ajax", [
            "./array",
            "../utils",
            "jquery"
          ], function(ArrayAdapter, Utils, $2) {
            function AjaxAdapter($element, options) {
              this.ajaxOptions = this._applyDefaults(options.get("ajax"));
              if (this.ajaxOptions.processResults != null) {
                this.processResults = this.ajaxOptions.processResults;
              }
              AjaxAdapter.__super__.constructor.call(this, $element, options);
            }
            Utils.Extend(AjaxAdapter, ArrayAdapter);
            AjaxAdapter.prototype._applyDefaults = function(options) {
              var defaults = {
                data: function(params) {
                  return $2.extend({}, params, {
                    q: params.term
                  });
                },
                transport: function(params, success, failure) {
                  var $request = $2.ajax(params);
                  $request.then(success);
                  $request.fail(failure);
                  return $request;
                }
              };
              return $2.extend({}, defaults, options, true);
            };
            AjaxAdapter.prototype.processResults = function(results) {
              return results;
            };
            AjaxAdapter.prototype.query = function(params, callback) {
              var matches = [];
              var self2 = this;
              if (this._request != null) {
                if ($2.isFunction(this._request.abort)) {
                  this._request.abort();
                }
                this._request = null;
              }
              var options = $2.extend({
                type: "GET"
              }, this.ajaxOptions);
              if (typeof options.url === "function") {
                options.url = options.url.call(this.$element, params);
              }
              if (typeof options.data === "function") {
                options.data = options.data.call(this.$element, params);
              }
              function request() {
                var $request = options.transport(options, function(data) {
                  var results = self2.processResults(data, params);
                  if (self2.options.get("debug") && window.console && console.error) {
                    if (!results || !results.results || !$2.isArray(results.results)) {
                      console.error(
                        "Select2: The AJAX results did not return an array in the `results` key of the response."
                      );
                    }
                  }
                  callback(results);
                }, function() {
                  if ("status" in $request && ($request.status === 0 || $request.status === "0")) {
                    return;
                  }
                  self2.trigger("results:message", {
                    message: "errorLoading"
                  });
                });
                self2._request = $request;
              }
              if (this.ajaxOptions.delay && params.term != null) {
                if (this._queryTimeout) {
                  window.clearTimeout(this._queryTimeout);
                }
                this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
              } else {
                request();
              }
            };
            return AjaxAdapter;
          });
          S22.define("select2/data/tags", [
            "jquery"
          ], function($2) {
            function Tags(decorated, $element, options) {
              var tags = options.get("tags");
              var createTag = options.get("createTag");
              if (createTag !== void 0) {
                this.createTag = createTag;
              }
              var insertTag = options.get("insertTag");
              if (insertTag !== void 0) {
                this.insertTag = insertTag;
              }
              decorated.call(this, $element, options);
              if ($2.isArray(tags)) {
                for (var t = 0; t < tags.length; t++) {
                  var tag = tags[t];
                  var item = this._normalizeItem(tag);
                  var $option = this.option(item);
                  this.$element.append($option);
                }
              }
            }
            Tags.prototype.query = function(decorated, params, callback) {
              var self2 = this;
              this._removeOldTags();
              if (params.term == null || params.page != null) {
                decorated.call(this, params, callback);
                return;
              }
              function wrapper(obj, child) {
                var data = obj.results;
                for (var i = 0; i < data.length; i++) {
                  var option = data[i];
                  var checkChildren = option.children != null && !wrapper({
                    results: option.children
                  }, true);
                  var optionText = (option.text || "").toUpperCase();
                  var paramsTerm = (params.term || "").toUpperCase();
                  var checkText = optionText === paramsTerm;
                  if (checkText || checkChildren) {
                    if (child) {
                      return false;
                    }
                    obj.data = data;
                    callback(obj);
                    return;
                  }
                }
                if (child) {
                  return true;
                }
                var tag = self2.createTag(params);
                if (tag != null) {
                  var $option = self2.option(tag);
                  $option.attr("data-select2-tag", true);
                  self2.addOptions([$option]);
                  self2.insertTag(data, tag);
                }
                obj.results = data;
                callback(obj);
              }
              decorated.call(this, params, wrapper);
            };
            Tags.prototype.createTag = function(decorated, params) {
              var term = $2.trim(params.term);
              if (term === "") {
                return null;
              }
              return {
                id: term,
                text: term
              };
            };
            Tags.prototype.insertTag = function(_, data, tag) {
              data.unshift(tag);
            };
            Tags.prototype._removeOldTags = function(_) {
              var $options = this.$element.find("option[data-select2-tag]");
              $options.each(function() {
                if (this.selected) {
                  return;
                }
                $2(this).remove();
              });
            };
            return Tags;
          });
          S22.define("select2/data/tokenizer", [
            "jquery"
          ], function($2) {
            function Tokenizer(decorated, $element, options) {
              var tokenizer = options.get("tokenizer");
              if (tokenizer !== void 0) {
                this.tokenizer = tokenizer;
              }
              decorated.call(this, $element, options);
            }
            Tokenizer.prototype.bind = function(decorated, container, $container) {
              decorated.call(this, container, $container);
              this.$search = container.dropdown.$search || container.selection.$search || $container.find(".select2-search__field");
            };
            Tokenizer.prototype.query = function(decorated, params, callback) {
              var self2 = this;
              function createAndSelect(data) {
                var item = self2._normalizeItem(data);
                var $existingOptions = self2.$element.find("option").filter(function() {
                  return $2(this).val() === item.id;
                });
                if (!$existingOptions.length) {
                  var $option = self2.option(item);
                  $option.attr("data-select2-tag", true);
                  self2._removeOldTags();
                  self2.addOptions([$option]);
                }
                select(item);
              }
              function select(data) {
                self2.trigger("select", {
                  data
                });
              }
              params.term = params.term || "";
              var tokenData = this.tokenizer(params, this.options, createAndSelect);
              if (tokenData.term !== params.term) {
                if (this.$search.length) {
                  this.$search.val(tokenData.term);
                  this.$search.trigger("focus");
                }
                params.term = tokenData.term;
              }
              decorated.call(this, params, callback);
            };
            Tokenizer.prototype.tokenizer = function(_, params, options, callback) {
              var separators = options.get("tokenSeparators") || [];
              var term = params.term;
              var i = 0;
              var createTag = this.createTag || function(params2) {
                return {
                  id: params2.term,
                  text: params2.term
                };
              };
              while (i < term.length) {
                var termChar = term[i];
                if ($2.inArray(termChar, separators) === -1) {
                  i++;
                  continue;
                }
                var part = term.substr(0, i);
                var partParams = $2.extend({}, params, {
                  term: part
                });
                var data = createTag(partParams);
                if (data == null) {
                  i++;
                  continue;
                }
                callback(data);
                term = term.substr(i + 1) || "";
                i = 0;
              }
              return {
                term
              };
            };
            return Tokenizer;
          });
          S22.define("select2/data/minimumInputLength", [], function() {
            function MinimumInputLength(decorated, $e, options) {
              this.minimumInputLength = options.get("minimumInputLength");
              decorated.call(this, $e, options);
            }
            MinimumInputLength.prototype.query = function(decorated, params, callback) {
              params.term = params.term || "";
              if (params.term.length < this.minimumInputLength) {
                this.trigger("results:message", {
                  message: "inputTooShort",
                  args: {
                    minimum: this.minimumInputLength,
                    input: params.term,
                    params
                  }
                });
                return;
              }
              decorated.call(this, params, callback);
            };
            return MinimumInputLength;
          });
          S22.define("select2/data/maximumInputLength", [], function() {
            function MaximumInputLength(decorated, $e, options) {
              this.maximumInputLength = options.get("maximumInputLength");
              decorated.call(this, $e, options);
            }
            MaximumInputLength.prototype.query = function(decorated, params, callback) {
              params.term = params.term || "";
              if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {
                this.trigger("results:message", {
                  message: "inputTooLong",
                  args: {
                    maximum: this.maximumInputLength,
                    input: params.term,
                    params
                  }
                });
                return;
              }
              decorated.call(this, params, callback);
            };
            return MaximumInputLength;
          });
          S22.define("select2/data/maximumSelectionLength", [], function() {
            function MaximumSelectionLength(decorated, $e, options) {
              this.maximumSelectionLength = options.get("maximumSelectionLength");
              decorated.call(this, $e, options);
            }
            MaximumSelectionLength.prototype.bind = function(decorated, container, $container) {
              var self2 = this;
              decorated.call(this, container, $container);
              container.on("select", function() {
                self2._checkIfMaximumSelected();
              });
            };
            MaximumSelectionLength.prototype.query = function(decorated, params, callback) {
              var self2 = this;
              this._checkIfMaximumSelected(function() {
                decorated.call(self2, params, callback);
              });
            };
            MaximumSelectionLength.prototype._checkIfMaximumSelected = function(_, successCallback) {
              var self2 = this;
              this.current(function(currentData) {
                var count = currentData != null ? currentData.length : 0;
                if (self2.maximumSelectionLength > 0 && count >= self2.maximumSelectionLength) {
                  self2.trigger("results:message", {
                    message: "maximumSelected",
                    args: {
                      maximum: self2.maximumSelectionLength
                    }
                  });
                  return;
                }
                if (successCallback) {
                  successCallback();
                }
              });
            };
            return MaximumSelectionLength;
          });
          S22.define("select2/dropdown", [
            "jquery",
            "./utils"
          ], function($2, Utils) {
            function Dropdown2($element, options) {
              this.$element = $element;
              this.options = options;
              Dropdown2.__super__.constructor.call(this);
            }
            Utils.Extend(Dropdown2, Utils.Observable);
            Dropdown2.prototype.render = function() {
              var $dropdown = $2(
                '<span class="select2-dropdown"><span class="select2-results"></span></span>'
              );
              $dropdown.attr("dir", this.options.get("dir"));
              this.$dropdown = $dropdown;
              return $dropdown;
            };
            Dropdown2.prototype.bind = function() {
            };
            Dropdown2.prototype.position = function($dropdown, $container) {
            };
            Dropdown2.prototype.destroy = function() {
              this.$dropdown.remove();
            };
            return Dropdown2;
          });
          S22.define("select2/dropdown/search", [
            "jquery",
            "../utils"
          ], function($2, Utils) {
            function Search() {
            }
            Search.prototype.render = function(decorated) {
              var $rendered = decorated.call(this);
              var $search = $2(
                '<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></span>'
              );
              this.$searchContainer = $search;
              this.$search = $search.find("input");
              $rendered.prepend($search);
              return $rendered;
            };
            Search.prototype.bind = function(decorated, container, $container) {
              var self2 = this;
              var resultsId = container.id + "-results";
              decorated.call(this, container, $container);
              this.$search.on("keydown", function(evt) {
                self2.trigger("keypress", evt);
                self2._keyUpPrevented = evt.isDefaultPrevented();
              });
              this.$search.on("input", function(evt) {
                $2(this).off("keyup");
              });
              this.$search.on("keyup input", function(evt) {
                self2.handleSearch(evt);
              });
              container.on("open", function() {
                self2.$search.attr("tabindex", 0);
                self2.$search.attr("aria-controls", resultsId);
                self2.$search.trigger("focus");
                window.setTimeout(function() {
                  self2.$search.trigger("focus");
                }, 0);
              });
              container.on("close", function() {
                self2.$search.attr("tabindex", -1);
                self2.$search.removeAttr("aria-controls");
                self2.$search.removeAttr("aria-activedescendant");
                self2.$search.val("");
                self2.$search.trigger("blur");
              });
              container.on("focus", function() {
                if (!container.isOpen()) {
                  self2.$search.trigger("focus");
                }
              });
              container.on("results:all", function(params) {
                if (params.query.term == null || params.query.term === "") {
                  var showSearch = self2.showSearch(params);
                  if (showSearch) {
                    self2.$searchContainer.removeClass("select2-search--hide");
                  } else {
                    self2.$searchContainer.addClass("select2-search--hide");
                  }
                }
              });
              container.on("results:focus", function(params) {
                if (params.data._resultId) {
                  self2.$search.attr("aria-activedescendant", params.data._resultId);
                } else {
                  self2.$search.removeAttr("aria-activedescendant");
                }
              });
            };
            Search.prototype.handleSearch = function(evt) {
              if (!this._keyUpPrevented) {
                var input = this.$search.val();
                this.trigger("query", {
                  term: input
                });
              }
              this._keyUpPrevented = false;
            };
            Search.prototype.showSearch = function(_, params) {
              return true;
            };
            return Search;
          });
          S22.define("select2/dropdown/hidePlaceholder", [], function() {
            function HidePlaceholder(decorated, $element, options, dataAdapter) {
              this.placeholder = this.normalizePlaceholder(options.get("placeholder"));
              decorated.call(this, $element, options, dataAdapter);
            }
            HidePlaceholder.prototype.append = function(decorated, data) {
              data.results = this.removePlaceholder(data.results);
              decorated.call(this, data);
            };
            HidePlaceholder.prototype.normalizePlaceholder = function(_, placeholder) {
              if (typeof placeholder === "string") {
                placeholder = {
                  id: "",
                  text: placeholder
                };
              }
              return placeholder;
            };
            HidePlaceholder.prototype.removePlaceholder = function(_, data) {
              var modifiedData = data.slice(0);
              for (var d = data.length - 1; d >= 0; d--) {
                var item = data[d];
                if (this.placeholder.id === item.id) {
                  modifiedData.splice(d, 1);
                }
              }
              return modifiedData;
            };
            return HidePlaceholder;
          });
          S22.define("select2/dropdown/infiniteScroll", [
            "jquery"
          ], function($2) {
            function InfiniteScroll(decorated, $element, options, dataAdapter) {
              this.lastParams = {};
              decorated.call(this, $element, options, dataAdapter);
              this.$loadingMore = this.createLoadingMore();
              this.loading = false;
            }
            InfiniteScroll.prototype.append = function(decorated, data) {
              this.$loadingMore.remove();
              this.loading = false;
              decorated.call(this, data);
              if (this.showLoadingMore(data)) {
                this.$results.append(this.$loadingMore);
                this.loadMoreIfNeeded();
              }
            };
            InfiniteScroll.prototype.bind = function(decorated, container, $container) {
              var self2 = this;
              decorated.call(this, container, $container);
              container.on("query", function(params) {
                self2.lastParams = params;
                self2.loading = true;
              });
              container.on("query:append", function(params) {
                self2.lastParams = params;
                self2.loading = true;
              });
              this.$results.on("scroll", this.loadMoreIfNeeded.bind(this));
            };
            InfiniteScroll.prototype.loadMoreIfNeeded = function() {
              var isLoadMoreVisible = $2.contains(
                document.documentElement,
                this.$loadingMore[0]
              );
              if (this.loading || !isLoadMoreVisible) {
                return;
              }
              var currentOffset = this.$results.offset().top + this.$results.outerHeight(false);
              var loadingMoreOffset = this.$loadingMore.offset().top + this.$loadingMore.outerHeight(false);
              if (currentOffset + 50 >= loadingMoreOffset) {
                this.loadMore();
              }
            };
            InfiniteScroll.prototype.loadMore = function() {
              this.loading = true;
              var params = $2.extend({}, { page: 1 }, this.lastParams);
              params.page++;
              this.trigger("query:append", params);
            };
            InfiniteScroll.prototype.showLoadingMore = function(_, data) {
              return data.pagination && data.pagination.more;
            };
            InfiniteScroll.prototype.createLoadingMore = function() {
              var $option = $2(
                '<li class="select2-results__option select2-results__option--load-more"role="option" aria-disabled="true"></li>'
              );
              var message = this.options.get("translations").get("loadingMore");
              $option.html(message(this.lastParams));
              return $option;
            };
            return InfiniteScroll;
          });
          S22.define("select2/dropdown/attachBody", [
            "jquery",
            "../utils"
          ], function($2, Utils) {
            function AttachBody(decorated, $element, options) {
              this.$dropdownParent = $2(options.get("dropdownParent") || document.body);
              decorated.call(this, $element, options);
            }
            AttachBody.prototype.bind = function(decorated, container, $container) {
              var self2 = this;
              decorated.call(this, container, $container);
              container.on("open", function() {
                self2._showDropdown();
                self2._attachPositioningHandler(container);
                self2._bindContainerResultHandlers(container);
              });
              container.on("close", function() {
                self2._hideDropdown();
                self2._detachPositioningHandler(container);
              });
              this.$dropdownContainer.on("mousedown", function(evt) {
                evt.stopPropagation();
              });
            };
            AttachBody.prototype.destroy = function(decorated) {
              decorated.call(this);
              this.$dropdownContainer.remove();
            };
            AttachBody.prototype.position = function(decorated, $dropdown, $container) {
              $dropdown.attr("class", $container.attr("class"));
              $dropdown.removeClass("select2");
              $dropdown.addClass("select2-container--open");
              $dropdown.css({
                position: "absolute",
                top: -999999
              });
              this.$container = $container;
            };
            AttachBody.prototype.render = function(decorated) {
              var $container = $2("<span></span>");
              var $dropdown = decorated.call(this);
              $container.append($dropdown);
              this.$dropdownContainer = $container;
              return $container;
            };
            AttachBody.prototype._hideDropdown = function(decorated) {
              this.$dropdownContainer.detach();
            };
            AttachBody.prototype._bindContainerResultHandlers = function(decorated, container) {
              if (this._containerResultsHandlersBound) {
                return;
              }
              var self2 = this;
              container.on("results:all", function() {
                self2._positionDropdown();
                self2._resizeDropdown();
              });
              container.on("results:append", function() {
                self2._positionDropdown();
                self2._resizeDropdown();
              });
              container.on("results:message", function() {
                self2._positionDropdown();
                self2._resizeDropdown();
              });
              container.on("select", function() {
                self2._positionDropdown();
                self2._resizeDropdown();
              });
              container.on("unselect", function() {
                self2._positionDropdown();
                self2._resizeDropdown();
              });
              this._containerResultsHandlersBound = true;
            };
            AttachBody.prototype._attachPositioningHandler = function(decorated, container) {
              var self2 = this;
              var scrollEvent = "scroll.select2." + container.id;
              var resizeEvent = "resize.select2." + container.id;
              var orientationEvent = "orientationchange.select2." + container.id;
              var $watchers = this.$container.parents().filter(Utils.hasScroll);
              $watchers.each(function() {
                Utils.StoreData(this, "select2-scroll-position", {
                  x: $2(this).scrollLeft(),
                  y: $2(this).scrollTop()
                });
              });
              $watchers.on(scrollEvent, function(ev) {
                var position = Utils.GetData(this, "select2-scroll-position");
                $2(this).scrollTop(position.y);
              });
              $2(window).on(
                scrollEvent + " " + resizeEvent + " " + orientationEvent,
                function(e) {
                  self2._positionDropdown();
                  self2._resizeDropdown();
                }
              );
            };
            AttachBody.prototype._detachPositioningHandler = function(decorated, container) {
              var scrollEvent = "scroll.select2." + container.id;
              var resizeEvent = "resize.select2." + container.id;
              var orientationEvent = "orientationchange.select2." + container.id;
              var $watchers = this.$container.parents().filter(Utils.hasScroll);
              $watchers.off(scrollEvent);
              $2(window).off(scrollEvent + " " + resizeEvent + " " + orientationEvent);
            };
            AttachBody.prototype._positionDropdown = function() {
              var $window = $2(window);
              var isCurrentlyAbove = this.$dropdown.hasClass("select2-dropdown--above");
              var isCurrentlyBelow = this.$dropdown.hasClass("select2-dropdown--below");
              var newDirection = null;
              var offset2 = this.$container.offset();
              offset2.bottom = offset2.top + this.$container.outerHeight(false);
              var container = {
                height: this.$container.outerHeight(false)
              };
              container.top = offset2.top;
              container.bottom = offset2.top + container.height;
              var dropdown = {
                height: this.$dropdown.outerHeight(false)
              };
              var viewport2 = {
                top: $window.scrollTop(),
                bottom: $window.scrollTop() + $window.height()
              };
              var enoughRoomAbove = viewport2.top < offset2.top - dropdown.height;
              var enoughRoomBelow = viewport2.bottom > offset2.bottom + dropdown.height;
              var css = {
                left: offset2.left,
                top: container.bottom
              };
              var $offsetParent = this.$dropdownParent;
              if ($offsetParent.css("position") === "static") {
                $offsetParent = $offsetParent.offsetParent();
              }
              var parentOffset = {
                top: 0,
                left: 0
              };
              if ($2.contains(document.body, $offsetParent[0]) || $offsetParent[0].isConnected) {
                parentOffset = $offsetParent.offset();
              }
              css.top -= parentOffset.top;
              css.left -= parentOffset.left;
              if (!isCurrentlyAbove && !isCurrentlyBelow) {
                newDirection = "below";
              }
              if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
                newDirection = "above";
              } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
                newDirection = "below";
              }
              if (newDirection == "above" || isCurrentlyAbove && newDirection !== "below") {
                css.top = container.top - parentOffset.top - dropdown.height;
              }
              if (newDirection != null) {
                this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--" + newDirection);
                this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--" + newDirection);
              }
              this.$dropdownContainer.css(css);
            };
            AttachBody.prototype._resizeDropdown = function() {
              var css = {
                width: this.$container.outerWidth(false) + "px"
              };
              if (this.options.get("dropdownAutoWidth")) {
                css.minWidth = css.width;
                css.position = "relative";
                css.width = "auto";
              }
              this.$dropdown.css(css);
            };
            AttachBody.prototype._showDropdown = function(decorated) {
              this.$dropdownContainer.appendTo(this.$dropdownParent);
              this._positionDropdown();
              this._resizeDropdown();
            };
            return AttachBody;
          });
          S22.define("select2/dropdown/minimumResultsForSearch", [], function() {
            function countResults(data) {
              var count = 0;
              for (var d = 0; d < data.length; d++) {
                var item = data[d];
                if (item.children) {
                  count += countResults(item.children);
                } else {
                  count++;
                }
              }
              return count;
            }
            function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
              this.minimumResultsForSearch = options.get("minimumResultsForSearch");
              if (this.minimumResultsForSearch < 0) {
                this.minimumResultsForSearch = Infinity;
              }
              decorated.call(this, $element, options, dataAdapter);
            }
            MinimumResultsForSearch.prototype.showSearch = function(decorated, params) {
              if (countResults(params.data.results) < this.minimumResultsForSearch) {
                return false;
              }
              return decorated.call(this, params);
            };
            return MinimumResultsForSearch;
          });
          S22.define("select2/dropdown/selectOnClose", [
            "../utils"
          ], function(Utils) {
            function SelectOnClose() {
            }
            SelectOnClose.prototype.bind = function(decorated, container, $container) {
              var self2 = this;
              decorated.call(this, container, $container);
              container.on("close", function(params) {
                self2._handleSelectOnClose(params);
              });
            };
            SelectOnClose.prototype._handleSelectOnClose = function(_, params) {
              if (params && params.originalSelect2Event != null) {
                var event = params.originalSelect2Event;
                if (event._type === "select" || event._type === "unselect") {
                  return;
                }
              }
              var $highlightedResults = this.getHighlightedResults();
              if ($highlightedResults.length < 1) {
                return;
              }
              var data = Utils.GetData($highlightedResults[0], "data");
              if (data.element != null && data.element.selected || data.element == null && data.selected) {
                return;
              }
              this.trigger("select", {
                data
              });
            };
            return SelectOnClose;
          });
          S22.define("select2/dropdown/closeOnSelect", [], function() {
            function CloseOnSelect() {
            }
            CloseOnSelect.prototype.bind = function(decorated, container, $container) {
              var self2 = this;
              decorated.call(this, container, $container);
              container.on("select", function(evt) {
                self2._selectTriggered(evt);
              });
              container.on("unselect", function(evt) {
                self2._selectTriggered(evt);
              });
            };
            CloseOnSelect.prototype._selectTriggered = function(_, evt) {
              var originalEvent = evt.originalEvent;
              if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) {
                return;
              }
              this.trigger("close", {
                originalEvent,
                originalSelect2Event: evt
              });
            };
            return CloseOnSelect;
          });
          S22.define("select2/i18n/en", [], function() {
            return {
              errorLoading: function() {
                return "The results could not be loaded.";
              },
              inputTooLong: function(args) {
                var overChars = args.input.length - args.maximum;
                var message = "Please delete " + overChars + " character";
                if (overChars != 1) {
                  message += "s";
                }
                return message;
              },
              inputTooShort: function(args) {
                var remainingChars = args.minimum - args.input.length;
                var message = "Please enter " + remainingChars + " or more characters";
                return message;
              },
              loadingMore: function() {
                return "Loading more results\u2026";
              },
              maximumSelected: function(args) {
                var message = "You can only select " + args.maximum + " item";
                if (args.maximum != 1) {
                  message += "s";
                }
                return message;
              },
              noResults: function() {
                return "No results found";
              },
              searching: function() {
                return "Searching\u2026";
              },
              removeAllItems: function() {
                return "Remove all items";
              }
            };
          });
          S22.define("select2/defaults", [
            "jquery",
            "require",
            "./results",
            "./selection/single",
            "./selection/multiple",
            "./selection/placeholder",
            "./selection/allowClear",
            "./selection/search",
            "./selection/eventRelay",
            "./utils",
            "./translation",
            "./diacritics",
            "./data/select",
            "./data/array",
            "./data/ajax",
            "./data/tags",
            "./data/tokenizer",
            "./data/minimumInputLength",
            "./data/maximumInputLength",
            "./data/maximumSelectionLength",
            "./dropdown",
            "./dropdown/search",
            "./dropdown/hidePlaceholder",
            "./dropdown/infiniteScroll",
            "./dropdown/attachBody",
            "./dropdown/minimumResultsForSearch",
            "./dropdown/selectOnClose",
            "./dropdown/closeOnSelect",
            "./i18n/en"
          ], function($2, require2, ResultsList, SingleSelection, MultipleSelection, Placeholder, AllowClear, SelectionSearch, EventRelay, Utils, Translation, DIACRITICS, SelectData, ArrayData, AjaxData, Tags, Tokenizer, MinimumInputLength, MaximumInputLength, MaximumSelectionLength, Dropdown2, DropdownSearch, HidePlaceholder, InfiniteScroll, AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect, EnglishTranslation) {
            function Defaults() {
              this.reset();
            }
            Defaults.prototype.apply = function(options) {
              options = $2.extend(true, {}, this.defaults, options);
              if (options.dataAdapter == null) {
                if (options.ajax != null) {
                  options.dataAdapter = AjaxData;
                } else if (options.data != null) {
                  options.dataAdapter = ArrayData;
                } else {
                  options.dataAdapter = SelectData;
                }
                if (options.minimumInputLength > 0) {
                  options.dataAdapter = Utils.Decorate(
                    options.dataAdapter,
                    MinimumInputLength
                  );
                }
                if (options.maximumInputLength > 0) {
                  options.dataAdapter = Utils.Decorate(
                    options.dataAdapter,
                    MaximumInputLength
                  );
                }
                if (options.maximumSelectionLength > 0) {
                  options.dataAdapter = Utils.Decorate(
                    options.dataAdapter,
                    MaximumSelectionLength
                  );
                }
                if (options.tags) {
                  options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
                }
                if (options.tokenSeparators != null || options.tokenizer != null) {
                  options.dataAdapter = Utils.Decorate(
                    options.dataAdapter,
                    Tokenizer
                  );
                }
                if (options.query != null) {
                  var Query = require2(options.amdBase + "compat/query");
                  options.dataAdapter = Utils.Decorate(
                    options.dataAdapter,
                    Query
                  );
                }
                if (options.initSelection != null) {
                  var InitSelection = require2(options.amdBase + "compat/initSelection");
                  options.dataAdapter = Utils.Decorate(
                    options.dataAdapter,
                    InitSelection
                  );
                }
              }
              if (options.resultsAdapter == null) {
                options.resultsAdapter = ResultsList;
                if (options.ajax != null) {
                  options.resultsAdapter = Utils.Decorate(
                    options.resultsAdapter,
                    InfiniteScroll
                  );
                }
                if (options.placeholder != null) {
                  options.resultsAdapter = Utils.Decorate(
                    options.resultsAdapter,
                    HidePlaceholder
                  );
                }
                if (options.selectOnClose) {
                  options.resultsAdapter = Utils.Decorate(
                    options.resultsAdapter,
                    SelectOnClose
                  );
                }
              }
              if (options.dropdownAdapter == null) {
                if (options.multiple) {
                  options.dropdownAdapter = Dropdown2;
                } else {
                  var SearchableDropdown = Utils.Decorate(Dropdown2, DropdownSearch);
                  options.dropdownAdapter = SearchableDropdown;
                }
                if (options.minimumResultsForSearch !== 0) {
                  options.dropdownAdapter = Utils.Decorate(
                    options.dropdownAdapter,
                    MinimumResultsForSearch
                  );
                }
                if (options.closeOnSelect) {
                  options.dropdownAdapter = Utils.Decorate(
                    options.dropdownAdapter,
                    CloseOnSelect
                  );
                }
                if (options.dropdownCssClass != null || options.dropdownCss != null || options.adaptDropdownCssClass != null) {
                  var DropdownCSS = require2(options.amdBase + "compat/dropdownCss");
                  options.dropdownAdapter = Utils.Decorate(
                    options.dropdownAdapter,
                    DropdownCSS
                  );
                }
                options.dropdownAdapter = Utils.Decorate(
                  options.dropdownAdapter,
                  AttachBody
                );
              }
              if (options.selectionAdapter == null) {
                if (options.multiple) {
                  options.selectionAdapter = MultipleSelection;
                } else {
                  options.selectionAdapter = SingleSelection;
                }
                if (options.placeholder != null) {
                  options.selectionAdapter = Utils.Decorate(
                    options.selectionAdapter,
                    Placeholder
                  );
                }
                if (options.allowClear) {
                  options.selectionAdapter = Utils.Decorate(
                    options.selectionAdapter,
                    AllowClear
                  );
                }
                if (options.multiple) {
                  options.selectionAdapter = Utils.Decorate(
                    options.selectionAdapter,
                    SelectionSearch
                  );
                }
                if (options.containerCssClass != null || options.containerCss != null || options.adaptContainerCssClass != null) {
                  var ContainerCSS = require2(options.amdBase + "compat/containerCss");
                  options.selectionAdapter = Utils.Decorate(
                    options.selectionAdapter,
                    ContainerCSS
                  );
                }
                options.selectionAdapter = Utils.Decorate(
                  options.selectionAdapter,
                  EventRelay
                );
              }
              options.language = this._resolveLanguage(options.language);
              options.language.push("en");
              var uniqueLanguages = [];
              for (var l = 0; l < options.language.length; l++) {
                var language = options.language[l];
                if (uniqueLanguages.indexOf(language) === -1) {
                  uniqueLanguages.push(language);
                }
              }
              options.language = uniqueLanguages;
              options.translations = this._processTranslations(
                options.language,
                options.debug
              );
              return options;
            };
            Defaults.prototype.reset = function() {
              function stripDiacritics(text) {
                function match(a) {
                  return DIACRITICS[a] || a;
                }
                return text.replace(/[^\u0000-\u007E]/g, match);
              }
              function matcher(params, data) {
                if ($2.trim(params.term) === "") {
                  return data;
                }
                if (data.children && data.children.length > 0) {
                  var match = $2.extend(true, {}, data);
                  for (var c = data.children.length - 1; c >= 0; c--) {
                    var child = data.children[c];
                    var matches = matcher(params, child);
                    if (matches == null) {
                      match.children.splice(c, 1);
                    }
                  }
                  if (match.children.length > 0) {
                    return match;
                  }
                  return matcher(params, match);
                }
                var original = stripDiacritics(data.text).toUpperCase();
                var term = stripDiacritics(params.term).toUpperCase();
                if (original.indexOf(term) > -1) {
                  return data;
                }
                return null;
              }
              this.defaults = {
                amdBase: "./",
                amdLanguageBase: "./i18n/",
                closeOnSelect: true,
                debug: false,
                dropdownAutoWidth: false,
                escapeMarkup: Utils.escapeMarkup,
                language: {},
                matcher,
                minimumInputLength: 0,
                maximumInputLength: 0,
                maximumSelectionLength: 0,
                minimumResultsForSearch: 0,
                selectOnClose: false,
                scrollAfterSelect: false,
                sorter: function(data) {
                  return data;
                },
                templateResult: function(result) {
                  return result.text;
                },
                templateSelection: function(selection) {
                  return selection.text;
                },
                theme: "default",
                width: "resolve"
              };
            };
            Defaults.prototype.applyFromElement = function(options, $element) {
              var optionLanguage = options.language;
              var defaultLanguage = this.defaults.language;
              var elementLanguage = $element.prop("lang");
              var parentLanguage = $element.closest("[lang]").prop("lang");
              var languages = Array.prototype.concat.call(
                this._resolveLanguage(elementLanguage),
                this._resolveLanguage(optionLanguage),
                this._resolveLanguage(defaultLanguage),
                this._resolveLanguage(parentLanguage)
              );
              options.language = languages;
              return options;
            };
            Defaults.prototype._resolveLanguage = function(language) {
              if (!language) {
                return [];
              }
              if ($2.isEmptyObject(language)) {
                return [];
              }
              if ($2.isPlainObject(language)) {
                return [language];
              }
              var languages;
              if (!$2.isArray(language)) {
                languages = [language];
              } else {
                languages = language;
              }
              var resolvedLanguages = [];
              for (var l = 0; l < languages.length; l++) {
                resolvedLanguages.push(languages[l]);
                if (typeof languages[l] === "string" && languages[l].indexOf("-") > 0) {
                  var languageParts = languages[l].split("-");
                  var baseLanguage = languageParts[0];
                  resolvedLanguages.push(baseLanguage);
                }
              }
              return resolvedLanguages;
            };
            Defaults.prototype._processTranslations = function(languages, debug) {
              var translations = new Translation();
              for (var l = 0; l < languages.length; l++) {
                var languageData = new Translation();
                var language = languages[l];
                if (typeof language === "string") {
                  try {
                    languageData = Translation.loadPath(language);
                  } catch (e) {
                    try {
                      language = this.defaults.amdLanguageBase + language;
                      languageData = Translation.loadPath(language);
                    } catch (ex) {
                      if (debug && window.console && console.warn) {
                        console.warn(
                          'Select2: The language file for "' + language + '" could not be automatically loaded. A fallback will be used instead.'
                        );
                      }
                    }
                  }
                } else if ($2.isPlainObject(language)) {
                  languageData = new Translation(language);
                } else {
                  languageData = language;
                }
                translations.extend(languageData);
              }
              return translations;
            };
            Defaults.prototype.set = function(key, value) {
              var camelKey = $2.camelCase(key);
              var data = {};
              data[camelKey] = value;
              var convertedData = Utils._convertData(data);
              $2.extend(true, this.defaults, convertedData);
            };
            var defaults = new Defaults();
            return defaults;
          });
          S22.define("select2/options", [
            "require",
            "jquery",
            "./defaults",
            "./utils"
          ], function(require2, $2, Defaults, Utils) {
            function Options(options, $element) {
              this.options = options;
              if ($element != null) {
                this.fromElement($element);
              }
              if ($element != null) {
                this.options = Defaults.applyFromElement(this.options, $element);
              }
              this.options = Defaults.apply(this.options);
              if ($element && $element.is("input")) {
                var InputCompat = require2(this.get("amdBase") + "compat/inputData");
                this.options.dataAdapter = Utils.Decorate(
                  this.options.dataAdapter,
                  InputCompat
                );
              }
            }
            Options.prototype.fromElement = function($e) {
              var excludedData = ["select2"];
              if (this.options.multiple == null) {
                this.options.multiple = $e.prop("multiple");
              }
              if (this.options.disabled == null) {
                this.options.disabled = $e.prop("disabled");
              }
              if (this.options.dir == null) {
                if ($e.prop("dir")) {
                  this.options.dir = $e.prop("dir");
                } else if ($e.closest("[dir]").prop("dir")) {
                  this.options.dir = $e.closest("[dir]").prop("dir");
                } else {
                  this.options.dir = "ltr";
                }
              }
              $e.prop("disabled", this.options.disabled);
              $e.prop("multiple", this.options.multiple);
              if (Utils.GetData($e[0], "select2Tags")) {
                if (this.options.debug && window.console && console.warn) {
                  console.warn(
                    'Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'
                  );
                }
                Utils.StoreData($e[0], "data", Utils.GetData($e[0], "select2Tags"));
                Utils.StoreData($e[0], "tags", true);
              }
              if (Utils.GetData($e[0], "ajaxUrl")) {
                if (this.options.debug && window.console && console.warn) {
                  console.warn(
                    "Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."
                  );
                }
                $e.attr("ajax--url", Utils.GetData($e[0], "ajaxUrl"));
                Utils.StoreData($e[0], "ajax-Url", Utils.GetData($e[0], "ajaxUrl"));
              }
              var dataset = {};
              function upperCaseLetter(_, letter) {
                return letter.toUpperCase();
              }
              for (var attr = 0; attr < $e[0].attributes.length; attr++) {
                var attributeName = $e[0].attributes[attr].name;
                var prefix = "data-";
                if (attributeName.substr(0, prefix.length) == prefix) {
                  var dataName = attributeName.substring(prefix.length);
                  var dataValue = Utils.GetData($e[0], dataName);
                  var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter);
                  dataset[camelDataName] = dataValue;
                }
              }
              if ($2.fn.jquery && $2.fn.jquery.substr(0, 2) == "1." && $e[0].dataset) {
                dataset = $2.extend(true, {}, $e[0].dataset, dataset);
              }
              var data = $2.extend(true, {}, Utils.GetData($e[0]), dataset);
              data = Utils._convertData(data);
              for (var key in data) {
                if ($2.inArray(key, excludedData) > -1) {
                  continue;
                }
                if ($2.isPlainObject(this.options[key])) {
                  $2.extend(this.options[key], data[key]);
                } else {
                  this.options[key] = data[key];
                }
              }
              return this;
            };
            Options.prototype.get = function(key) {
              return this.options[key];
            };
            Options.prototype.set = function(key, val) {
              this.options[key] = val;
            };
            return Options;
          });
          S22.define("select2/core", [
            "jquery",
            "./options",
            "./utils",
            "./keys"
          ], function($2, Options, Utils, KEYS) {
            var Select2 = function($element, options) {
              if (Utils.GetData($element[0], "select2") != null) {
                Utils.GetData($element[0], "select2").destroy();
              }
              this.$element = $element;
              this.id = this._generateId($element);
              options = options || {};
              this.options = new Options(options, $element);
              Select2.__super__.constructor.call(this);
              var tabindex = $element.attr("tabindex") || 0;
              Utils.StoreData($element[0], "old-tabindex", tabindex);
              $element.attr("tabindex", "-1");
              var DataAdapter = this.options.get("dataAdapter");
              this.dataAdapter = new DataAdapter($element, this.options);
              var $container = this.render();
              this._placeContainer($container);
              var SelectionAdapter = this.options.get("selectionAdapter");
              this.selection = new SelectionAdapter($element, this.options);
              this.$selection = this.selection.render();
              this.selection.position(this.$selection, $container);
              var DropdownAdapter = this.options.get("dropdownAdapter");
              this.dropdown = new DropdownAdapter($element, this.options);
              this.$dropdown = this.dropdown.render();
              this.dropdown.position(this.$dropdown, $container);
              var ResultsAdapter = this.options.get("resultsAdapter");
              this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
              this.$results = this.results.render();
              this.results.position(this.$results, this.$dropdown);
              var self2 = this;
              this._bindAdapters();
              this._registerDomEvents();
              this._registerDataEvents();
              this._registerSelectionEvents();
              this._registerDropdownEvents();
              this._registerResultsEvents();
              this._registerEvents();
              this.dataAdapter.current(function(initialData) {
                self2.trigger("selection:update", {
                  data: initialData
                });
              });
              $element.addClass("select2-hidden-accessible");
              $element.attr("aria-hidden", "true");
              this._syncAttributes();
              Utils.StoreData($element[0], "select2", this);
              $element.data("select2", this);
            };
            Utils.Extend(Select2, Utils.Observable);
            Select2.prototype._generateId = function($element) {
              var id = "";
              if ($element.attr("id") != null) {
                id = $element.attr("id");
              } else if ($element.attr("name") != null) {
                id = $element.attr("name") + "-" + Utils.generateChars(2);
              } else {
                id = Utils.generateChars(4);
              }
              id = id.replace(/(:|\.|\[|\]|,)/g, "");
              id = "select2-" + id;
              return id;
            };
            Select2.prototype._placeContainer = function($container) {
              $container.insertAfter(this.$element);
              var width = this._resolveWidth(this.$element, this.options.get("width"));
              if (width != null) {
                $container.css("width", width);
              }
            };
            Select2.prototype._resolveWidth = function($element, method) {
              var WIDTH2 = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;
              if (method == "resolve") {
                var styleWidth = this._resolveWidth($element, "style");
                if (styleWidth != null) {
                  return styleWidth;
                }
                return this._resolveWidth($element, "element");
              }
              if (method == "element") {
                var elementWidth = $element.outerWidth(false);
                if (elementWidth <= 0) {
                  return "auto";
                }
                return elementWidth + "px";
              }
              if (method == "style") {
                var style = $element.attr("style");
                if (typeof style !== "string") {
                  return null;
                }
                var attrs = style.split(";");
                for (var i = 0, l = attrs.length; i < l; i = i + 1) {
                  var attr = attrs[i].replace(/\s/g, "");
                  var matches = attr.match(WIDTH2);
                  if (matches !== null && matches.length >= 1) {
                    return matches[1];
                  }
                }
                return null;
              }
              if (method == "computedstyle") {
                var computedStyle = window.getComputedStyle($element[0]);
                return computedStyle.width;
              }
              return method;
            };
            Select2.prototype._bindAdapters = function() {
              this.dataAdapter.bind(this, this.$container);
              this.selection.bind(this, this.$container);
              this.dropdown.bind(this, this.$container);
              this.results.bind(this, this.$container);
            };
            Select2.prototype._registerDomEvents = function() {
              var self2 = this;
              this.$element.on("change.select2", function() {
                self2.dataAdapter.current(function(data) {
                  self2.trigger("selection:update", {
                    data
                  });
                });
              });
              this.$element.on("focus.select2", function(evt) {
                self2.trigger("focus", evt);
              });
              this._syncA = Utils.bind(this._syncAttributes, this);
              this._syncS = Utils.bind(this._syncSubtree, this);
              if (this.$element[0].attachEvent) {
                this.$element[0].attachEvent("onpropertychange", this._syncA);
              }
              var observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
              if (observer != null) {
                this._observer = new observer(function(mutations) {
                  self2._syncA();
                  self2._syncS(null, mutations);
                });
                this._observer.observe(this.$element[0], {
                  attributes: true,
                  childList: true,
                  subtree: false
                });
              } else if (this.$element[0].addEventListener) {
                this.$element[0].addEventListener(
                  "DOMAttrModified",
                  self2._syncA,
                  false
                );
                this.$element[0].addEventListener(
                  "DOMNodeInserted",
                  self2._syncS,
                  false
                );
                this.$element[0].addEventListener(
                  "DOMNodeRemoved",
                  self2._syncS,
                  false
                );
              }
            };
            Select2.prototype._registerDataEvents = function() {
              var self2 = this;
              this.dataAdapter.on("*", function(name, params) {
                self2.trigger(name, params);
              });
            };
            Select2.prototype._registerSelectionEvents = function() {
              var self2 = this;
              var nonRelayEvents = ["toggle", "focus"];
              this.selection.on("toggle", function() {
                self2.toggleDropdown();
              });
              this.selection.on("focus", function(params) {
                self2.focus(params);
              });
              this.selection.on("*", function(name, params) {
                if ($2.inArray(name, nonRelayEvents) !== -1) {
                  return;
                }
                self2.trigger(name, params);
              });
            };
            Select2.prototype._registerDropdownEvents = function() {
              var self2 = this;
              this.dropdown.on("*", function(name, params) {
                self2.trigger(name, params);
              });
            };
            Select2.prototype._registerResultsEvents = function() {
              var self2 = this;
              this.results.on("*", function(name, params) {
                self2.trigger(name, params);
              });
            };
            Select2.prototype._registerEvents = function() {
              var self2 = this;
              this.on("open", function() {
                self2.$container.addClass("select2-container--open");
              });
              this.on("close", function() {
                self2.$container.removeClass("select2-container--open");
              });
              this.on("enable", function() {
                self2.$container.removeClass("select2-container--disabled");
              });
              this.on("disable", function() {
                self2.$container.addClass("select2-container--disabled");
              });
              this.on("blur", function() {
                self2.$container.removeClass("select2-container--focus");
              });
              this.on("query", function(params) {
                if (!self2.isOpen()) {
                  self2.trigger("open", {});
                }
                this.dataAdapter.query(params, function(data) {
                  self2.trigger("results:all", {
                    data,
                    query: params
                  });
                });
              });
              this.on("query:append", function(params) {
                this.dataAdapter.query(params, function(data) {
                  self2.trigger("results:append", {
                    data,
                    query: params
                  });
                });
              });
              this.on("keypress", function(evt) {
                var key = evt.which;
                if (self2.isOpen()) {
                  if (key === KEYS.ESC || key === KEYS.TAB || key === KEYS.UP && evt.altKey) {
                    self2.close(evt);
                    evt.preventDefault();
                  } else if (key === KEYS.ENTER) {
                    self2.trigger("results:select", {});
                    evt.preventDefault();
                  } else if (key === KEYS.SPACE && evt.ctrlKey) {
                    self2.trigger("results:toggle", {});
                    evt.preventDefault();
                  } else if (key === KEYS.UP) {
                    self2.trigger("results:previous", {});
                    evt.preventDefault();
                  } else if (key === KEYS.DOWN) {
                    self2.trigger("results:next", {});
                    evt.preventDefault();
                  }
                } else {
                  if (key === KEYS.ENTER || key === KEYS.SPACE || key === KEYS.DOWN && evt.altKey) {
                    self2.open();
                    evt.preventDefault();
                  }
                }
              });
            };
            Select2.prototype._syncAttributes = function() {
              this.options.set("disabled", this.$element.prop("disabled"));
              if (this.isDisabled()) {
                if (this.isOpen()) {
                  this.close();
                }
                this.trigger("disable", {});
              } else {
                this.trigger("enable", {});
              }
            };
            Select2.prototype._isChangeMutation = function(evt, mutations) {
              var changed = false;
              var self2 = this;
              if (evt && evt.target && (evt.target.nodeName !== "OPTION" && evt.target.nodeName !== "OPTGROUP")) {
                return;
              }
              if (!mutations) {
                changed = true;
              } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
                for (var n = 0; n < mutations.addedNodes.length; n++) {
                  var node = mutations.addedNodes[n];
                  if (node.selected) {
                    changed = true;
                  }
                }
              } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
                changed = true;
              } else if ($2.isArray(mutations)) {
                $2.each(mutations, function(evt2, mutation) {
                  if (self2._isChangeMutation(evt2, mutation)) {
                    changed = true;
                    return false;
                  }
                });
              }
              return changed;
            };
            Select2.prototype._syncSubtree = function(evt, mutations) {
              var changed = this._isChangeMutation(evt, mutations);
              var self2 = this;
              if (changed) {
                this.dataAdapter.current(function(currentData) {
                  self2.trigger("selection:update", {
                    data: currentData
                  });
                });
              }
            };
            Select2.prototype.trigger = function(name, args) {
              var actualTrigger = Select2.__super__.trigger;
              var preTriggerMap = {
                "open": "opening",
                "close": "closing",
                "select": "selecting",
                "unselect": "unselecting",
                "clear": "clearing"
              };
              if (args === void 0) {
                args = {};
              }
              if (name in preTriggerMap) {
                var preTriggerName = preTriggerMap[name];
                var preTriggerArgs = {
                  prevented: false,
                  name,
                  args
                };
                actualTrigger.call(this, preTriggerName, preTriggerArgs);
                if (preTriggerArgs.prevented) {
                  args.prevented = true;
                  return;
                }
              }
              actualTrigger.call(this, name, args);
            };
            Select2.prototype.toggleDropdown = function() {
              if (this.isDisabled()) {
                return;
              }
              if (this.isOpen()) {
                this.close();
              } else {
                this.open();
              }
            };
            Select2.prototype.open = function() {
              if (this.isOpen()) {
                return;
              }
              if (this.isDisabled()) {
                return;
              }
              this.trigger("query", {});
            };
            Select2.prototype.close = function(evt) {
              if (!this.isOpen()) {
                return;
              }
              this.trigger("close", { originalEvent: evt });
            };
            Select2.prototype.isEnabled = function() {
              return !this.isDisabled();
            };
            Select2.prototype.isDisabled = function() {
              return this.options.get("disabled");
            };
            Select2.prototype.isOpen = function() {
              return this.$container.hasClass("select2-container--open");
            };
            Select2.prototype.hasFocus = function() {
              return this.$container.hasClass("select2-container--focus");
            };
            Select2.prototype.focus = function(data) {
              if (this.hasFocus()) {
                return;
              }
              this.$container.addClass("select2-container--focus");
              this.trigger("focus", {});
            };
            Select2.prototype.enable = function(args) {
              if (this.options.get("debug") && window.console && console.warn) {
                console.warn(
                  'Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'
                );
              }
              if (args == null || args.length === 0) {
                args = [true];
              }
              var disabled = !args[0];
              this.$element.prop("disabled", disabled);
            };
            Select2.prototype.data = function() {
              if (this.options.get("debug") && arguments.length > 0 && window.console && console.warn) {
                console.warn(
                  'Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.'
                );
              }
              var data = [];
              this.dataAdapter.current(function(currentData) {
                data = currentData;
              });
              return data;
            };
            Select2.prototype.val = function(args) {
              if (this.options.get("debug") && window.console && console.warn) {
                console.warn(
                  'Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'
                );
              }
              if (args == null || args.length === 0) {
                return this.$element.val();
              }
              var newVal = args[0];
              if ($2.isArray(newVal)) {
                newVal = $2.map(newVal, function(obj) {
                  return obj.toString();
                });
              }
              this.$element.val(newVal).trigger("input").trigger("change");
            };
            Select2.prototype.destroy = function() {
              this.$container.remove();
              if (this.$element[0].detachEvent) {
                this.$element[0].detachEvent("onpropertychange", this._syncA);
              }
              if (this._observer != null) {
                this._observer.disconnect();
                this._observer = null;
              } else if (this.$element[0].removeEventListener) {
                this.$element[0].removeEventListener("DOMAttrModified", this._syncA, false);
                this.$element[0].removeEventListener("DOMNodeInserted", this._syncS, false);
                this.$element[0].removeEventListener("DOMNodeRemoved", this._syncS, false);
              }
              this._syncA = null;
              this._syncS = null;
              this.$element.off(".select2");
              this.$element.attr(
                "tabindex",
                Utils.GetData(this.$element[0], "old-tabindex")
              );
              this.$element.removeClass("select2-hidden-accessible");
              this.$element.attr("aria-hidden", "false");
              Utils.RemoveData(this.$element[0]);
              this.$element.removeData("select2");
              this.dataAdapter.destroy();
              this.selection.destroy();
              this.dropdown.destroy();
              this.results.destroy();
              this.dataAdapter = null;
              this.selection = null;
              this.dropdown = null;
              this.results = null;
            };
            Select2.prototype.render = function() {
              var $container = $2(
                '<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>'
              );
              $container.attr("dir", this.options.get("dir"));
              this.$container = $container;
              this.$container.addClass("select2-container--" + this.options.get("theme"));
              Utils.StoreData($container[0], "element", this.$element);
              return $container;
            };
            return Select2;
          });
          S22.define("jquery-mousewheel", [
            "jquery"
          ], function($2) {
            return $2;
          });
          S22.define("jquery.select2", [
            "jquery",
            "jquery-mousewheel",
            "./select2/core",
            "./select2/defaults",
            "./select2/utils"
          ], function($2, _, Select2, Defaults, Utils) {
            if ($2.fn.select2 == null) {
              var thisMethods = ["open", "close", "destroy"];
              $2.fn.select2 = function(options) {
                options = options || {};
                if (typeof options === "object") {
                  this.each(function() {
                    var instanceOptions = $2.extend(true, {}, options);
                    var instance = new Select2($2(this), instanceOptions);
                  });
                  return this;
                } else if (typeof options === "string") {
                  var ret;
                  var args = Array.prototype.slice.call(arguments, 1);
                  this.each(function() {
                    var instance = Utils.GetData(this, "select2");
                    if (instance == null && window.console && console.error) {
                      console.error(
                        "The select2('" + options + "') method was called on an element that is not using Select2."
                      );
                    }
                    ret = instance[options].apply(instance, args);
                  });
                  if ($2.inArray(options, thisMethods) > -1) {
                    return this;
                  }
                  return ret;
                } else {
                  throw new Error("Invalid arguments for Select2: " + options);
                }
              };
            }
            if ($2.fn.select2.defaults == null) {
              $2.fn.select2.defaults = Defaults;
            }
            return Select2;
          });
          return {
            define: S22.define,
            require: S22.require
          };
        }();
        var select2 = S2.require("jquery.select2");
        jQuery2.fn.select2.amd = S2;
        return select2;
      });
    }
  });

  // node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js
  var require_activestorage = __commonJS({
    "node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.ActiveStorage = {}));
      })(exports, function(exports2) {
        "use strict";
        var sparkMd5 = {
          exports: {}
        };
        (function(module2, exports3) {
          (function(factory) {
            {
              module2.exports = factory();
            }
          })(function(undefined$1) {
            var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
            function md5cycle(x, k) {
              var a = x[0], b = x[1], c = x[2], d = x[3];
              a += (b & c | ~b & d) + k[0] - 680876936 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[1] - 389564586 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[2] + 606105819 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & c | ~b & d) + k[4] - 176418897 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[7] - 45705983 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[10] - 42063 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[13] - 40341101 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & d | c & ~d) + k[1] - 165796510 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[11] + 643717713 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[0] - 373897302 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b & d | c & ~d) + k[5] - 701558691 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[10] + 38016083 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[15] - 660478335 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[4] - 405537848 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b & d | c & ~d) + k[9] + 568446438 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[3] - 187363961 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[2] - 51403784 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b ^ c ^ d) + k[5] - 378558 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[14] - 35309556 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[7] - 155497632 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (b ^ c ^ d) + k[13] + 681279174 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[0] - 358537222 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[3] - 722521979 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[6] + 76029189 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (b ^ c ^ d) + k[9] - 640364487 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[12] - 421815835 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[15] + 530742520 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[2] - 995338651 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              x[0] = a + x[0] | 0;
              x[1] = b + x[1] | 0;
              x[2] = c + x[2] | 0;
              x[3] = d + x[3] | 0;
            }
            function md5blk(s) {
              var md5blks = [], i;
              for (i = 0; i < 64; i += 4) {
                md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
              }
              return md5blks;
            }
            function md5blk_array(a) {
              var md5blks = [], i;
              for (i = 0; i < 64; i += 4) {
                md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
              }
              return md5blks;
            }
            function md51(s) {
              var n = s.length, state = [1732584193, -271733879, -1732584194, 271733878], i, length, tail, tmp, lo, hi;
              for (i = 64; i <= n; i += 64) {
                md5cycle(state, md5blk(s.substring(i - 64, i)));
              }
              s = s.substring(i - 64);
              length = s.length;
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
              }
              tail[i >> 2] |= 128 << (i % 4 << 3);
              if (i > 55) {
                md5cycle(state, tail);
                for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
                }
              }
              tmp = n * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(state, tail);
              return state;
            }
            function md51_array(a) {
              var n = a.length, state = [1732584193, -271733879, -1732584194, 271733878], i, length, tail, tmp, lo, hi;
              for (i = 64; i <= n; i += 64) {
                md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
              }
              a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0);
              length = a.length;
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= a[i] << (i % 4 << 3);
              }
              tail[i >> 2] |= 128 << (i % 4 << 3);
              if (i > 55) {
                md5cycle(state, tail);
                for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
                }
              }
              tmp = n * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(state, tail);
              return state;
            }
            function rhex(n) {
              var s = "", j;
              for (j = 0; j < 4; j += 1) {
                s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
              }
              return s;
            }
            function hex(x) {
              var i;
              for (i = 0; i < x.length; i += 1) {
                x[i] = rhex(x[i]);
              }
              return x.join("");
            }
            if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592")
              ;
            if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
              (function() {
                function clamp(val, length) {
                  val = val | 0 || 0;
                  if (val < 0) {
                    return Math.max(val + length, 0);
                  }
                  return Math.min(val, length);
                }
                ArrayBuffer.prototype.slice = function(from, to) {
                  var length = this.byteLength, begin = clamp(from, length), end2 = length, num, target, targetArray, sourceArray;
                  if (to !== undefined$1) {
                    end2 = clamp(to, length);
                  }
                  if (begin > end2) {
                    return new ArrayBuffer(0);
                  }
                  num = end2 - begin;
                  target = new ArrayBuffer(num);
                  targetArray = new Uint8Array(target);
                  sourceArray = new Uint8Array(this, begin, num);
                  targetArray.set(sourceArray);
                  return target;
                };
              })();
            }
            function toUtf8(str) {
              if (/[\u0080-\uFFFF]/.test(str)) {
                str = unescape(encodeURIComponent(str));
              }
              return str;
            }
            function utf8Str2ArrayBuffer(str, returnUInt8Array) {
              var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i;
              for (i = 0; i < length; i += 1) {
                arr[i] = str.charCodeAt(i);
              }
              return returnUInt8Array ? arr : buff;
            }
            function arrayBuffer2Utf8Str(buff) {
              return String.fromCharCode.apply(null, new Uint8Array(buff));
            }
            function concatenateArrayBuffers(first, second, returnUInt8Array) {
              var result = new Uint8Array(first.byteLength + second.byteLength);
              result.set(new Uint8Array(first));
              result.set(new Uint8Array(second), first.byteLength);
              return returnUInt8Array ? result : result.buffer;
            }
            function hexToBinaryString(hex2) {
              var bytes = [], length = hex2.length, x;
              for (x = 0; x < length - 1; x += 2) {
                bytes.push(parseInt(hex2.substr(x, 2), 16));
              }
              return String.fromCharCode.apply(String, bytes);
            }
            function SparkMD52() {
              this.reset();
            }
            SparkMD52.prototype.append = function(str) {
              this.appendBinary(toUtf8(str));
              return this;
            };
            SparkMD52.prototype.appendBinary = function(contents) {
              this._buff += contents;
              this._length += contents.length;
              var length = this._buff.length, i;
              for (i = 64; i <= length; i += 64) {
                md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
              }
              this._buff = this._buff.substring(i - 64);
              return this;
            };
            SparkMD52.prototype.end = function(raw) {
              var buff = this._buff, length = buff.length, i, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3);
              }
              this._finish(tail, length);
              ret = hex(this._hash);
              if (raw) {
                ret = hexToBinaryString(ret);
              }
              this.reset();
              return ret;
            };
            SparkMD52.prototype.reset = function() {
              this._buff = "";
              this._length = 0;
              this._hash = [1732584193, -271733879, -1732584194, 271733878];
              return this;
            };
            SparkMD52.prototype.getState = function() {
              return {
                buff: this._buff,
                length: this._length,
                hash: this._hash.slice()
              };
            };
            SparkMD52.prototype.setState = function(state) {
              this._buff = state.buff;
              this._length = state.length;
              this._hash = state.hash;
              return this;
            };
            SparkMD52.prototype.destroy = function() {
              delete this._hash;
              delete this._buff;
              delete this._length;
            };
            SparkMD52.prototype._finish = function(tail, length) {
              var i = length, tmp, lo, hi;
              tail[i >> 2] |= 128 << (i % 4 << 3);
              if (i > 55) {
                md5cycle(this._hash, tail);
                for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
                }
              }
              tmp = this._length * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(this._hash, tail);
            };
            SparkMD52.hash = function(str, raw) {
              return SparkMD52.hashBinary(toUtf8(str), raw);
            };
            SparkMD52.hashBinary = function(content, raw) {
              var hash3 = md51(content), ret = hex(hash3);
              return raw ? hexToBinaryString(ret) : ret;
            };
            SparkMD52.ArrayBuffer = function() {
              this.reset();
            };
            SparkMD52.ArrayBuffer.prototype.append = function(arr) {
              var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i;
              this._length += arr.byteLength;
              for (i = 64; i <= length; i += 64) {
                md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
              }
              this._buff = i - 64 < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);
              return this;
            };
            SparkMD52.ArrayBuffer.prototype.end = function(raw) {
              var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i, ret;
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= buff[i] << (i % 4 << 3);
              }
              this._finish(tail, length);
              ret = hex(this._hash);
              if (raw) {
                ret = hexToBinaryString(ret);
              }
              this.reset();
              return ret;
            };
            SparkMD52.ArrayBuffer.prototype.reset = function() {
              this._buff = new Uint8Array(0);
              this._length = 0;
              this._hash = [1732584193, -271733879, -1732584194, 271733878];
              return this;
            };
            SparkMD52.ArrayBuffer.prototype.getState = function() {
              var state = SparkMD52.prototype.getState.call(this);
              state.buff = arrayBuffer2Utf8Str(state.buff);
              return state;
            };
            SparkMD52.ArrayBuffer.prototype.setState = function(state) {
              state.buff = utf8Str2ArrayBuffer(state.buff, true);
              return SparkMD52.prototype.setState.call(this, state);
            };
            SparkMD52.ArrayBuffer.prototype.destroy = SparkMD52.prototype.destroy;
            SparkMD52.ArrayBuffer.prototype._finish = SparkMD52.prototype._finish;
            SparkMD52.ArrayBuffer.hash = function(arr, raw) {
              var hash3 = md51_array(new Uint8Array(arr)), ret = hex(hash3);
              return raw ? hexToBinaryString(ret) : ret;
            };
            return SparkMD52;
          });
        })(sparkMd5);
        var SparkMD5 = sparkMd5.exports;
        const fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
        class FileChecksum {
          static create(file, callback) {
            const instance = new FileChecksum(file);
            instance.create(callback);
          }
          constructor(file) {
            this.file = file;
            this.chunkSize = 2097152;
            this.chunkCount = Math.ceil(this.file.size / this.chunkSize);
            this.chunkIndex = 0;
          }
          create(callback) {
            this.callback = callback;
            this.md5Buffer = new SparkMD5.ArrayBuffer();
            this.fileReader = new FileReader();
            this.fileReader.addEventListener("load", (event) => this.fileReaderDidLoad(event));
            this.fileReader.addEventListener("error", (event) => this.fileReaderDidError(event));
            this.readNextChunk();
          }
          fileReaderDidLoad(event) {
            this.md5Buffer.append(event.target.result);
            if (!this.readNextChunk()) {
              const binaryDigest = this.md5Buffer.end(true);
              const base64digest = btoa(binaryDigest);
              this.callback(null, base64digest);
            }
          }
          fileReaderDidError(event) {
            this.callback(`Error reading ${this.file.name}`);
          }
          readNextChunk() {
            if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {
              const start3 = this.chunkIndex * this.chunkSize;
              const end2 = Math.min(start3 + this.chunkSize, this.file.size);
              const bytes = fileSlice.call(this.file, start3, end2);
              this.fileReader.readAsArrayBuffer(bytes);
              this.chunkIndex++;
              return true;
            } else {
              return false;
            }
          }
        }
        function getMetaValue(name) {
          const element = findElement(document.head, `meta[name="${name}"]`);
          if (element) {
            return element.getAttribute("content");
          }
        }
        function findElements(root, selector) {
          if (typeof root == "string") {
            selector = root;
            root = document;
          }
          const elements = root.querySelectorAll(selector);
          return toArray(elements);
        }
        function findElement(root, selector) {
          if (typeof root == "string") {
            selector = root;
            root = document;
          }
          return root.querySelector(selector);
        }
        function dispatchEvent(element, type, eventInit = {}) {
          const { disabled } = element;
          const { bubbles, cancelable, detail } = eventInit;
          const event = document.createEvent("Event");
          event.initEvent(type, bubbles || true, cancelable || true);
          event.detail = detail || {};
          try {
            element.disabled = false;
            element.dispatchEvent(event);
          } finally {
            element.disabled = disabled;
          }
          return event;
        }
        function toArray(value) {
          if (Array.isArray(value)) {
            return value;
          } else if (Array.from) {
            return Array.from(value);
          } else {
            return [].slice.call(value);
          }
        }
        class BlobRecord {
          constructor(file, checksum, url) {
            this.file = file;
            this.attributes = {
              filename: file.name,
              content_type: file.type || "application/octet-stream",
              byte_size: file.size,
              checksum
            };
            this.xhr = new XMLHttpRequest();
            this.xhr.open("POST", url, true);
            this.xhr.responseType = "json";
            this.xhr.setRequestHeader("Content-Type", "application/json");
            this.xhr.setRequestHeader("Accept", "application/json");
            this.xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            const csrfToken = getMetaValue("csrf-token");
            if (csrfToken != void 0) {
              this.xhr.setRequestHeader("X-CSRF-Token", csrfToken);
            }
            this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
            this.xhr.addEventListener("error", (event) => this.requestDidError(event));
          }
          get status() {
            return this.xhr.status;
          }
          get response() {
            const { responseType, response } = this.xhr;
            if (responseType == "json") {
              return response;
            } else {
              return JSON.parse(response);
            }
          }
          create(callback) {
            this.callback = callback;
            this.xhr.send(JSON.stringify({
              blob: this.attributes
            }));
          }
          requestDidLoad(event) {
            if (this.status >= 200 && this.status < 300) {
              const { response } = this;
              const { direct_upload } = response;
              delete response.direct_upload;
              this.attributes = response;
              this.directUploadData = direct_upload;
              this.callback(null, this.toJSON());
            } else {
              this.requestDidError(event);
            }
          }
          requestDidError(event) {
            this.callback(`Error creating Blob for "${this.file.name}". Status: ${this.status}`);
          }
          toJSON() {
            const result = {};
            for (const key in this.attributes) {
              result[key] = this.attributes[key];
            }
            return result;
          }
        }
        class BlobUpload {
          constructor(blob) {
            this.blob = blob;
            this.file = blob.file;
            const { url, headers } = blob.directUploadData;
            this.xhr = new XMLHttpRequest();
            this.xhr.open("PUT", url, true);
            this.xhr.responseType = "text";
            for (const key in headers) {
              this.xhr.setRequestHeader(key, headers[key]);
            }
            this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
            this.xhr.addEventListener("error", (event) => this.requestDidError(event));
          }
          create(callback) {
            this.callback = callback;
            this.xhr.send(this.file.slice());
          }
          requestDidLoad(event) {
            const { status, response } = this.xhr;
            if (status >= 200 && status < 300) {
              this.callback(null, response);
            } else {
              this.requestDidError(event);
            }
          }
          requestDidError(event) {
            this.callback(`Error storing "${this.file.name}". Status: ${this.xhr.status}`);
          }
        }
        let id = 0;
        class DirectUpload {
          constructor(file, url, delegate) {
            this.id = ++id;
            this.file = file;
            this.url = url;
            this.delegate = delegate;
          }
          create(callback) {
            FileChecksum.create(this.file, (error, checksum) => {
              if (error) {
                callback(error);
                return;
              }
              const blob = new BlobRecord(this.file, checksum, this.url);
              notify(this.delegate, "directUploadWillCreateBlobWithXHR", blob.xhr);
              blob.create((error2) => {
                if (error2) {
                  callback(error2);
                } else {
                  const upload = new BlobUpload(blob);
                  notify(this.delegate, "directUploadWillStoreFileWithXHR", upload.xhr);
                  upload.create((error3) => {
                    if (error3) {
                      callback(error3);
                    } else {
                      callback(null, blob.toJSON());
                    }
                  });
                }
              });
            });
          }
        }
        function notify(object, methodName, ...messages) {
          if (object && typeof object[methodName] == "function") {
            return object[methodName](...messages);
          }
        }
        class DirectUploadController {
          constructor(input, file) {
            this.input = input;
            this.file = file;
            this.directUpload = new DirectUpload(this.file, this.url, this);
            this.dispatch("initialize");
          }
          start(callback) {
            const hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            hiddenInput.name = this.input.name;
            this.input.insertAdjacentElement("beforebegin", hiddenInput);
            this.dispatch("start");
            this.directUpload.create((error, attributes) => {
              if (error) {
                hiddenInput.parentNode.removeChild(hiddenInput);
                this.dispatchError(error);
              } else {
                hiddenInput.value = attributes.signed_id;
              }
              this.dispatch("end");
              callback(error);
            });
          }
          uploadRequestDidProgress(event) {
            const progress = event.loaded / event.total * 100;
            if (progress) {
              this.dispatch("progress", {
                progress
              });
            }
          }
          get url() {
            return this.input.getAttribute("data-direct-upload-url");
          }
          dispatch(name, detail = {}) {
            detail.file = this.file;
            detail.id = this.directUpload.id;
            return dispatchEvent(this.input, `direct-upload:${name}`, {
              detail
            });
          }
          dispatchError(error) {
            const event = this.dispatch("error", {
              error
            });
            if (!event.defaultPrevented) {
              alert(error);
            }
          }
          directUploadWillCreateBlobWithXHR(xhr) {
            this.dispatch("before-blob-request", {
              xhr
            });
          }
          directUploadWillStoreFileWithXHR(xhr) {
            this.dispatch("before-storage-request", {
              xhr
            });
            xhr.upload.addEventListener("progress", (event) => this.uploadRequestDidProgress(event));
          }
        }
        const inputSelector = "input[type=file][data-direct-upload-url]:not([disabled])";
        class DirectUploadsController {
          constructor(form) {
            this.form = form;
            this.inputs = findElements(form, inputSelector).filter((input) => input.files.length);
          }
          start(callback) {
            const controllers = this.createDirectUploadControllers();
            const startNextController = () => {
              const controller = controllers.shift();
              if (controller) {
                controller.start((error) => {
                  if (error) {
                    callback(error);
                    this.dispatch("end");
                  } else {
                    startNextController();
                  }
                });
              } else {
                callback();
                this.dispatch("end");
              }
            };
            this.dispatch("start");
            startNextController();
          }
          createDirectUploadControllers() {
            const controllers = [];
            this.inputs.forEach((input) => {
              toArray(input.files).forEach((file) => {
                const controller = new DirectUploadController(input, file);
                controllers.push(controller);
              });
            });
            return controllers;
          }
          dispatch(name, detail = {}) {
            return dispatchEvent(this.form, `direct-uploads:${name}`, {
              detail
            });
          }
        }
        const processingAttribute = "data-direct-uploads-processing";
        const submitButtonsByForm = /* @__PURE__ */ new WeakMap();
        let started = false;
        function start2() {
          if (!started) {
            started = true;
            document.addEventListener("click", didClick, true);
            document.addEventListener("submit", didSubmitForm, true);
            document.addEventListener("ajax:before", didSubmitRemoteElement);
          }
        }
        function didClick(event) {
          const { target } = event;
          if ((target.tagName == "INPUT" || target.tagName == "BUTTON") && target.type == "submit" && target.form) {
            submitButtonsByForm.set(target.form, target);
          }
        }
        function didSubmitForm(event) {
          handleFormSubmissionEvent(event);
        }
        function didSubmitRemoteElement(event) {
          if (event.target.tagName == "FORM") {
            handleFormSubmissionEvent(event);
          }
        }
        function handleFormSubmissionEvent(event) {
          const form = event.target;
          if (form.hasAttribute(processingAttribute)) {
            event.preventDefault();
            return;
          }
          const controller = new DirectUploadsController(form);
          const { inputs } = controller;
          if (inputs.length) {
            event.preventDefault();
            form.setAttribute(processingAttribute, "");
            inputs.forEach(disable);
            controller.start((error) => {
              form.removeAttribute(processingAttribute);
              if (error) {
                inputs.forEach(enable);
              } else {
                submitForm(form);
              }
            });
          }
        }
        function submitForm(form) {
          let button = submitButtonsByForm.get(form) || findElement(form, "input[type=submit], button[type=submit]");
          if (button) {
            const { disabled } = button;
            button.disabled = false;
            button.focus();
            button.click();
            button.disabled = disabled;
          } else {
            button = document.createElement("input");
            button.type = "submit";
            button.style.display = "none";
            form.appendChild(button);
            button.click();
            form.removeChild(button);
          }
          submitButtonsByForm.delete(form);
        }
        function disable(input) {
          input.disabled = true;
        }
        function enable(input) {
          input.disabled = false;
        }
        function autostart() {
          if (window.ActiveStorage) {
            start2();
          }
        }
        setTimeout(autostart, 1);
        exports2.DirectUpload = DirectUpload;
        exports2.start = start2;
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
      });
    }
  });

  // node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js
  var require_bootstrap_datepicker = __commonJS({
    "node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.js"(exports) {
      (function(factory) {
        if (typeof define === "function" && define.amd) {
          define(["jquery"], factory);
        } else if (typeof exports === "object") {
          factory(require_jquery());
        } else {
          factory(jQuery);
        }
      })(function($2, undefined2) {
        function UTCDate() {
          return new Date(Date.UTC.apply(Date, arguments));
        }
        function UTCToday() {
          var today = /* @__PURE__ */ new Date();
          return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());
        }
        function isUTCEquals(date1, date2) {
          return date1.getUTCFullYear() === date2.getUTCFullYear() && date1.getUTCMonth() === date2.getUTCMonth() && date1.getUTCDate() === date2.getUTCDate();
        }
        function alias(method, deprecationMsg) {
          return function() {
            if (deprecationMsg !== undefined2) {
              $2.fn.datepicker.deprecated(deprecationMsg);
            }
            return this[method].apply(this, arguments);
          };
        }
        function isValidDate(d) {
          return d && !isNaN(d.getTime());
        }
        var DateArray = function() {
          var extras = {
            get: function(i) {
              return this.slice(i)[0];
            },
            contains: function(d) {
              var val = d && d.valueOf();
              for (var i = 0, l = this.length; i < l; i++)
                if (0 <= this[i].valueOf() - val && this[i].valueOf() - val < 1e3 * 60 * 60 * 24)
                  return i;
              return -1;
            },
            remove: function(i) {
              this.splice(i, 1);
            },
            replace: function(new_array) {
              if (!new_array)
                return;
              if (!$2.isArray(new_array))
                new_array = [new_array];
              this.clear();
              this.push.apply(this, new_array);
            },
            clear: function() {
              this.length = 0;
            },
            copy: function() {
              var a = new DateArray();
              a.replace(this);
              return a;
            }
          };
          return function() {
            var a = [];
            a.push.apply(a, arguments);
            $2.extend(a, extras);
            return a;
          };
        }();
        var Datepicker = function(element, options) {
          $2.data(element, "datepicker", this);
          this._events = [];
          this._secondaryEvents = [];
          this._process_options(options);
          this.dates = new DateArray();
          this.viewDate = this.o.defaultViewDate;
          this.focusDate = null;
          this.element = $2(element);
          this.isInput = this.element.is("input");
          this.inputField = this.isInput ? this.element : this.element.find("input");
          this.component = this.element.hasClass("date") ? this.element.find(".add-on, .input-group-addon, .input-group-append, .input-group-prepend, .btn") : false;
          if (this.component && this.component.length === 0)
            this.component = false;
          this.isInline = !this.component && this.element.is("div");
          this.picker = $2(DPGlobal.template);
          if (this._check_template(this.o.templates.leftArrow)) {
            this.picker.find(".prev").html(this.o.templates.leftArrow);
          }
          if (this._check_template(this.o.templates.rightArrow)) {
            this.picker.find(".next").html(this.o.templates.rightArrow);
          }
          this._buildEvents();
          this._attachEvents();
          if (this.isInline) {
            this.picker.addClass("datepicker-inline").appendTo(this.element);
          } else {
            this.picker.addClass("datepicker-dropdown dropdown-menu");
          }
          if (this.o.rtl) {
            this.picker.addClass("datepicker-rtl");
          }
          if (this.o.calendarWeeks) {
            this.picker.find(".datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear").attr("colspan", function(i, val) {
              return Number(val) + 1;
            });
          }
          this._process_options({
            startDate: this._o.startDate,
            endDate: this._o.endDate,
            daysOfWeekDisabled: this.o.daysOfWeekDisabled,
            daysOfWeekHighlighted: this.o.daysOfWeekHighlighted,
            datesDisabled: this.o.datesDisabled
          });
          this._allow_update = false;
          this.setViewMode(this.o.startView);
          this._allow_update = true;
          this.fillDow();
          this.fillMonths();
          this.update();
          if (this.isInline) {
            this.show();
          }
        };
        Datepicker.prototype = {
          constructor: Datepicker,
          _resolveViewName: function(view) {
            $2.each(DPGlobal.viewModes, function(i, viewMode) {
              if (view === i || $2.inArray(view, viewMode.names) !== -1) {
                view = i;
                return false;
              }
            });
            return view;
          },
          _resolveDaysOfWeek: function(daysOfWeek) {
            if (!$2.isArray(daysOfWeek))
              daysOfWeek = daysOfWeek.split(/[,\s]*/);
            return $2.map(daysOfWeek, Number);
          },
          _check_template: function(tmp) {
            try {
              if (tmp === undefined2 || tmp === "") {
                return false;
              }
              if ((tmp.match(/[<>]/g) || []).length <= 0) {
                return true;
              }
              var jDom = $2(tmp);
              return jDom.length > 0;
            } catch (ex) {
              return false;
            }
          },
          _process_options: function(opts) {
            this._o = $2.extend({}, this._o, opts);
            var o = this.o = $2.extend({}, this._o);
            var lang = o.language;
            if (!dates[lang]) {
              lang = lang.split("-")[0];
              if (!dates[lang])
                lang = defaults.language;
            }
            o.language = lang;
            o.startView = this._resolveViewName(o.startView);
            o.minViewMode = this._resolveViewName(o.minViewMode);
            o.maxViewMode = this._resolveViewName(o.maxViewMode);
            o.startView = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, o.startView));
            if (o.multidate !== true) {
              o.multidate = Number(o.multidate) || false;
              if (o.multidate !== false)
                o.multidate = Math.max(0, o.multidate);
            }
            o.multidateSeparator = String(o.multidateSeparator);
            o.weekStart %= 7;
            o.weekEnd = (o.weekStart + 6) % 7;
            var format2 = DPGlobal.parseFormat(o.format);
            if (o.startDate !== -Infinity) {
              if (!!o.startDate) {
                if (o.startDate instanceof Date)
                  o.startDate = this._local_to_utc(this._zero_time(o.startDate));
                else
                  o.startDate = DPGlobal.parseDate(o.startDate, format2, o.language, o.assumeNearbyYear);
              } else {
                o.startDate = -Infinity;
              }
            }
            if (o.endDate !== Infinity) {
              if (!!o.endDate) {
                if (o.endDate instanceof Date)
                  o.endDate = this._local_to_utc(this._zero_time(o.endDate));
                else
                  o.endDate = DPGlobal.parseDate(o.endDate, format2, o.language, o.assumeNearbyYear);
              } else {
                o.endDate = Infinity;
              }
            }
            o.daysOfWeekDisabled = this._resolveDaysOfWeek(o.daysOfWeekDisabled || []);
            o.daysOfWeekHighlighted = this._resolveDaysOfWeek(o.daysOfWeekHighlighted || []);
            o.datesDisabled = o.datesDisabled || [];
            if (!$2.isArray(o.datesDisabled)) {
              o.datesDisabled = o.datesDisabled.split(",");
            }
            o.datesDisabled = $2.map(o.datesDisabled, function(d) {
              return DPGlobal.parseDate(d, format2, o.language, o.assumeNearbyYear);
            });
            var plc = String(o.orientation).toLowerCase().split(/\s+/g), _plc = o.orientation.toLowerCase();
            plc = $2.grep(plc, function(word) {
              return /^auto|left|right|top|bottom$/.test(word);
            });
            o.orientation = { x: "auto", y: "auto" };
            if (!_plc || _plc === "auto")
              ;
            else if (plc.length === 1) {
              switch (plc[0]) {
                case "top":
                case "bottom":
                  o.orientation.y = plc[0];
                  break;
                case "left":
                case "right":
                  o.orientation.x = plc[0];
                  break;
              }
            } else {
              _plc = $2.grep(plc, function(word) {
                return /^left|right$/.test(word);
              });
              o.orientation.x = _plc[0] || "auto";
              _plc = $2.grep(plc, function(word) {
                return /^top|bottom$/.test(word);
              });
              o.orientation.y = _plc[0] || "auto";
            }
            if (o.defaultViewDate instanceof Date || typeof o.defaultViewDate === "string") {
              o.defaultViewDate = DPGlobal.parseDate(o.defaultViewDate, format2, o.language, o.assumeNearbyYear);
            } else if (o.defaultViewDate) {
              var year = o.defaultViewDate.year || (/* @__PURE__ */ new Date()).getFullYear();
              var month = o.defaultViewDate.month || 0;
              var day = o.defaultViewDate.day || 1;
              o.defaultViewDate = UTCDate(year, month, day);
            } else {
              o.defaultViewDate = UTCToday();
            }
          },
          _applyEvents: function(evs) {
            for (var i = 0, el, ch, ev; i < evs.length; i++) {
              el = evs[i][0];
              if (evs[i].length === 2) {
                ch = undefined2;
                ev = evs[i][1];
              } else if (evs[i].length === 3) {
                ch = evs[i][1];
                ev = evs[i][2];
              }
              el.on(ev, ch);
            }
          },
          _unapplyEvents: function(evs) {
            for (var i = 0, el, ev, ch; i < evs.length; i++) {
              el = evs[i][0];
              if (evs[i].length === 2) {
                ch = undefined2;
                ev = evs[i][1];
              } else if (evs[i].length === 3) {
                ch = evs[i][1];
                ev = evs[i][2];
              }
              el.off(ev, ch);
            }
          },
          _buildEvents: function() {
            var events = {
              keyup: $2.proxy(function(e) {
                if ($2.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1)
                  this.update();
              }, this),
              keydown: $2.proxy(this.keydown, this),
              paste: $2.proxy(this.paste, this)
            };
            if (this.o.showOnFocus === true) {
              events.focus = $2.proxy(this.show, this);
            }
            if (this.isInput) {
              this._events = [
                [this.element, events]
              ];
            } else if (this.component && this.inputField.length) {
              this._events = [
                // For components that are not readonly, allow keyboard nav
                [this.inputField, events],
                [this.component, {
                  click: $2.proxy(this.show, this)
                }]
              ];
            } else {
              this._events = [
                [this.element, {
                  click: $2.proxy(this.show, this),
                  keydown: $2.proxy(this.keydown, this)
                }]
              ];
            }
            this._events.push(
              // Component: listen for blur on element descendants
              [this.element, "*", {
                blur: $2.proxy(function(e) {
                  this._focused_from = e.target;
                }, this)
              }],
              // Input: listen for blur on element
              [this.element, {
                blur: $2.proxy(function(e) {
                  this._focused_from = e.target;
                }, this)
              }]
            );
            if (this.o.immediateUpdates) {
              this._events.push([this.element, {
                "changeYear changeMonth": $2.proxy(function(e) {
                  this.update(e.date);
                }, this)
              }]);
            }
            this._secondaryEvents = [
              [this.picker, {
                click: $2.proxy(this.click, this)
              }],
              [this.picker, ".prev, .next", {
                click: $2.proxy(this.navArrowsClick, this)
              }],
              [this.picker, ".day:not(.disabled)", {
                click: $2.proxy(this.dayCellClick, this)
              }],
              [$2(window), {
                resize: $2.proxy(this.place, this)
              }],
              [$2(document), {
                "mousedown touchstart": $2.proxy(function(e) {
                  if (!(this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length || this.isInline)) {
                    this.hide();
                  }
                }, this)
              }]
            ];
          },
          _attachEvents: function() {
            this._detachEvents();
            this._applyEvents(this._events);
          },
          _detachEvents: function() {
            this._unapplyEvents(this._events);
          },
          _attachSecondaryEvents: function() {
            this._detachSecondaryEvents();
            this._applyEvents(this._secondaryEvents);
          },
          _detachSecondaryEvents: function() {
            this._unapplyEvents(this._secondaryEvents);
          },
          _trigger: function(event, altdate) {
            var date = altdate || this.dates.get(-1), local_date = this._utc_to_local(date);
            this.element.trigger({
              type: event,
              date: local_date,
              viewMode: this.viewMode,
              dates: $2.map(this.dates, this._utc_to_local),
              format: $2.proxy(function(ix, format2) {
                if (arguments.length === 0) {
                  ix = this.dates.length - 1;
                  format2 = this.o.format;
                } else if (typeof ix === "string") {
                  format2 = ix;
                  ix = this.dates.length - 1;
                }
                format2 = format2 || this.o.format;
                var date2 = this.dates.get(ix);
                return DPGlobal.formatDate(date2, format2, this.o.language);
              }, this)
            });
          },
          show: function() {
            if (this.inputField.is(":disabled") || this.inputField.prop("readonly") && this.o.enableOnReadonly === false)
              return;
            if (!this.isInline)
              this.picker.appendTo(this.o.container);
            this.place();
            this.picker.show();
            this._attachSecondaryEvents();
            this._trigger("show");
            if ((window.navigator.msMaxTouchPoints || "ontouchstart" in document) && this.o.disableTouchKeyboard) {
              $2(this.element).blur();
            }
            return this;
          },
          hide: function() {
            if (this.isInline || !this.picker.is(":visible"))
              return this;
            this.focusDate = null;
            this.picker.hide().detach();
            this._detachSecondaryEvents();
            this.setViewMode(this.o.startView);
            if (this.o.forceParse && this.inputField.val())
              this.setValue();
            this._trigger("hide");
            return this;
          },
          destroy: function() {
            this.hide();
            this._detachEvents();
            this._detachSecondaryEvents();
            this.picker.remove();
            delete this.element.data().datepicker;
            if (!this.isInput) {
              delete this.element.data().date;
            }
            return this;
          },
          paste: function(e) {
            var dateString;
            if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.types && $2.inArray("text/plain", e.originalEvent.clipboardData.types) !== -1) {
              dateString = e.originalEvent.clipboardData.getData("text/plain");
            } else if (window.clipboardData) {
              dateString = window.clipboardData.getData("Text");
            } else {
              return;
            }
            this.setDate(dateString);
            this.update();
            e.preventDefault();
          },
          _utc_to_local: function(utc) {
            if (!utc) {
              return utc;
            }
            var local = new Date(utc.getTime() + utc.getTimezoneOffset() * 6e4);
            if (local.getTimezoneOffset() !== utc.getTimezoneOffset()) {
              local = new Date(utc.getTime() + local.getTimezoneOffset() * 6e4);
            }
            return local;
          },
          _local_to_utc: function(local) {
            return local && new Date(local.getTime() - local.getTimezoneOffset() * 6e4);
          },
          _zero_time: function(local) {
            return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());
          },
          _zero_utc_time: function(utc) {
            return utc && UTCDate(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate());
          },
          getDates: function() {
            return $2.map(this.dates, this._utc_to_local);
          },
          getUTCDates: function() {
            return $2.map(this.dates, function(d) {
              return new Date(d);
            });
          },
          getDate: function() {
            return this._utc_to_local(this.getUTCDate());
          },
          getUTCDate: function() {
            var selected_date = this.dates.get(-1);
            if (selected_date !== undefined2) {
              return new Date(selected_date);
            } else {
              return null;
            }
          },
          clearDates: function() {
            this.inputField.val("");
            this.update();
            this._trigger("changeDate");
            if (this.o.autoclose) {
              this.hide();
            }
          },
          setDates: function() {
            var args = $2.isArray(arguments[0]) ? arguments[0] : arguments;
            this.update.apply(this, args);
            this._trigger("changeDate");
            this.setValue();
            return this;
          },
          setUTCDates: function() {
            var args = $2.isArray(arguments[0]) ? arguments[0] : arguments;
            this.setDates.apply(this, $2.map(args, this._utc_to_local));
            return this;
          },
          setDate: alias("setDates"),
          setUTCDate: alias("setUTCDates"),
          remove: alias("destroy", "Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead"),
          setValue: function() {
            var formatted = this.getFormattedDate();
            this.inputField.val(formatted);
            return this;
          },
          getFormattedDate: function(format2) {
            if (format2 === undefined2)
              format2 = this.o.format;
            var lang = this.o.language;
            return $2.map(this.dates, function(d) {
              return DPGlobal.formatDate(d, format2, lang);
            }).join(this.o.multidateSeparator);
          },
          getStartDate: function() {
            return this.o.startDate;
          },
          setStartDate: function(startDate) {
            this._process_options({ startDate });
            this.update();
            this.updateNavArrows();
            return this;
          },
          getEndDate: function() {
            return this.o.endDate;
          },
          setEndDate: function(endDate) {
            this._process_options({ endDate });
            this.update();
            this.updateNavArrows();
            return this;
          },
          setDaysOfWeekDisabled: function(daysOfWeekDisabled) {
            this._process_options({ daysOfWeekDisabled });
            this.update();
            return this;
          },
          setDaysOfWeekHighlighted: function(daysOfWeekHighlighted) {
            this._process_options({ daysOfWeekHighlighted });
            this.update();
            return this;
          },
          setDatesDisabled: function(datesDisabled) {
            this._process_options({ datesDisabled });
            this.update();
            return this;
          },
          place: function() {
            if (this.isInline)
              return this;
            var calendarWidth = this.picker.outerWidth(), calendarHeight = this.picker.outerHeight(), visualPadding = 10, container = $2(this.o.container), windowWidth = container.width(), scrollTop = this.o.container === "body" ? $2(document).scrollTop() : container.scrollTop(), appendOffset = container.offset();
            var parentsZindex = [0];
            this.element.parents().each(function() {
              var itemZIndex = $2(this).css("z-index");
              if (itemZIndex !== "auto" && Number(itemZIndex) !== 0)
                parentsZindex.push(Number(itemZIndex));
            });
            var zIndex = Math.max.apply(Math, parentsZindex) + this.o.zIndexOffset;
            var offset2 = this.component ? this.component.parent().offset() : this.element.offset();
            var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);
            var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);
            var left2 = offset2.left - appendOffset.left;
            var top2 = offset2.top - appendOffset.top;
            if (this.o.container !== "body") {
              top2 += scrollTop;
            }
            this.picker.removeClass(
              "datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"
            );
            if (this.o.orientation.x !== "auto") {
              this.picker.addClass("datepicker-orient-" + this.o.orientation.x);
              if (this.o.orientation.x === "right")
                left2 -= calendarWidth - width;
            } else {
              if (offset2.left < 0) {
                this.picker.addClass("datepicker-orient-left");
                left2 -= offset2.left - visualPadding;
              } else if (left2 + calendarWidth > windowWidth) {
                this.picker.addClass("datepicker-orient-right");
                left2 += width - calendarWidth;
              } else {
                if (this.o.rtl) {
                  this.picker.addClass("datepicker-orient-right");
                } else {
                  this.picker.addClass("datepicker-orient-left");
                }
              }
            }
            var yorient = this.o.orientation.y, top_overflow;
            if (yorient === "auto") {
              top_overflow = -scrollTop + top2 - calendarHeight;
              yorient = top_overflow < 0 ? "bottom" : "top";
            }
            this.picker.addClass("datepicker-orient-" + yorient);
            if (yorient === "top")
              top2 -= calendarHeight + parseInt(this.picker.css("padding-top"));
            else
              top2 += height;
            if (this.o.rtl) {
              var right2 = windowWidth - (left2 + width);
              this.picker.css({
                top: top2,
                right: right2,
                zIndex
              });
            } else {
              this.picker.css({
                top: top2,
                left: left2,
                zIndex
              });
            }
            return this;
          },
          _allow_update: true,
          update: function() {
            if (!this._allow_update)
              return this;
            var oldDates = this.dates.copy(), dates2 = [], fromArgs = false;
            if (arguments.length) {
              $2.each(arguments, $2.proxy(function(i, date) {
                if (date instanceof Date)
                  date = this._local_to_utc(date);
                dates2.push(date);
              }, this));
              fromArgs = true;
            } else {
              dates2 = this.isInput ? this.element.val() : this.element.data("date") || this.inputField.val();
              if (dates2 && this.o.multidate)
                dates2 = dates2.split(this.o.multidateSeparator);
              else
                dates2 = [dates2];
              delete this.element.data().date;
            }
            dates2 = $2.map(dates2, $2.proxy(function(date) {
              return DPGlobal.parseDate(date, this.o.format, this.o.language, this.o.assumeNearbyYear);
            }, this));
            dates2 = $2.grep(dates2, $2.proxy(function(date) {
              return !this.dateWithinRange(date) || !date;
            }, this), true);
            this.dates.replace(dates2);
            if (this.o.updateViewDate) {
              if (this.dates.length)
                this.viewDate = new Date(this.dates.get(-1));
              else if (this.viewDate < this.o.startDate)
                this.viewDate = new Date(this.o.startDate);
              else if (this.viewDate > this.o.endDate)
                this.viewDate = new Date(this.o.endDate);
              else
                this.viewDate = this.o.defaultViewDate;
            }
            if (fromArgs) {
              this.setValue();
              this.element.change();
            } else if (this.dates.length) {
              if (String(oldDates) !== String(this.dates) && fromArgs) {
                this._trigger("changeDate");
                this.element.change();
              }
            }
            if (!this.dates.length && oldDates.length) {
              this._trigger("clearDate");
              this.element.change();
            }
            this.fill();
            return this;
          },
          fillDow: function() {
            if (this.o.showWeekDays) {
              var dowCnt = this.o.weekStart, html = "<tr>";
              if (this.o.calendarWeeks) {
                html += '<th class="cw">&#160;</th>';
              }
              while (dowCnt < this.o.weekStart + 7) {
                html += '<th class="dow';
                if ($2.inArray(dowCnt, this.o.daysOfWeekDisabled) !== -1)
                  html += " disabled";
                html += '">' + dates[this.o.language].daysMin[dowCnt++ % 7] + "</th>";
              }
              html += "</tr>";
              this.picker.find(".datepicker-days thead").append(html);
            }
          },
          fillMonths: function() {
            var localDate = this._utc_to_local(this.viewDate);
            var html = "";
            var focused;
            for (var i = 0; i < 12; i++) {
              focused = localDate && localDate.getMonth() === i ? " focused" : "";
              html += '<span class="month' + focused + '">' + dates[this.o.language].monthsShort[i] + "</span>";
            }
            this.picker.find(".datepicker-months td").html(html);
          },
          setRange: function(range) {
            if (!range || !range.length)
              delete this.range;
            else
              this.range = $2.map(range, function(d) {
                return d.valueOf();
              });
            this.fill();
          },
          getClassNames: function(date) {
            var cls = [], year = this.viewDate.getUTCFullYear(), month = this.viewDate.getUTCMonth(), today = UTCToday();
            if (date.getUTCFullYear() < year || date.getUTCFullYear() === year && date.getUTCMonth() < month) {
              cls.push("old");
            } else if (date.getUTCFullYear() > year || date.getUTCFullYear() === year && date.getUTCMonth() > month) {
              cls.push("new");
            }
            if (this.focusDate && date.valueOf() === this.focusDate.valueOf())
              cls.push("focused");
            if (this.o.todayHighlight && isUTCEquals(date, today)) {
              cls.push("today");
            }
            if (this.dates.contains(date) !== -1)
              cls.push("active");
            if (!this.dateWithinRange(date)) {
              cls.push("disabled");
            }
            if (this.dateIsDisabled(date)) {
              cls.push("disabled", "disabled-date");
            }
            if ($2.inArray(date.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1) {
              cls.push("highlighted");
            }
            if (this.range) {
              if (date > this.range[0] && date < this.range[this.range.length - 1]) {
                cls.push("range");
              }
              if ($2.inArray(date.valueOf(), this.range) !== -1) {
                cls.push("selected");
              }
              if (date.valueOf() === this.range[0]) {
                cls.push("range-start");
              }
              if (date.valueOf() === this.range[this.range.length - 1]) {
                cls.push("range-end");
              }
            }
            return cls;
          },
          _fill_yearsView: function(selector, cssClass, factor, year, startYear, endYear, beforeFn) {
            var html = "";
            var step = factor / 10;
            var view = this.picker.find(selector);
            var startVal = Math.floor(year / factor) * factor;
            var endVal = startVal + step * 9;
            var focusedVal = Math.floor(this.viewDate.getFullYear() / step) * step;
            var selected = $2.map(this.dates, function(d) {
              return Math.floor(d.getUTCFullYear() / step) * step;
            });
            var classes, tooltip, before;
            for (var currVal = startVal - step; currVal <= endVal + step; currVal += step) {
              classes = [cssClass];
              tooltip = null;
              if (currVal === startVal - step) {
                classes.push("old");
              } else if (currVal === endVal + step) {
                classes.push("new");
              }
              if ($2.inArray(currVal, selected) !== -1) {
                classes.push("active");
              }
              if (currVal < startYear || currVal > endYear) {
                classes.push("disabled");
              }
              if (currVal === focusedVal) {
                classes.push("focused");
              }
              if (beforeFn !== $2.noop) {
                before = beforeFn(new Date(currVal, 0, 1));
                if (before === undefined2) {
                  before = {};
                } else if (typeof before === "boolean") {
                  before = { enabled: before };
                } else if (typeof before === "string") {
                  before = { classes: before };
                }
                if (before.enabled === false) {
                  classes.push("disabled");
                }
                if (before.classes) {
                  classes = classes.concat(before.classes.split(/\s+/));
                }
                if (before.tooltip) {
                  tooltip = before.tooltip;
                }
              }
              html += '<span class="' + classes.join(" ") + '"' + (tooltip ? ' title="' + tooltip + '"' : "") + ">" + currVal + "</span>";
            }
            view.find(".datepicker-switch").text(startVal + "-" + endVal);
            view.find("td").html(html);
          },
          fill: function() {
            var d = new Date(this.viewDate), year = d.getUTCFullYear(), month = d.getUTCMonth(), startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity, startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity, endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity, endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity, todaytxt = dates[this.o.language].today || dates["en"].today || "", cleartxt = dates[this.o.language].clear || dates["en"].clear || "", titleFormat = dates[this.o.language].titleFormat || dates["en"].titleFormat, todayDate = UTCToday(), titleBtnVisible = (this.o.todayBtn === true || this.o.todayBtn === "linked") && todayDate >= this.o.startDate && todayDate <= this.o.endDate && !this.weekOfDateIsDisabled(todayDate), tooltip, before;
            if (isNaN(year) || isNaN(month))
              return;
            this.picker.find(".datepicker-days .datepicker-switch").text(DPGlobal.formatDate(d, titleFormat, this.o.language));
            this.picker.find("tfoot .today").text(todaytxt).css("display", titleBtnVisible ? "table-cell" : "none");
            this.picker.find("tfoot .clear").text(cleartxt).css("display", this.o.clearBtn === true ? "table-cell" : "none");
            this.picker.find("thead .datepicker-title").text(this.o.title).css("display", typeof this.o.title === "string" && this.o.title !== "" ? "table-cell" : "none");
            this.updateNavArrows();
            this.fillMonths();
            var prevMonth = UTCDate(year, month, 0), day = prevMonth.getUTCDate();
            prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7) % 7);
            var nextMonth = new Date(prevMonth);
            if (prevMonth.getUTCFullYear() < 100) {
              nextMonth.setUTCFullYear(prevMonth.getUTCFullYear());
            }
            nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
            nextMonth = nextMonth.valueOf();
            var html = [];
            var weekDay, clsName;
            while (prevMonth.valueOf() < nextMonth) {
              weekDay = prevMonth.getUTCDay();
              if (weekDay === this.o.weekStart) {
                html.push("<tr>");
                if (this.o.calendarWeeks) {
                  var ws = new Date(+prevMonth + (this.o.weekStart - weekDay - 7) % 7 * 864e5), th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5), yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay()) % 7 * 864e5), calWeek = (th - yth) / 864e5 / 7 + 1;
                  html.push('<td class="cw">' + calWeek + "</td>");
                }
              }
              clsName = this.getClassNames(prevMonth);
              clsName.push("day");
              var content = prevMonth.getUTCDate();
              if (this.o.beforeShowDay !== $2.noop) {
                before = this.o.beforeShowDay(this._utc_to_local(prevMonth));
                if (before === undefined2)
                  before = {};
                else if (typeof before === "boolean")
                  before = { enabled: before };
                else if (typeof before === "string")
                  before = { classes: before };
                if (before.enabled === false)
                  clsName.push("disabled");
                if (before.classes)
                  clsName = clsName.concat(before.classes.split(/\s+/));
                if (before.tooltip)
                  tooltip = before.tooltip;
                if (before.content)
                  content = before.content;
              }
              if ($2.isFunction($2.uniqueSort)) {
                clsName = $2.uniqueSort(clsName);
              } else {
                clsName = $2.unique(clsName);
              }
              html.push('<td class="' + clsName.join(" ") + '"' + (tooltip ? ' title="' + tooltip + '"' : "") + ' data-date="' + prevMonth.getTime().toString() + '">' + content + "</td>");
              tooltip = null;
              if (weekDay === this.o.weekEnd) {
                html.push("</tr>");
              }
              prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
            }
            this.picker.find(".datepicker-days tbody").html(html.join(""));
            var monthsTitle = dates[this.o.language].monthsTitle || dates["en"].monthsTitle || "Months";
            var months = this.picker.find(".datepicker-months").find(".datepicker-switch").text(this.o.maxViewMode < 2 ? monthsTitle : year).end().find("tbody span").removeClass("active");
            $2.each(this.dates, function(i, d2) {
              if (d2.getUTCFullYear() === year)
                months.eq(d2.getUTCMonth()).addClass("active");
            });
            if (year < startYear || year > endYear) {
              months.addClass("disabled");
            }
            if (year === startYear) {
              months.slice(0, startMonth).addClass("disabled");
            }
            if (year === endYear) {
              months.slice(endMonth + 1).addClass("disabled");
            }
            if (this.o.beforeShowMonth !== $2.noop) {
              var that = this;
              $2.each(months, function(i, month2) {
                var moDate = new Date(year, i, 1);
                var before2 = that.o.beforeShowMonth(moDate);
                if (before2 === undefined2)
                  before2 = {};
                else if (typeof before2 === "boolean")
                  before2 = { enabled: before2 };
                else if (typeof before2 === "string")
                  before2 = { classes: before2 };
                if (before2.enabled === false && !$2(month2).hasClass("disabled"))
                  $2(month2).addClass("disabled");
                if (before2.classes)
                  $2(month2).addClass(before2.classes);
                if (before2.tooltip)
                  $2(month2).prop("title", before2.tooltip);
              });
            }
            this._fill_yearsView(
              ".datepicker-years",
              "year",
              10,
              year,
              startYear,
              endYear,
              this.o.beforeShowYear
            );
            this._fill_yearsView(
              ".datepicker-decades",
              "decade",
              100,
              year,
              startYear,
              endYear,
              this.o.beforeShowDecade
            );
            this._fill_yearsView(
              ".datepicker-centuries",
              "century",
              1e3,
              year,
              startYear,
              endYear,
              this.o.beforeShowCentury
            );
          },
          updateNavArrows: function() {
            if (!this._allow_update)
              return;
            var d = new Date(this.viewDate), year = d.getUTCFullYear(), month = d.getUTCMonth(), startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity, startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity, endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity, endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity, prevIsDisabled, nextIsDisabled, factor = 1;
            switch (this.viewMode) {
              case 4:
                factor *= 10;
              case 3:
                factor *= 10;
              case 2:
                factor *= 10;
              case 1:
                prevIsDisabled = Math.floor(year / factor) * factor <= startYear;
                nextIsDisabled = Math.floor(year / factor) * factor + factor > endYear;
                break;
              case 0:
                prevIsDisabled = year <= startYear && month <= startMonth;
                nextIsDisabled = year >= endYear && month >= endMonth;
                break;
            }
            this.picker.find(".prev").toggleClass("disabled", prevIsDisabled);
            this.picker.find(".next").toggleClass("disabled", nextIsDisabled);
          },
          click: function(e) {
            e.preventDefault();
            e.stopPropagation();
            var target, dir, day, year, month;
            target = $2(e.target);
            if (target.hasClass("datepicker-switch") && this.viewMode !== this.o.maxViewMode) {
              this.setViewMode(this.viewMode + 1);
            }
            if (target.hasClass("today") && !target.hasClass("day")) {
              this.setViewMode(0);
              this._setDate(UTCToday(), this.o.todayBtn === "linked" ? null : "view");
            }
            if (target.hasClass("clear")) {
              this.clearDates();
            }
            if (!target.hasClass("disabled")) {
              if (target.hasClass("month") || target.hasClass("year") || target.hasClass("decade") || target.hasClass("century")) {
                this.viewDate.setUTCDate(1);
                day = 1;
                if (this.viewMode === 1) {
                  month = target.parent().find("span").index(target);
                  year = this.viewDate.getUTCFullYear();
                  this.viewDate.setUTCMonth(month);
                } else {
                  month = 0;
                  year = Number(target.text());
                  this.viewDate.setUTCFullYear(year);
                }
                this._trigger(DPGlobal.viewModes[this.viewMode - 1].e, this.viewDate);
                if (this.viewMode === this.o.minViewMode) {
                  this._setDate(UTCDate(year, month, day));
                } else {
                  this.setViewMode(this.viewMode - 1);
                  this.fill();
                }
              }
            }
            if (this.picker.is(":visible") && this._focused_from) {
              this._focused_from.focus();
            }
            delete this._focused_from;
          },
          dayCellClick: function(e) {
            var $target = $2(e.currentTarget);
            var timestamp = $target.data("date");
            var date = new Date(timestamp);
            if (this.o.updateViewDate) {
              if (date.getUTCFullYear() !== this.viewDate.getUTCFullYear()) {
                this._trigger("changeYear", this.viewDate);
              }
              if (date.getUTCMonth() !== this.viewDate.getUTCMonth()) {
                this._trigger("changeMonth", this.viewDate);
              }
            }
            this._setDate(date);
          },
          // Clicked on prev or next
          navArrowsClick: function(e) {
            var $target = $2(e.currentTarget);
            var dir = $target.hasClass("prev") ? -1 : 1;
            if (this.viewMode !== 0) {
              dir *= DPGlobal.viewModes[this.viewMode].navStep * 12;
            }
            this.viewDate = this.moveMonth(this.viewDate, dir);
            this._trigger(DPGlobal.viewModes[this.viewMode].e, this.viewDate);
            this.fill();
          },
          _toggle_multidate: function(date) {
            var ix = this.dates.contains(date);
            if (!date) {
              this.dates.clear();
            }
            if (ix !== -1) {
              if (this.o.multidate === true || this.o.multidate > 1 || this.o.toggleActive) {
                this.dates.remove(ix);
              }
            } else if (this.o.multidate === false) {
              this.dates.clear();
              this.dates.push(date);
            } else {
              this.dates.push(date);
            }
            if (typeof this.o.multidate === "number")
              while (this.dates.length > this.o.multidate)
                this.dates.remove(0);
          },
          _setDate: function(date, which) {
            if (!which || which === "date")
              this._toggle_multidate(date && new Date(date));
            if (!which && this.o.updateViewDate || which === "view")
              this.viewDate = date && new Date(date);
            this.fill();
            this.setValue();
            if (!which || which !== "view") {
              this._trigger("changeDate");
            }
            this.inputField.trigger("change");
            if (this.o.autoclose && (!which || which === "date")) {
              this.hide();
            }
          },
          moveDay: function(date, dir) {
            var newDate = new Date(date);
            newDate.setUTCDate(date.getUTCDate() + dir);
            return newDate;
          },
          moveWeek: function(date, dir) {
            return this.moveDay(date, dir * 7);
          },
          moveMonth: function(date, dir) {
            if (!isValidDate(date))
              return this.o.defaultViewDate;
            if (!dir)
              return date;
            var new_date = new Date(date.valueOf()), day = new_date.getUTCDate(), month = new_date.getUTCMonth(), mag = Math.abs(dir), new_month, test;
            dir = dir > 0 ? 1 : -1;
            if (mag === 1) {
              test = dir === -1 ? function() {
                return new_date.getUTCMonth() === month;
              } : function() {
                return new_date.getUTCMonth() !== new_month;
              };
              new_month = month + dir;
              new_date.setUTCMonth(new_month);
              new_month = (new_month + 12) % 12;
            } else {
              for (var i = 0; i < mag; i++)
                new_date = this.moveMonth(new_date, dir);
              new_month = new_date.getUTCMonth();
              new_date.setUTCDate(day);
              test = function() {
                return new_month !== new_date.getUTCMonth();
              };
            }
            while (test()) {
              new_date.setUTCDate(--day);
              new_date.setUTCMonth(new_month);
            }
            return new_date;
          },
          moveYear: function(date, dir) {
            return this.moveMonth(date, dir * 12);
          },
          moveAvailableDate: function(date, dir, fn2) {
            do {
              date = this[fn2](date, dir);
              if (!this.dateWithinRange(date))
                return false;
              fn2 = "moveDay";
            } while (this.dateIsDisabled(date));
            return date;
          },
          weekOfDateIsDisabled: function(date) {
            return $2.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1;
          },
          dateIsDisabled: function(date) {
            return this.weekOfDateIsDisabled(date) || $2.grep(this.o.datesDisabled, function(d) {
              return isUTCEquals(date, d);
            }).length > 0;
          },
          dateWithinRange: function(date) {
            return date >= this.o.startDate && date <= this.o.endDate;
          },
          keydown: function(e) {
            if (!this.picker.is(":visible")) {
              if (e.keyCode === 40 || e.keyCode === 27) {
                this.show();
                e.stopPropagation();
              }
              return;
            }
            var dateChanged = false, dir, newViewDate, focusDate = this.focusDate || this.viewDate;
            switch (e.keyCode) {
              case 27:
                if (this.focusDate) {
                  this.focusDate = null;
                  this.viewDate = this.dates.get(-1) || this.viewDate;
                  this.fill();
                } else
                  this.hide();
                e.preventDefault();
                e.stopPropagation();
                break;
              case 37:
              case 38:
              case 39:
              case 40:
                if (!this.o.keyboardNavigation || this.o.daysOfWeekDisabled.length === 7)
                  break;
                dir = e.keyCode === 37 || e.keyCode === 38 ? -1 : 1;
                if (this.viewMode === 0) {
                  if (e.ctrlKey) {
                    newViewDate = this.moveAvailableDate(focusDate, dir, "moveYear");
                    if (newViewDate)
                      this._trigger("changeYear", this.viewDate);
                  } else if (e.shiftKey) {
                    newViewDate = this.moveAvailableDate(focusDate, dir, "moveMonth");
                    if (newViewDate)
                      this._trigger("changeMonth", this.viewDate);
                  } else if (e.keyCode === 37 || e.keyCode === 39) {
                    newViewDate = this.moveAvailableDate(focusDate, dir, "moveDay");
                  } else if (!this.weekOfDateIsDisabled(focusDate)) {
                    newViewDate = this.moveAvailableDate(focusDate, dir, "moveWeek");
                  }
                } else if (this.viewMode === 1) {
                  if (e.keyCode === 38 || e.keyCode === 40) {
                    dir = dir * 4;
                  }
                  newViewDate = this.moveAvailableDate(focusDate, dir, "moveMonth");
                } else if (this.viewMode === 2) {
                  if (e.keyCode === 38 || e.keyCode === 40) {
                    dir = dir * 4;
                  }
                  newViewDate = this.moveAvailableDate(focusDate, dir, "moveYear");
                }
                if (newViewDate) {
                  this.focusDate = this.viewDate = newViewDate;
                  this.setValue();
                  this.fill();
                  e.preventDefault();
                }
                break;
              case 13:
                if (!this.o.forceParse)
                  break;
                focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;
                if (this.o.keyboardNavigation) {
                  this._toggle_multidate(focusDate);
                  dateChanged = true;
                }
                this.focusDate = null;
                this.viewDate = this.dates.get(-1) || this.viewDate;
                this.setValue();
                this.fill();
                if (this.picker.is(":visible")) {
                  e.preventDefault();
                  e.stopPropagation();
                  if (this.o.autoclose)
                    this.hide();
                }
                break;
              case 9:
                this.focusDate = null;
                this.viewDate = this.dates.get(-1) || this.viewDate;
                this.fill();
                this.hide();
                break;
            }
            if (dateChanged) {
              if (this.dates.length)
                this._trigger("changeDate");
              else
                this._trigger("clearDate");
              this.inputField.trigger("change");
            }
          },
          setViewMode: function(viewMode) {
            this.viewMode = viewMode;
            this.picker.children("div").hide().filter(".datepicker-" + DPGlobal.viewModes[this.viewMode].clsName).show();
            this.updateNavArrows();
            this._trigger("changeViewMode", new Date(this.viewDate));
          }
        };
        var DateRangePicker = function(element, options) {
          $2.data(element, "datepicker", this);
          this.element = $2(element);
          this.inputs = $2.map(options.inputs, function(i) {
            return i.jquery ? i[0] : i;
          });
          delete options.inputs;
          this.keepEmptyValues = options.keepEmptyValues;
          delete options.keepEmptyValues;
          datepickerPlugin.call($2(this.inputs), options).on("changeDate", $2.proxy(this.dateUpdated, this));
          this.pickers = $2.map(this.inputs, function(i) {
            return $2.data(i, "datepicker");
          });
          this.updateDates();
        };
        DateRangePicker.prototype = {
          updateDates: function() {
            this.dates = $2.map(this.pickers, function(i) {
              return i.getUTCDate();
            });
            this.updateRanges();
          },
          updateRanges: function() {
            var range = $2.map(this.dates, function(d) {
              return d.valueOf();
            });
            $2.each(this.pickers, function(i, p) {
              p.setRange(range);
            });
          },
          clearDates: function() {
            $2.each(this.pickers, function(i, p) {
              p.clearDates();
            });
          },
          dateUpdated: function(e) {
            if (this.updating)
              return;
            this.updating = true;
            var dp = $2.data(e.target, "datepicker");
            if (dp === undefined2) {
              return;
            }
            var new_date = dp.getUTCDate(), keep_empty_values = this.keepEmptyValues, i = $2.inArray(e.target, this.inputs), j = i - 1, k = i + 1, l = this.inputs.length;
            if (i === -1)
              return;
            $2.each(this.pickers, function(i2, p) {
              if (!p.getUTCDate() && (p === dp || !keep_empty_values))
                p.setUTCDate(new_date);
            });
            if (new_date < this.dates[j]) {
              while (j >= 0 && new_date < this.dates[j]) {
                this.pickers[j--].setUTCDate(new_date);
              }
            } else if (new_date > this.dates[k]) {
              while (k < l && new_date > this.dates[k]) {
                this.pickers[k++].setUTCDate(new_date);
              }
            }
            this.updateDates();
            delete this.updating;
          },
          destroy: function() {
            $2.map(this.pickers, function(p) {
              p.destroy();
            });
            $2(this.inputs).off("changeDate", this.dateUpdated);
            delete this.element.data().datepicker;
          },
          remove: alias("destroy", "Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead")
        };
        function opts_from_el(el, prefix) {
          var data = $2(el).data(), out = {}, inkey, replace = new RegExp("^" + prefix.toLowerCase() + "([A-Z])");
          prefix = new RegExp("^" + prefix.toLowerCase());
          function re_lower(_, a) {
            return a.toLowerCase();
          }
          for (var key in data)
            if (prefix.test(key)) {
              inkey = key.replace(replace, re_lower);
              out[inkey] = data[key];
            }
          return out;
        }
        function opts_from_locale(lang) {
          var out = {};
          if (!dates[lang]) {
            lang = lang.split("-")[0];
            if (!dates[lang])
              return;
          }
          var d = dates[lang];
          $2.each(locale_opts, function(i, k) {
            if (k in d)
              out[k] = d[k];
          });
          return out;
        }
        var old = $2.fn.datepicker;
        var datepickerPlugin = function(option) {
          var args = Array.apply(null, arguments);
          args.shift();
          var internal_return;
          this.each(function() {
            var $this = $2(this), data = $this.data("datepicker"), options = typeof option === "object" && option;
            if (!data) {
              var elopts = opts_from_el(this, "date"), xopts = $2.extend({}, defaults, elopts, options), locopts = opts_from_locale(xopts.language), opts = $2.extend({}, defaults, locopts, elopts, options);
              if ($this.hasClass("input-daterange") || opts.inputs) {
                $2.extend(opts, {
                  inputs: opts.inputs || $this.find("input").toArray()
                });
                data = new DateRangePicker(this, opts);
              } else {
                data = new Datepicker(this, opts);
              }
              $this.data("datepicker", data);
            }
            if (typeof option === "string" && typeof data[option] === "function") {
              internal_return = data[option].apply(data, args);
            }
          });
          if (internal_return === undefined2 || internal_return instanceof Datepicker || internal_return instanceof DateRangePicker)
            return this;
          if (this.length > 1)
            throw new Error("Using only allowed for the collection of a single element (" + option + " function)");
          else
            return internal_return;
        };
        $2.fn.datepicker = datepickerPlugin;
        var defaults = $2.fn.datepicker.defaults = {
          assumeNearbyYear: false,
          autoclose: false,
          beforeShowDay: $2.noop,
          beforeShowMonth: $2.noop,
          beforeShowYear: $2.noop,
          beforeShowDecade: $2.noop,
          beforeShowCentury: $2.noop,
          calendarWeeks: false,
          clearBtn: false,
          toggleActive: false,
          daysOfWeekDisabled: [],
          daysOfWeekHighlighted: [],
          datesDisabled: [],
          endDate: Infinity,
          forceParse: true,
          format: "mm/dd/yyyy",
          keepEmptyValues: false,
          keyboardNavigation: true,
          language: "en",
          minViewMode: 0,
          maxViewMode: 4,
          multidate: false,
          multidateSeparator: ",",
          orientation: "auto",
          rtl: false,
          startDate: -Infinity,
          startView: 0,
          todayBtn: false,
          todayHighlight: false,
          updateViewDate: true,
          weekStart: 0,
          disableTouchKeyboard: false,
          enableOnReadonly: true,
          showOnFocus: true,
          zIndexOffset: 10,
          container: "body",
          immediateUpdates: false,
          title: "",
          templates: {
            leftArrow: "&#x00AB;",
            rightArrow: "&#x00BB;"
          },
          showWeekDays: true
        };
        var locale_opts = $2.fn.datepicker.locale_opts = [
          "format",
          "rtl",
          "weekStart"
        ];
        $2.fn.datepicker.Constructor = Datepicker;
        var dates = $2.fn.datepicker.dates = {
          en: {
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            today: "Today",
            clear: "Clear",
            titleFormat: "MM yyyy"
          }
        };
        var DPGlobal = {
          viewModes: [
            {
              names: ["days", "month"],
              clsName: "days",
              e: "changeMonth"
            },
            {
              names: ["months", "year"],
              clsName: "months",
              e: "changeYear",
              navStep: 1
            },
            {
              names: ["years", "decade"],
              clsName: "years",
              e: "changeDecade",
              navStep: 10
            },
            {
              names: ["decades", "century"],
              clsName: "decades",
              e: "changeCentury",
              navStep: 100
            },
            {
              names: ["centuries", "millennium"],
              clsName: "centuries",
              e: "changeMillennium",
              navStep: 1e3
            }
          ],
          validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
          nonpunctuation: /[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,
          parseFormat: function(format2) {
            if (typeof format2.toValue === "function" && typeof format2.toDisplay === "function")
              return format2;
            var separators = format2.replace(this.validParts, "\0").split("\0"), parts = format2.match(this.validParts);
            if (!separators || !separators.length || !parts || parts.length === 0) {
              throw new Error("Invalid date format.");
            }
            return { separators, parts };
          },
          parseDate: function(date, format2, language, assumeNearby) {
            if (!date)
              return undefined2;
            if (date instanceof Date)
              return date;
            if (typeof format2 === "string")
              format2 = DPGlobal.parseFormat(format2);
            if (format2.toValue)
              return format2.toValue(date, format2, language);
            var fn_map = {
              d: "moveDay",
              m: "moveMonth",
              w: "moveWeek",
              y: "moveYear"
            }, dateAliases = {
              yesterday: "-1d",
              today: "+0d",
              tomorrow: "+1d"
            }, parts, part, dir, i, fn2;
            if (date in dateAliases) {
              date = dateAliases[date];
            }
            if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/i.test(date)) {
              parts = date.match(/([\-+]\d+)([dmwy])/gi);
              date = /* @__PURE__ */ new Date();
              for (i = 0; i < parts.length; i++) {
                part = parts[i].match(/([\-+]\d+)([dmwy])/i);
                dir = Number(part[1]);
                fn2 = fn_map[part[2].toLowerCase()];
                date = Datepicker.prototype[fn2](date, dir);
              }
              return Datepicker.prototype._zero_utc_time(date);
            }
            parts = date && date.match(this.nonpunctuation) || [];
            function applyNearbyYear(year, threshold) {
              if (threshold === true)
                threshold = 10;
              if (year < 100) {
                year += 2e3;
                if (year > (/* @__PURE__ */ new Date()).getFullYear() + threshold) {
                  year -= 100;
                }
              }
              return year;
            }
            var parsed = {}, setters_order = ["yyyy", "yy", "M", "MM", "m", "mm", "d", "dd"], setters_map = {
              yyyy: function(d, v) {
                return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v);
              },
              m: function(d, v) {
                if (isNaN(d))
                  return d;
                v -= 1;
                while (v < 0)
                  v += 12;
                v %= 12;
                d.setUTCMonth(v);
                while (d.getUTCMonth() !== v)
                  d.setUTCDate(d.getUTCDate() - 1);
                return d;
              },
              d: function(d, v) {
                return d.setUTCDate(v);
              }
            }, val, filtered;
            setters_map["yy"] = setters_map["yyyy"];
            setters_map["M"] = setters_map["MM"] = setters_map["mm"] = setters_map["m"];
            setters_map["dd"] = setters_map["d"];
            date = UTCToday();
            var fparts = format2.parts.slice();
            if (parts.length !== fparts.length) {
              fparts = $2(fparts).filter(function(i2, p) {
                return $2.inArray(p, setters_order) !== -1;
              }).toArray();
            }
            function match_part() {
              var m = this.slice(0, parts[i].length), p = parts[i].slice(0, m.length);
              return m.toLowerCase() === p.toLowerCase();
            }
            if (parts.length === fparts.length) {
              var cnt;
              for (i = 0, cnt = fparts.length; i < cnt; i++) {
                val = parseInt(parts[i], 10);
                part = fparts[i];
                if (isNaN(val)) {
                  switch (part) {
                    case "MM":
                      filtered = $2(dates[language].months).filter(match_part);
                      val = $2.inArray(filtered[0], dates[language].months) + 1;
                      break;
                    case "M":
                      filtered = $2(dates[language].monthsShort).filter(match_part);
                      val = $2.inArray(filtered[0], dates[language].monthsShort) + 1;
                      break;
                  }
                }
                parsed[part] = val;
              }
              var _date, s;
              for (i = 0; i < setters_order.length; i++) {
                s = setters_order[i];
                if (s in parsed && !isNaN(parsed[s])) {
                  _date = new Date(date);
                  setters_map[s](_date, parsed[s]);
                  if (!isNaN(_date))
                    date = _date;
                }
              }
            }
            return date;
          },
          formatDate: function(date, format2, language) {
            if (!date)
              return "";
            if (typeof format2 === "string")
              format2 = DPGlobal.parseFormat(format2);
            if (format2.toDisplay)
              return format2.toDisplay(date, format2, language);
            var val = {
              d: date.getUTCDate(),
              D: dates[language].daysShort[date.getUTCDay()],
              DD: dates[language].days[date.getUTCDay()],
              m: date.getUTCMonth() + 1,
              M: dates[language].monthsShort[date.getUTCMonth()],
              MM: dates[language].months[date.getUTCMonth()],
              yy: date.getUTCFullYear().toString().substring(2),
              yyyy: date.getUTCFullYear()
            };
            val.dd = (val.d < 10 ? "0" : "") + val.d;
            val.mm = (val.m < 10 ? "0" : "") + val.m;
            date = [];
            var seps = $2.extend([], format2.separators);
            for (var i = 0, cnt = format2.parts.length; i <= cnt; i++) {
              if (seps.length)
                date.push(seps.shift());
              date.push(val[format2.parts[i]]);
            }
            return date.join("");
          },
          headTemplate: '<thead><tr><th colspan="7" class="datepicker-title"></th></tr><tr><th class="prev">' + defaults.templates.leftArrow + '</th><th colspan="5" class="datepicker-switch"></th><th class="next">' + defaults.templates.rightArrow + "</th></tr></thead>",
          contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
          footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
        };
        DPGlobal.template = '<div class="datepicker"><div class="datepicker-days"><table class="table-condensed">' + DPGlobal.headTemplate + "<tbody></tbody>" + DPGlobal.footTemplate + '</table></div><div class="datepicker-months"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table></div><div class="datepicker-years"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table></div><div class="datepicker-decades"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table></div><div class="datepicker-centuries"><table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + "</table></div></div>";
        $2.fn.datepicker.DPGlobal = DPGlobal;
        $2.fn.datepicker.noConflict = function() {
          $2.fn.datepicker = old;
          return this;
        };
        $2.fn.datepicker.version = "1.9.0";
        $2.fn.datepicker.deprecated = function(msg) {
          var console2 = window.console;
          if (console2 && console2.warn) {
            console2.warn("DEPRECATED: " + msg);
          }
        };
        $2(document).on(
          "focus.datepicker.data-api click.datepicker.data-api",
          '[data-provide="datepicker"]',
          function(e) {
            var $this = $2(this);
            if ($this.data("datepicker"))
              return;
            e.preventDefault();
            datepickerPlugin.call($this, "show");
          }
        );
        $2(function() {
          datepickerPlugin.call($2('[data-provide="datepicker-inline"]'));
        });
      });
    }
  });

  // app/javascript/src/add_additional_expense.js
  var require_add_additional_expense = __commonJS({
    "app/javascript/src/add_additional_expense.js"() {
      function showAdditionalExpense() {
        for (let i = 1; i < 10; i++) {
          if ($(`#case_contact_additional_expenses_attributes_${i}_other_expense_amount`).is(":hidden")) {
            $(`#expense${i + 1}`).wrap("<li></li>");
            $(`#case_contact_additional_expenses_attributes_${i}_other_expense_amount`).show();
            $(`#case_contact_additional_expenses_attributes_${i}_other_expenses_describe`).show();
            break;
          }
        }
      }
      $(document).on("click", "#add-another-expense", function() {
        showAdditionalExpense();
      });
    }
  });

  // node_modules/add2calendar/js/add2calendar.js
  var require_add2calendar = __commonJS({
    "node_modules/add2calendar/js/add2calendar.js"(exports, module) {
      var Add2Calendar = function(eventData) {
        this.hasClass = function(ele, cls) {
          return (" " + ele.className + " ").indexOf(" " + cls + " ") > -1;
        };
        this.mergeObj = function(obj1, obj2) {
          var result = {};
          for (var attr1 in obj1) {
            result[attr1] = obj1[attr1];
          }
          for (var attr2 in obj2) {
            result[attr2] = obj2[attr2];
          }
          return result;
        };
        this.pad = function(number, size) {
          var num = number.toString();
          while (num.length < size)
            num = "0" + num;
          return num;
        };
        this.formatTime = function(date) {
          return date.toISOString().replace(/-|:|\.\d+/g, "");
        };
        this.formatTime2 = function(date) {
          return this.pad(date.getFullYear(), 4) + this.pad(date.getMonth() + 1, 2) + this.pad(date.getDate(), 2);
        };
        this.isValidEventData = function(eventData2) {
          if (this.isSingleEvent) {
            return true;
          } else {
            if (eventData2.length > 0) {
              return true;
            }
          }
          return false;
        };
        this.isObjectType = function(obj, type) {
          return Object.prototype.toString.call(obj) === "[object " + type + "]";
        };
        this.isDateObject = function(obj) {
          return this.isObjectType(obj, "Date");
        };
        this.isArray = function(obj) {
          return this.isObjectType(obj, "Array");
        };
        this.isFunc = function(obj) {
          return this.isObjectType(obj, "Function");
        };
        this.serialize = function(obj) {
          var str = [];
          for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
              str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
            }
          }
          return str.join("&");
        };
        this.replaceSpecialCharacterAndSpaceWithHyphen = function(str) {
          return str.replace(/([~!@#$%^&*()_+=`{}\[\]\|\\:;'<>,.\/? ])+/g, "-").replace(/^(-)+|(-)+$/g, "");
        };
        this.getLinkHtml = function(text, url, customClass, isEnableDownloadAttr, uniqueId) {
          if (typeof isEnableDownloadAttr === "undefined") {
            isEnableDownloadAttr = false;
          }
          if (typeof uniqueId === "undefined") {
            uniqueId = this.getCurrentUtcTimestamp();
          }
          var downloadAttr = "";
          if (isEnableDownloadAttr) {
            var fileName = "add2Calendar-" + this.replaceSpecialCharacterAndSpaceWithHyphen(text).toLowerCase() + "-" + uniqueId;
            downloadAttr = ' download="' + fileName + '" ';
          }
          return "<a " + downloadAttr + ' class="' + customClass + '" target="_blank" href="' + url + '">' + text + "</a>";
        };
        this.getLiHtml = function(text, url, customClass, isEnableDownloadAttr, uniqueId) {
          var result = "", isValid = false;
          if (url) {
            if (customClass === "ical" || customClass === "outlook") {
              isValid = true;
            } else {
              var urlLength = url.length;
              if (urlLength <= 2e4) {
                isValid = true;
              } else {
                console.log("Url longer than 2000");
              }
            }
          }
          if (isValid) {
            var linkHtml = this.getLinkHtml(text, url, "icon-" + customClass, isEnableDownloadAttr, uniqueId);
            result = '<li class="a2cldr-item a2cldr-' + customClass + '">' + linkHtml + "</li>";
          }
          return result;
        };
        this.getCurrentUtcTimestamp = function() {
          return Date.now();
        };
        this.updateGoogleUrl = function() {
          if (this.isSingleEvent) {
            var startDate = this.eventData.isAllDay ? this.formatTime2(new Date(this.eventData.start)) : this.formatTime(new Date(this.eventData.start));
            var endDate = this.eventData.isAllDay ? this.formatTime2(new Date(this.eventData.end)) : this.formatTime(new Date(this.eventData.end));
            var googleArgs = {
              "text": this.eventData.title || "",
              "dates": startDate + "/" + endDate,
              "location": this.eventData.location || "",
              "details": this.eventData.description || "",
              "ctz": this.eventData.timezone || "",
              "locale": this.eventData.locale || "",
              "sprop": ""
            };
            this.googleUrl = "https://www.google.com/calendar/render?action=TEMPLATE&" + this.serialize(googleArgs);
          }
          return this.googleUrl;
        };
        this.getGoogleUrl = function() {
          return this.googleUrl;
        };
        this.getGoogleLiHtml = function() {
          return this.getLiHtml("Google", this.googleUrl, "google");
        };
        this.openGoogle = function() {
          window.open(this.googleUrl);
        };
        this.updateICalUrl = function() {
          var url = typeof document !== "undefined" ? document.URL : "";
          var startDate = "";
          var endDate = "";
          if (this.isSingleEvent) {
            startDate = this.eventData.isAllDay ? this.formatTime2(new Date(this.eventData.start)) : this.formatTime(new Date(this.eventData.start));
            endDate = this.eventData.isAllDay ? this.formatTime2(new Date(this.eventData.end)) : this.formatTime(new Date(this.eventData.end));
            this.iCalUrl = encodeURI(
              "data:text/calendar;charset=utf8," + [
                "BEGIN:VCALENDAR",
                "VERSION:2.0",
                "BEGIN:VEVENT",
                "URL:" + url,
                "DTSTART:" + startDate,
                "DTEND:" + endDate,
                "SUMMARY:" + (this.eventData.title || ""),
                "DESCRIPTION:" + (this.eventData.description || ""),
                "LOCATION:" + (this.eventData.location || ""),
                "END:VEVENT",
                "END:VCALENDAR"
              ].join("\n")
            );
          } else {
            var i = 0, n = this.eventData.length;
            var iCalData = [];
            for (i = 0; i < n; i++) {
              var data = this.eventData[i];
              startDate = this.eventData.isAllDay ? this.formatTime2(new Date(data.start)) : this.formatTime(new Date(data.start));
              endDate = this.eventData.isAllDay ? this.formatTime2(new Date(data.end)) : this.formatTime(new Date(data.end));
              var tmp = [
                "BEGIN:VEVENT",
                "URL:" + url,
                "DTSTART:" + startDate,
                "DTEND:" + endDate,
                "SUMMARY:" + (data.title || ""),
                "DESCRIPTION:" + (data.description || ""),
                "LOCATION:" + (data.location || ""),
                "END:VEVENT"
              ];
              iCalData = iCalData.concat(tmp);
            }
            var iCalDataBegin = [
              "BEGIN:VCALENDAR",
              "VERSION:2.0"
            ];
            var iCalDataAfter = [
              "END:VCALENDAR"
            ];
            iCalData = iCalDataBegin.concat(iCalData, iCalDataAfter).join("\n");
            this.iCalUrl = encodeURI("data:text/calendar;charset=utf8," + iCalData);
          }
          this.iCalUrl = this.iCalUrl.replace(/#/g, "%23");
          return this.iCalUrl;
        };
        this.getICalUrl = function() {
          return this.iCalUrl;
        };
        this.getICalLiHtml = function() {
          return this.getLiHtml("iCal", this.iCalUrl, "ical", true);
        };
        this.openICal = function() {
          window.open(this.iCalUrl);
        };
        this.getOutlookUrl = function() {
          return this.iCalUrl;
        };
        this.getOutlookLiHtml = function() {
          return this.getLiHtml("Outlook", this.iCalUrl, "outlook", true);
        };
        this.openOutlook = function() {
          window.open(this.iCalUrl);
        };
        this.updateOutlookOnlineUrl = function() {
          if (this.isSingleEvent) {
            var startDate = new Date(this.eventData.start), endDate = new Date(this.eventData.end);
            var startDateTimezoneOffset = startDate.getTimezoneOffset();
            startDate.setMinutes(startDate.getMinutes() - 2 * startDateTimezoneOffset);
            var endDateTimezoneOffset = endDate.getTimezoneOffset();
            endDate.setMinutes(endDate.getMinutes() - endDateTimezoneOffset);
            startDate = this.formatTime(startDate).slice(0, -1);
            endDate = this.formatTime(endDate).slice(0, -1);
            var outlookOnlineArgs = {
              "summary": this.eventData.title || "",
              "dtstart": startDate,
              "dtend": endDate,
              "location": this.eventData.location || "",
              "description": this.eventData.description || ""
            };
            this.outlookOnlineUrl = "http://calendar.live.com/calendar/calendar.aspx?rru=addevent&" + this.serialize(outlookOnlineArgs);
          }
          return this.outlookOnlineUrl;
        };
        this.getOutlookOnlineUrl = function() {
          return this.outlookOnlineUrl;
        };
        this.getOutlookOnlineLiHtml = function() {
          return this.getLiHtml("Outlook Online", this.outlookOnlineUrl, "outlook-online");
        };
        this.openOutlookOnline = function() {
          window.open(this.outlookOnlineUrl);
        };
        this.updateYahooUrl = function() {
          if (this.isSingleEvent) {
            var startDate = new Date(this.eventData.start);
            startDate.setMinutes(startDate.getMinutes() - startDate.getTimezoneOffset());
            var startDateStr = this.formatTime(startDate);
            var endDate = new Date(this.eventData.end);
            endDate.setMinutes(endDate.getMinutes() - endDate.getTimezoneOffset());
            var endDateStr = this.formatTime(endDate);
            var yahooArgs = {
              "view": "d",
              "type": "20",
              "title": this.eventData.title || "",
              "st": startDateStr,
              "et": endDateStr,
              "in_loc": this.eventData.location || "",
              "desc": this.eventData.description || ""
            };
            if (this.eventData.isAllDay) {
              yahooArgs.dur = "allday";
            }
            this.yahooUrl = "https://calendar.yahoo.com/?v=60&" + this.serialize(yahooArgs);
          }
          return this.yahooUrl;
        };
        this.getYahooUrl = function() {
          return this.yahooUrl;
        };
        this.getYahooLiHtml = function() {
          return this.getLiHtml("Yahoo!", this.yahooUrl, "yahoo");
        };
        this.openYahoo = function() {
          window.open(this.yahooUrl);
        };
        this.getEventListHtml = function() {
          var html = '<ul class="a2cldr-list">';
          html += this.getEventListItemsHtml();
          html += "</ul>";
          return html;
        };
        this.getEventListItemsHtml = function() {
          var html = "";
          html += this.getGoogleLiHtml();
          html += this.getICalLiHtml();
          html += this.getOutlookLiHtml();
          html += this.getOutlookOnlineLiHtml();
          html += this.getYahooLiHtml();
          return html;
        };
        this.getEventNotFoundListHtml = function() {
          var html = '<ul class="a2cldr-list">';
          html += this.getEventNotFoundListItemsHtml();
          html += "</ul>";
          return html;
        };
        this.getEventNotFoundListItemsHtml = function() {
          var html = "";
          html += '<li class="a2cldr-item a2cldr-not-found">';
          html += '<span class="not-found" href="javascript:;">Not Found</span>';
          html += "</li>";
          return html;
        };
        this.getWidgetNode = function() {
          var html = '<button class="a2cldr-btn" type="button">';
          html += this.getWidgetBtnText();
          html += "</button>";
          html += this.getEventListHtml();
          var result = document.createElement("div");
          result.innerHTML = html;
          result.className = this.textDomain;
          return result;
        };
        this.getWidgetBtnText = function() {
          var result = this.option.buttonText ? this.option.buttonText : this.add2calendarBtnTextMap[this.option.lang];
          return result;
        };
        this.createWidget = function(selector, cb) {
          this.selector = selector;
          this.eWidget = document.querySelector(selector);
          var node = this.getWidgetNode();
          this.eWidget.appendChild(node);
          this.eButton = document.querySelector(selector + " > .a2cldr > .a2cldr-btn");
          this.bindClickEvent();
          if (this.isFunc(cb)) {
            cb();
          }
        };
        this.bindClickEvent = function() {
          var activeClassName = "active";
          var self2 = this;
          var ele = this.eButton;
          ele.onclick = function() {
            var parent = ele.parentNode;
            if (self2.hasClass(parent, activeClassName)) {
              parent.classList.remove(activeClassName);
            } else {
              parent.classList.add(activeClassName);
            }
          };
        };
        this.unBindClickEvent = function() {
          if (this.eButton && this.eButton.onclick) {
            this.eButton.onclick = null;
          }
        };
        this.setOption = function(option) {
          this.userOption = option;
          this.option = this.mergeObj(this.defaultOption, this.userOption);
        };
        this.resetOption = function() {
          this.option = this.defaultOption;
        };
        this.update = function(eventData2) {
          this.init(eventData2);
        };
        this.updateWidget = function(eventData2, cb) {
          this.update(eventData2);
          var ele = document.querySelector(this.selector + " .a2cldr-list");
          ele.innerHTML = this.getEventListItemsHtml();
          if (this.isFunc(cb)) {
            cb();
          }
        };
        this.textDomain = "a2cldr";
        this.add2calendarBtnTextMap = {
          "en": "Add to Calendar",
          "th": "\u0E40\u0E1E\u0E34\u0E48\u0E21\u0E40\u0E02\u0E49\u0E32\u0E1B\u0E0F\u0E34\u0E17\u0E34\u0E19",
          "jp": "\u30AB\u30EC\u30F3\u30C0\u30FC\u306B\u8FFD\u52A0",
          "kr": "\uCE98\uB9B0\uB354\uC5D0 \uCD94\uAC00",
          "ja": "\u30AB\u30EC\u30F3\u30C0\u30FC\u306B\u8FFD\u52A0",
          "cn": "\u6DFB\u52A0\u5230\u65E5\u5386",
          "de": "In den Kalender",
          "es": "A\xF1adir al Calendario",
          "fr": "Ajouter au calendrier",
          "ru": "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0432 \u043A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u044C"
        };
        this.isSingleEvent;
        this.eventData;
        this.selector;
        this.eWidget;
        this.defaultOption;
        this.userOption;
        this.option;
        this.googleUrl;
        this.iCalUrl;
        this.yahooUrl;
        this.outlookOnlineUrl;
        this.updateAllCalendars = function() {
          this.updateGoogleUrl();
          this.updateICalUrl();
          this.updateYahooUrl();
        };
        this.init = function(eventData2) {
          this.isSingleEvent = !this.isArray(eventData2);
          if (!this.isValidEventData(eventData2)) {
            console.log("Event data format is not valid");
            return false;
          }
          this.eventData = eventData2;
          this.selector = "";
          this.eWidget = null;
          this.eButton = null;
          this.defaultOption = {
            lang: "en",
            buttonText: ""
          };
          this.option = this.defaultOption;
          this.googleUrl = "";
          this.iCalUrl = "";
          this.yahooUrl = "";
          this.outlookOnlineUrl = "";
          this.updateAllCalendars();
        };
        this.init(eventData);
      };
      if (typeof module !== "undefined" && module.exports != null) {
        module.exports = Add2Calendar;
      }
    }
  });

  // app/javascript/src/add_to_calendar_button.js
  var require_add_to_calendar_button = __commonJS({
    "app/javascript/src/add_to_calendar_button.js"() {
      var Add2Calendar = require_add2calendar();
      function createCalendarEvents() {
        const calendarButtons = document.querySelectorAll("div.cal-btn");
        if (!calendarButtons)
          return;
        calendarButtons.forEach((btn) => {
          const calendarEvent = new Add2Calendar({
            title: btn.dataset.title,
            start: btn.dataset.start,
            end: btn.dataset.end,
            description: btn.dataset.title,
            isAllDay: true
          });
          calendarEvent.createWidget(`#${btn.id}`);
          btn.title = btn.dataset.tooltip;
        });
      }
      $("document").ready(() => {
        createCalendarEvents();
      });
    }
  });

  // app/javascript/src/case_contact.js
  var case_contact_exports = {};
  __export(case_contact_exports, {
    convertDateToSystemTimeZone: () => convertDateToSystemTimeZone,
    validateOccurredAt: () => validateOccurredAt
  });
  function validateOccurredAt(caseOccurredAt, eventType = "") {
    const msg = "Case Contact Occurrences cannot be in the future.";
    const today = /* @__PURE__ */ new Date();
    today.setHours(0, 0, 0, 0);
    const caseDate = new Date(caseOccurredAt.value);
    caseDate.setDate(caseDate.getDate());
    caseDate.setHours(0, 0, 0, 0);
    if (caseDate > today) {
      if (eventType !== "focusout") {
        alert(msg);
      }
      caseOccurredAt.value = enGBDateString(today);
    }
  }
  function enGBDateString(date) {
    return date.toLocaleDateString("en-GB").split("/").reverse().join("-");
  }
  function convertDateToSystemTimeZone(date) {
    return new Date(typeof date === "string" ? new Date(date) : date);
  }
  async function displayFollowupAlert() {
    const { value: text, isConfirmed } = await fireSwalFollowupAlert();
    if (!isConfirmed)
      return;
    const params = text ? { note: text } : {};
    const caseContactId = this.id.replace("followup-button-", "");
    $.post(
      `/case_contacts/${caseContactId}/followups`,
      params,
      () => window.location.reload()
    );
  }
  async function fireSwalFollowupAlert() {
    const inputLabel = "Optional: Add a note about what followup is needed.";
    return await import_sweetalert22.default.fire({
      input: "textarea",
      title: inputLabel,
      inputPlaceholder: "Type your note here...",
      inputAttributes: { "aria-label": "Type your note here" },
      showCancelButton: true,
      showCloseButton: true,
      confirmButtonText: "Confirm",
      confirmButtonColor: "#dc3545",
      customClass: {
        inputLabel: "mx-5"
      }
    });
  }
  function displayHighlightModal(event) {
    event.preventDefault();
    $("#caseContactHighlight").modal("show");
  }
  var import_sweetalert22;
  var init_case_contact = __esm({
    "app/javascript/src/case_contact.js"() {
      import_sweetalert22 = __toESM(require_sweetalert2_all());
      window.onload = function() {
        const milesDriven = document.getElementById("case_contact_miles_driven");
        if (!milesDriven)
          return;
        const durationHours = document.getElementById("case-contact-duration-hours-display");
        const durationMinutes = document.getElementById("case-contact-duration-minutes-display");
        const caseOccurredAt = document.getElementById("case_contact_occurred_at");
        const caseContactSubmit = document.getElementById("case-contact-submit");
        const volunteerAddressFieldState = (hide2) => {
          if (hide2)
            $(".field.volunteer-address").addClass("hide-field");
          else
            $(".field.volunteer-address").removeClass("hide-field");
          $(".field.volunteer-address input[type=text]").prop("disabled", hide2);
          $(".field.volunteer-address input[type=hidden]").prop("disabled", hide2);
          $(".field.volunteer-address input[type=text]").prop("required", !hide2);
        };
        if ($('.want-driving-reimbursement input.form-check-input[type="radio"][value=true]')[0].checked) {
          volunteerAddressFieldState(false);
        } else {
          volunteerAddressFieldState(true);
        }
        $('.want-driving-reimbursement input.form-check-input[type="radio"]').on("change", function() {
          if (this.value === "true") {
            volunteerAddressFieldState(false);
          } else if (this.value === "false") {
            volunteerAddressFieldState(true);
          }
        });
        const timeZoneConvertedDate = enGBDateString(/* @__PURE__ */ new Date());
        if (enGBDateString(convertDateToSystemTimeZone(caseOccurredAt.value)) === timeZoneConvertedDate) {
          caseOccurredAt.value = timeZoneConvertedDate;
        }
        milesDriven.onchange = function() {
          const contactMedium = document.getElementById("case_contact_medium_type").value || "(contact medium not set)";
          const contactMediumInPerson = `${contactMedium}` === "in-person";
          if (milesDriven.value > 0 && !contactMediumInPerson) {
            alert(`Just checking: you drove ${milesDriven.value} miles for a ${contactMedium} contact?`);
          }
        };
        caseOccurredAt.onchange = function() {
          validateOccurredAt(caseOccurredAt);
        };
        caseOccurredAt.onfocusout = function() {
          validateOccurredAt(caseOccurredAt, "focusout");
        };
        function validateAtLeastOneChecked(elements) {
          const elementsArray = Array.prototype.slice.call(elements);
          const numChecked = elementsArray.filter((x) => x.checked).length;
          if (numChecked === 0) {
            elementsArray[0].required = true;
          } else {
            elementsArray[0].required = false;
          }
        }
        function validateDuration() {
          const msg = "Please enter a minimum duration of 15 minutes (even if you spent less time than this).";
          const fifteenMinutes = 15;
          const totalMinutes = durationMinutes.value + durationHours.value * 60;
          if (totalMinutes < fifteenMinutes) {
            durationMinutes.setCustomValidity(msg);
          } else {
            durationMinutes.setCustomValidity("");
          }
        }
        function validateNoteContent(e) {
          const noteContent = document.getElementById("case_contact_notes").value;
          if (noteContent !== "") {
            e.preventDefault();
            $("#confirm-submit").modal("show");
            const escapedNoteContent = noteContent.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
            document.getElementById("note-content").innerHTML = escapedNoteContent;
          }
        }
        $("#casa-contact-form").submit(function(e) {
          validateNoteContent(e);
        });
        $("#confirm-submit").on("focus", function() {
          document.getElementById("modal-case-contact-submit").disabled = false;
        });
        $("#confirm-submit").on("hide.bs.modal", function() {
          caseContactSubmit.disabled = false;
        });
        const caseContactSubmitFromModal = document.getElementById("modal-case-contact-submit");
        caseContactSubmitFromModal.onclick = function() {
          $("#casa-contact-form").unbind("submit");
        };
        caseContactSubmit.onclick = function(e) {
          validateAtLeastOneChecked(document.querySelectorAll(".casa-case-id"));
          validateAtLeastOneChecked(document.querySelectorAll(".case-contact-contact-type"));
          validateDuration();
        };
      };
      $("document").ready(() => {
        $('[data-toggle="tooltip"]').tooltip();
        $(".followup-button").on("click", displayFollowupAlert);
        $("#open-highlight-modal").on("click", displayHighlightModal);
        if (/\/case_contacts\/*.*\?.*success=true/.test(window.location.href)) {
          $("#thank_you").modal();
        }
      });
    }
  });

  // app/javascript/src/case_contact_autosave.js
  var require_case_contact_autosave = __commonJS({
    "app/javascript/src/case_contact_autosave.js"() {
      $(() => {
        const formId = "casa-contact-form";
        let localStorageKey = formId;
        if ($(".case_contacts-new").length > 0 || $(".case_contacts-edit").length > 0) {
          if ($(".case_contacts-edit").length > 0) {
            const caseContactId = $(`#${formId}`)[0].action.split("/").pop();
            localStorageKey = `${formId}-${caseContactId}`;
          }
          const save = () => {
            const data = [];
            $(`#${formId} :input`).each((_, { id, type, value, checked }) => {
              if (id && type !== "button" && type !== "submit") {
                data.push({ id, value, checked });
              }
            });
            window.localStorage.setItem(localStorageKey, JSON.stringify(data));
          };
          const load = () => {
            const serializedFormState = window.localStorage.getItem(localStorageKey);
            if (serializedFormState !== null) {
              const formData = JSON.parse(serializedFormState);
              formData.forEach(({ id, value, checked }) => {
                const input = document.querySelector(`#${id}`);
                if (input) {
                  input.value = value;
                }
                if (!input.checked) {
                  input.checked = checked;
                }
              });
            }
          };
          $(`#${formId}`).on("keyup change paste", "input, select, textarea", save);
          $("#modal-case-contact-submit").on("click", () => {
            window.localStorage.removeItem(formId);
            window.localStorage.removeItem(localStorageKey);
          });
          document.onload = load();
        }
      });
    }
  });

  // app/javascript/src/type_checker.js
  var require_type_checker = __commonJS({
    "app/javascript/src/type_checker.js"(exports, module) {
      module.exports = {
        // Checks if a variable is a JQuery object
        //  @param  {any}    variable The variable to be checked
        //  @param  {string} varName  The name of the variable to be checked
        //  @throws {TypeError} If variable is not a JQuery object
        //  @throws {ReferenceError} If variable is a JQuery object but points to no elements
        checkNonEmptyJQueryObject(variable, varName) {
          if (!(variable instanceof jQuery)) {
            throw new TypeError(`Param ${varName} must be a jQuery object`);
          }
          if (!variable.length) {
            throw new ReferenceError(`Param ${varName} contains no elements`);
          }
        },
        // Checks if a variable is a non empty string
        //  @param  {any}    variable The variable to be checked
        //  @param  {string} varName  The name of the variable to be checked
        //  @throws {TypeError} If variable is not a string
        //  @throws {RangeError} If variable is empty string
        checkNonEmptyString(variable, varName) {
          this.checkNonEmptyString(variable, varName);
          if (!variable.length) {
            throw new RangeError(`Param ${varName} cannot be empty string`);
          }
        },
        // Checks if a variable is an object
        //  @param  {any}    variable The variable to be checked
        //  @param  {string} varName  The name of the variable to be checked
        //  @throws {TypeError}  If variable is not an object
        checkObject(variable, varName) {
          if (typeof variable !== "object" || Array.isArray(variable) || variable === null) {
            throw new TypeError(`Param ${varName} is not an object`);
          }
        },
        // Checks if a variable is a positive integer
        //  @param  {any}    variable The variable to be checked
        //  @param  {string} varName  The name of the variable to be checked
        //  @throws {TypeError}  If variable is not an integer
        //  @throws {RangeError} If variable is less than 0
        checkPositiveInteger(variable, varName) {
          if (!Number.isInteger(variable)) {
            throw new TypeError(`Param ${varName} is not an integer`);
          } else if (variable < 0) {
            throw new RangeError(`Param ${varName} cannot be negative`);
          }
        },
        // Checks if a variable is a string or not
        //  @param  {any}    variable The variable to be checked
        //  @param  {string} varName  The name of the variable to be checked
        //  @throws {TypeError} If variable is not a string
        checkString(variable, varName) {
          if (typeof variable !== "string") {
            throw new TypeError(`Param ${varName} must be a string`);
          }
        }
      };
    }
  });

  // app/javascript/src/async_notifier.js
  var require_async_notifier = __commonJS({
    "app/javascript/src/async_notifier.js"(exports, module) {
      var TypeChecker2 = require_type_checker();
      module.exports = class Notifier {
        //  @param {object} notificationsElement The notification DOM element as a jQuery object
        constructor(notificationsElement) {
          TypeChecker2.checkNonEmptyJQueryObject(notificationsElement, "notificationsElement");
          this.loadingToast = notificationsElement.find("#async-waiting-indicator");
          this.notificationsElement = notificationsElement;
          this.savedToast = notificationsElement.find("#async-success-indicator");
          this.savedToastTimeouts = [];
          this.waitingSaveOperationCount = 0;
        }
        // Adds notification messages to the notification element
        //  @param  {string} message The message to be displayed
        //  @param  {string} level One of the following logging levels
        //    "error"  Shows a red notification
        //    "info"   Shows a green notification
        //    "warn"   Shows an orange notification
        //  @throws {TypeError}  for a parameter of the incorrect type
        //  @throws {RangeError} for unsupported logging levels
        notify(message, level) {
          TypeChecker2.checkString(message, "message");
          const escapedMessage = message.replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
          switch (level) {
            case "error":
              this.notificationsElement.append(`
          <div class="async-failure-indicator">
            Error: ${escapedMessage}
            <button class="btn btn-danger btn-sm">\xD7</button>
          </div>`).find(".async-failure-indicator button").click(function() {
                $(this).parent().remove();
              });
              break;
            case "info":
              this.notificationsElement.append(`
          <div class="async-success-indicator">
            ${escapedMessage}
            <button class="btn btn-success btn-sm">\xD7</button>
          </div>`).find(".async-success-indicator button").click(function() {
                $(this).parent().remove();
              });
              break;
            case "warn":
              this.notificationsElement.append(`
          <div class="async-warn-indicator">
            ${escapedMessage}
            <button class="btn btn-warning btn-sm">\xD7</button>
          </div>`).find(".async-warn-indicator button").click(function() {
                $(this).parent().remove();
              });
              break;
            default:
              throw new RangeError("Unsupported option for param level");
          }
        }
        // Shows the loading toast
        startAsyncOperation() {
          this.loadingToast.show();
          this.waitingSaveOperationCount++;
        }
        // Shows the saved toast for 2 seconds
        //  @param  {string=}  error The error to be displayed(optional)
        //  @throws {Error}    for trying to resolve more async operations than the amount currently awaiting
        stopAsyncOperation(errorMsg) {
          if (this.waitingSaveOperationCount < 1) {
            const resolveNonexistantOperationError = "Attempted to resolve an async operation when awaiting none";
            this.notify(resolveNonexistantOperationError, "error");
            throw new Error(resolveNonexistantOperationError);
          }
          this.waitingSaveOperationCount--;
          if (this.waitingSaveOperationCount === 0) {
            this.loadingToast.hide();
          }
          if (!errorMsg) {
            this.savedToast.show();
            this.savedToastTimeouts.forEach((timeoutID) => {
              clearTimeout(timeoutID);
            });
            this.savedToastTimeouts.push(setTimeout(() => {
              this.savedToast.hide();
              this.savedToastTimeouts.shift();
            }, 2e3));
          } else {
            if (!(typeof errorMsg === "string" || errorMsg instanceof String)) {
              throw new TypeError("Param errorMsg must be a string");
            }
            this.notify(errorMsg, "error");
          }
        }
      };
    }
  });

  // app/javascript/src/case_emancipation.js
  var case_emancipation_exports = {};
  __export(case_emancipation_exports, {
    Toggler: () => Toggler
  });
  function resolveAsyncOperation(error) {
    if (error instanceof Error) {
      error = error.message;
    }
    emancipationPage.notifier.stopAsyncOperation(error);
  }
  function saveCheckState(action, checkItemId) {
    if (typeof checkItemId === "string") {
      checkItemId = parseInt(checkItemId);
    }
    TypeChecker.checkPositiveInteger(checkItemId, "checkItemId");
    emancipationPage.notifier.startAsyncOperation();
    return $.post(emancipationPage.savePath, {
      check_item_action: action,
      check_item_id: checkItemId
    }).then(function(response, textStatus, jqXHR) {
      if (response.error) {
        return $.Deferred().reject(jqXHR, textStatus, response.error);
      } else if (response === "success") {
        resolveAsyncOperation();
      } else {
        resolveAsyncOperation("Unknown response");
      }
      return response;
    }).fail(function(jqXHR, textStatus, error) {
      resolveAsyncOperation(error);
    });
  }
  var Notifier, TypeChecker, emancipationPage, Toggler;
  var init_case_emancipation = __esm({
    "app/javascript/src/case_emancipation.js"() {
      Notifier = require_async_notifier();
      TypeChecker = require_type_checker();
      emancipationPage = {
        savePath: window.location.pathname + "/save"
      };
      Toggler = class {
        constructor(emancipationCategory) {
          this.emancipationCategory = emancipationCategory;
          this.categoryCollapseIcon = this.emancipationCategory.find(".category-collapse-icon");
          this.categoryOptionsContainer = this.emancipationCategory.siblings(".category-options");
        }
        manageTogglerText() {
          if (this.emancipationCategory.attr("data-is-open") === "true") {
            this.categoryCollapseIcon.text("\u2013");
          } else if (this.emancipationCategory.attr("data-is-open") === "false") {
            this.categoryCollapseIcon.text("+");
          }
        }
        openChildren() {
          this.categoryOptionsContainer.show();
          this.emancipationCategory.attr("data-is-open", "true");
        }
        closeChildren() {
          this.categoryOptionsContainer.hide();
          this.emancipationCategory.attr("data-is-open", "false");
        }
        deselectChildren(notifierCallback) {
          this.categoryOptionsContainer.children().filter(function() {
            return $(this).find("input").prop("checked");
          }).each(function() {
            const checkbox = $(this).find("input");
            checkbox.prop("checked", false);
            notifierCallback(checkbox.next().text());
          });
        }
      };
      $("document").ready(() => {
        if (!/casa_cases\/[A-Za-z\-0-9]+\/emancipation/.test(window.location.pathname)) {
          return;
        }
        const asyncNotificationsElement = $("#async-notifications");
        emancipationPage.notifier = new Notifier(asyncNotificationsElement);
        $(".category-collapse-icon").on("click", function() {
          const categoryCollapseIcon = $(this);
          const emancipationCategory = categoryCollapseIcon.parent();
          const toggler = new Toggler(emancipationCategory);
          if (emancipationCategory.attr("data-is-open") === "true") {
            toggler.closeChildren();
            toggler.manageTogglerText();
          } else if (emancipationCategory.attr("data-is-open") === "false") {
            toggler.openChildren();
            toggler.manageTogglerText();
          }
        });
        $(".emacipation-category-input-label-pair").on("click", function() {
          const emacipationCategoryInputLabelPair = $(this);
          const emancipationCategory = emacipationCategoryInputLabelPair.parent();
          const toggler = new Toggler(emancipationCategory);
          const categoryCheckbox = emancipationCategory.find(".emancipation-category-check-box");
          const categoryCheckboxChecked = categoryCheckbox.is(":checked");
          if (!emancipationCategory.data("disabled")) {
            emancipationCategory.data("disabled", true);
            emancipationCategory.addClass("disabled");
            categoryCheckbox.prop("disabled", "disabled");
            let saveAction, doneCallback;
            if (categoryCheckboxChecked) {
              doneCallback = () => {
                toggler.manageTogglerText();
                toggler.deselectChildren((text) => emancipationPage.notifier.notify("Unchecked " + text, "info"));
              };
              saveAction = "delete_category";
            } else {
              doneCallback = () => {
                toggler.openChildren();
                toggler.manageTogglerText();
              };
              saveAction = "add_category";
            }
            saveCheckState(saveAction, categoryCheckbox.val()).done(function() {
              doneCallback();
              categoryCheckbox.prop("checked", !categoryCheckboxChecked);
              toggler.manageTogglerText();
            }).always(function() {
              emancipationCategory.data("disabled", false);
              emancipationCategory.removeClass("disabled");
              categoryCheckbox.prop("disabled", false);
            });
          }
        });
        $(".check-item").on("click", function() {
          const checkComponent = $(this);
          const checkElement = checkComponent.find("input");
          if (checkComponent.data("disabled")) {
            return;
          }
          if (checkElement.attr("type") === "radio") {
            if (checkElement.prop("checked")) {
              return;
            }
            const radioButtons = checkComponent.parent().children();
            radioButtons.each(function() {
              const radioComponent = $(this);
              const radioInput = radioComponent.find("input");
              radioComponent.data("disabled", true);
              radioComponent.addClass("disabled");
              radioInput.prop("disabled", "disabled");
            });
            saveCheckState("set_option", checkElement.val()).done(function() {
              checkElement.prop("checked", true);
              radioButtons.each(function() {
                const radioComponent = $(this);
                const radioInput = radioComponent.find("input");
                radioComponent.data("disabled", false);
                radioComponent.removeClass("disabled");
                radioInput.prop("disabled", false);
              });
            });
          } else {
            checkComponent.data("disabled", true);
            checkComponent.addClass("disabled");
            checkElement.prop("disabled", "disabled");
            const originallyChecked = checkElement.prop("checked");
            let asyncCall;
            if (!originallyChecked) {
              asyncCall = saveCheckState("add_option", checkElement.val());
            } else {
              asyncCall = saveCheckState("delete_option", checkElement.val());
            }
            asyncCall.done(function() {
              checkComponent.data("disabled", false);
              checkComponent.removeClass("disabled");
              checkElement.prop("checked", !originallyChecked);
              checkElement.prop("disabled", false);
            });
          }
        });
      });
    }
  });

  // app/javascript/src/court_order_list.js
  var require_court_order_list = __commonJS({
    "app/javascript/src/court_order_list.js"(exports, module) {
      var import_sweetalert26 = __toESM(require_sweetalert2_all());
      function replaceNumberWithDecrement(str, num) {
        const captureStringWithoutNumPattern = new RegExp(`(^.*)${num}(.*$)`);
        const stringWithoutNum = str.match(captureStringWithoutNumPattern);
        return stringWithoutNum[1] + (num - 1) + stringWithoutNum[2];
      }
      module.exports = class CourtOrderList {
        // @param {object} The HTMLElement to contain the list items
        constructor(courtOrdersWidget) {
          const urlMatch = window.location.pathname.match(/^\/([a-z_]+)s\/(\w+-+\d+)(\/(([a-z_]+)s))?/).filter((match) => match !== void 0);
          this.courtOrdersWidget = courtOrdersWidget;
          this.resourceName = this.courtOrdersWidget[0].dataset.resource;
          this.casaCaseId = urlMatch[2];
        }
        // Adds a row containing a text field to write the court order and a dropdown to specify the order status
        addCourtOrder() {
          const index = this.courtOrdersWidget.children(".court-order-entry").length;
          const resourceName = this.resourceName;
          const courtOrderRow = $(`    <div class="court-order-entry">      <textarea
      name="${resourceName}[case_court_orders_attributes][${index}][text]"      id="${resourceName}_case_court_orders_attributes_${index}_text"></textarea>
    <select    class="implementation-status"    name="${resourceName}[case_court_orders_attributes][${index}][implementation_status]"    id="${resourceName}_case_court_orders_attributes_${index}_implementation_status">        <option value="">Set Implementation Status</option>
        <option value="unimplemented">Not implemented</option>
        <option value="partially_implemented">Partially implemented</option>
        <option value="implemented">Implemented</option>
      </select>
      <input
        type="hidden"
        id="${resourceName}_case_court_orders_attributes_${index}_casa_case_id"
        name="${resourceName}[case_court_orders_attributes][${index}][casa_case_id]"
        value="${this.casaCaseId}">
    </div>`);
          this.courtOrdersWidget.append(courtOrderRow);
          courtOrderRow.children("textarea").trigger("focus");
        }
        // Removes a row of elements representing a single court order
        // and removes the accompanying hidden input containing the order id
        //   @param {object} order              The jQuery object representing the court order div to remove
        //   @param {object} orderHiddenIdInput The jQuery object representing the hidden court order id input
        removeCourtOrder(order2, orderHiddenIdInput) {
          const index = order2.index() / 2;
          order2.remove();
          orderHiddenIdInput.remove();
          this.courtOrdersWidget.children(`.court-order-entry:nth-child(n+${2 * index})`).each(function(originalSiblingIndex) {
            const courtOrderSibling = $(this);
            const courtOrderSiblingSelect = courtOrderSibling.children("select");
            const courtOrderSiblingTextArea = courtOrderSibling.children("textarea");
            courtOrderSiblingSelect.attr("id", replaceNumberWithDecrement(courtOrderSiblingSelect.attr("id"), originalSiblingIndex + index + 1));
            courtOrderSiblingSelect.attr("name", replaceNumberWithDecrement(courtOrderSiblingSelect.attr("name"), originalSiblingIndex + index + 1));
            courtOrderSiblingTextArea.attr("id", replaceNumberWithDecrement(courtOrderSiblingTextArea.attr("id"), originalSiblingIndex + index + 1));
            courtOrderSiblingTextArea.attr("name", replaceNumberWithDecrement(courtOrderSiblingTextArea.attr("name"), originalSiblingIndex + index + 1));
          });
          this.courtOrdersWidget.children(`input[type="hidden"]:nth-child(n+${2 * (index + 1)})`).each(function(originalSiblingIndex) {
            const courtOrderSiblingId = $(this);
            courtOrderSiblingId.attr("id", replaceNumberWithDecrement(courtOrderSiblingId.attr("id"), originalSiblingIndex + index + 1));
            courtOrderSiblingId.attr("name", replaceNumberWithDecrement(courtOrderSiblingId.attr("name"), originalSiblingIndex + index + 1));
          });
        }
        removeCourtOrderWithConfirmation(order2) {
          const text = "Are you sure you want to remove this court order? Doing so will delete all records of it unless it was included in a previous court report.";
          import_sweetalert26.default.fire({
            icon: "warning",
            title: "Delete court order?",
            text,
            showCloseButton: true,
            showCancelButton: true,
            focusConfirm: false,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#39c",
            confirmButtonText: "Delete",
            cancelButtonText: "Go back"
          }).then((result) => {
            if (result.isConfirmed) {
              this.removeCourtOrderAction(order2);
            }
          });
        }
        removeCourtOrderAction(order2) {
          const orderHiddenIdInput = order2.next('input[type="hidden"]');
          $.ajax({
            url: `/case_court_orders/${orderHiddenIdInput.val()}`,
            method: "delete",
            success: () => {
              this.removeCourtOrder(order2, orderHiddenIdInput);
              import_sweetalert26.default.fire({
                icon: "success",
                text: "Court order has been removed.",
                showCloseButton: true
              });
            },
            error: () => {
              import_sweetalert26.default.fire({
                icon: "error",
                text: "Something went wrong when attempting to delete this court order.",
                showCloseButton: true
              });
            }
          });
        }
      };
    }
  });

  // app/javascript/src/casa_case.js
  var casa_case_exports = {};
  __export(casa_case_exports, {
    disableBtn: () => disableBtn,
    enableBtn: () => enableBtn,
    hideBtn: () => hideBtn,
    showAlert: () => showAlert,
    showBtn: () => showBtn
  });
  function copyOrdersFromCaseWithConfirmation() {
    const id = $(this).next().val();
    const caseNumber = $("select.siblings-casa-cases").find(":selected").text();
    const text = `Are you sure you want to copy all orders from case #${caseNumber}?`;
    import_sweetalert23.default.fire({
      icon: "warning",
      title: `Copy all orders from case #${caseNumber}?`,
      text,
      showCloseButton: true,
      showCancelButton: true,
      focusConfirm: false,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#39c",
      confirmButtonText: "Copy",
      cancelButtonText: "Cancel"
    }).then((result) => {
      if (result.isConfirmed) {
        copyOrdersFromCaseAction(id, caseNumber);
      }
    });
  }
  function copyOrdersFromCaseAction(id, caseNumber) {
    $.ajax({
      url: `/casa_cases/${id}/copy_court_orders`,
      method: "patch",
      data: {
        case_number_cp: caseNumber
      },
      success: () => {
        import_sweetalert23.default.fire({
          icon: "success",
          text: "Court orders have been copied.",
          showCloseButton: true,
          timer: 2e3
        }).then(() => window.location.reload(true));
      },
      error: () => {
        import_sweetalert23.default.fire({
          icon: "error",
          text: "Something went wrong when attempting to copy court orders.",
          showCloseButton: true
        });
      }
    });
  }
  function showBtn(el) {
    el.classList.remove("d-none");
  }
  function hideBtn(el) {
    el.classList.add("d-none");
  }
  function disableBtn(el) {
    el.disabled = true;
    el.classList.add("disabled");
    el.setAttribute("aria-disabled", true);
  }
  function enableBtn(el) {
    el.disabled = false;
    el.classList.remove("disabled");
    el.removeAttribute("aria-disabled");
  }
  function showAlert(html) {
    const alertEl = new DOMParser().parseFromString(html, "text/html").body.firstElementChild;
    const flashContainer = document.querySelector(".header-flash");
    flashContainer && flashContainer.replaceWith(alertEl);
  }
  function handleGenerateReport(e) {
    e.preventDefault();
    const formData = Object.fromEntries(new FormData(e.currentTarget.form));
    if (formData.case_number.length === 0)
      return;
    const generateBtn = e.currentTarget;
    disableBtn(generateBtn);
    const url = e.currentTarget.form.action;
    const options = {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify(formData)
    };
    showBtn(spinner);
    window.fetch(url, options).then((response) => {
      return response.json();
    }).then((data) => {
      if (data.status !== "ok") {
        showAlert(data.error_messages);
        enableBtn(generateBtn);
        hideBtn(spinner);
        return;
      }
      hideBtn(spinner);
      enableBtn(generateBtn);
      window.open(data.link, "_blank");
    }).catch((error) => {
      console.error("Debugging info, error:", error);
    });
  }
  var import_sweetalert23, CourtOrderList;
  var init_casa_case = __esm({
    "app/javascript/src/casa_case.js"() {
      import_sweetalert23 = __toESM(require_sweetalert2_all());
      CourtOrderList = require_court_order_list();
      $("document").ready(() => {
        const courtOrdersListContainer = $("#court-orders-list-container");
        $("button.copy-court-button").on("click", copyOrdersFromCaseWithConfirmation);
        if ($("button.copy-court-button").length) {
          disableBtn($("button.copy-court-button")[0]);
        }
        $("select.siblings-casa-cases").on("change", () => {
          if ($("select.siblings-casa-cases").find(":selected").text()) {
            enableBtn($("button.copy-court-button")[0]);
          } else {
            disableBtn($("button.copy-court-button")[0]);
          }
        });
        if (courtOrdersListContainer.length) {
          const courtOrders = new CourtOrderList(courtOrdersListContainer);
          $("button#add-court-order-button").on("click", () => {
            courtOrders.addCourtOrder();
          });
          $("button.remove-court-order-button").on("click", (event) => {
            const orderHTML = $(event.target).parent();
            courtOrders.removeCourtOrderWithConfirmation(orderHTML);
          });
        }
        $("#btnGenerateReport").on("click", handleGenerateReport);
        if (/\/casa_cases\/.*\?.*success=true/.test(window.location.href)) {
          $("#thank_you").modal();
        }
      });
    }
  });

  // app/javascript/src/new_casa_case.js
  var require_new_casa_case = __commonJS({
    "app/javascript/src/new_casa_case.js"() {
      var COURT_DATE_TOGGLE_CLASS = "toggle-court-date-input";
      var COURT_DATE_INPUT_ID = "casa_case_court_dates_attributes_0_date";
      $("document").ready(() => {
        const courtDateToggle = $(`.${COURT_DATE_TOGGLE_CLASS}`)[0];
        const courtDateInput = $(`#${COURT_DATE_INPUT_ID}`)[0];
        courtDateToggle?.addEventListener("change", () => {
          courtDateInput.hidden = courtDateToggle.checked;
        });
      });
    }
  });

  // app/javascript/src/dashboard.js
  var dashboard_exports = {};
  __export(dashboard_exports, {
    defineCaseContactsTable: () => defineCaseContactsTable
  });
  var defineCaseContactsTable;
  var init_dashboard = __esm({
    "app/javascript/src/dashboard.js"() {
      defineCaseContactsTable = function() {
        $("table#case_contacts").DataTable(
          {
            scrollX: true,
            searching: false,
            order: [[0, "desc"]]
          }
        );
      };
      $("document").ready(() => {
        $.fn.dataTable.ext.search.push(
          function(settings, data, dataIndex) {
            if (settings.nTable.id !== "casa-cases") {
              return true;
            }
            const statusArray = [];
            const assignedToVolunteerArray = [];
            const assignedToMoreThanOneVolunteerArray = [];
            const assignedToTransitionYouthArray = [];
            const caseNumberPrefixArray = [];
            $(".status-options").find('input[type="checkbox"]').each(function() {
              if ($(this).is(":checked")) {
                statusArray.push($(this).data("value"));
              }
            });
            $(".assigned-to-volunteer-options").find('input[type="checkbox"]').each(function() {
              if ($(this).is(":checked")) {
                assignedToVolunteerArray.push($(this).data("value"));
              }
            });
            $(".more-than-one-volunteer-options").find('input[type="checkbox"]').each(function() {
              if ($(this).is(":checked")) {
                assignedToMoreThanOneVolunteerArray.push($(this).data("value"));
              }
            });
            $(".transition-youth-options").find('input[type="checkbox"]').each(function() {
              if ($(this).is(":checked")) {
                assignedToTransitionYouthArray.push($(this).data("value"));
              }
            });
            $(".case-number-prefix-options").find('input[type="checkbox"]').each(function() {
              if ($(this).is(":checked")) {
                caseNumberPrefixArray.push($(this).data("value"));
              }
            });
            const possibleCaseNumberPrefixes = ["CINA", "TPR"];
            const status = data[3];
            const assignedToVolunteer = data[5] !== "" && data[5].split(",").length >= 1 ? "Yes" : "No";
            const assignedToMoreThanOneVolunteer = data[5] !== "" && data[5].split(",").length > 1 ? "Yes" : "No";
            const assignedToTransitionYouth = data[4];
            const caseNumberPrefix = possibleCaseNumberPrefixes.includes(data[0].split("-")[0]) ? data[0].split("-")[0] : "None";
            return statusArray.includes(status) && assignedToVolunteerArray.includes(assignedToVolunteer) && assignedToMoreThanOneVolunteerArray.includes(assignedToMoreThanOneVolunteer) && assignedToTransitionYouthArray.includes(assignedToTransitionYouth) && caseNumberPrefixArray.includes(caseNumberPrefix);
          }
        );
        const handleAjaxError = (e) => {
          console.error(e);
          if (e.responseJSON && e.responseJSON.error) {
            alert(e.responseJSON.error);
          } else {
            const responseErrorMessage = e.response.statusText ? `
${e.response.statusText}
` : "";
            alert(`Sorry, try that again?
${responseErrorMessage}
If you're seeing a problem, please fill out the Report A Site Issue
      link to the bottom left near your email address.`);
          }
        };
        const editSupervisorPath = (id) => `/supervisors/${id}/edit`;
        const editVolunteerPath = (id) => `/volunteers/${id}/edit`;
        const impersonateVolunteerPath = (id) => `/volunteers/${id}/impersonate`;
        const casaCasePath = (id) => `/casa_cases/${id}`;
        const volunteersTable = $("table#volunteers").DataTable({
          autoWidth: false,
          stateSave: false,
          order: [[6, "desc"]],
          columns: [
            {
              name: "display_name",
              render: (data, type, row, meta) => {
                return `
            <span class="mobile-label">Name</span>
            <a href="${editVolunteerPath(row.id)}">
              ${row.display_name || row.email}
            </a>
          `;
              }
            },
            {
              name: "email",
              render: (data, type, row, meta) => row.email,
              visible: false
            },
            {
              className: "supervisor-column",
              name: "supervisor_name",
              render: (data, type, row, meta) => {
                return row.supervisor.id ? `
            <span class="mobile-label">Supervisor</span>
              <a href="${editSupervisorPath(row.supervisor.id)}">
                ${row.supervisor.name}
              </a>
            ` : "";
              }
            },
            {
              name: "active",
              render: (data, type, row, meta) => {
                return `
            <span class="mobile-label">Status</span>
            ${row.active === "true" ? "Active" : "Inactive"}
          `;
              },
              searchable: false
            },
            {
              name: "has_transition_aged_youth_cases",
              render: (data, type, row, meta) => {
                return `
          <span class="mobile-label">Assigned to Transitioned Aged Youth</span>
          ${row.has_transition_aged_youth_cases === "true" ? "Yes \u{1F98B}" : "No \u{1F41B}"}`;
              },
              searchable: false
            },
            {
              name: "casa_cases",
              render: (data, type, row, meta) => {
                const links = row.casa_cases.map((casaCase) => {
                  return `
            <a href="${casaCasePath(casaCase.id)}">${casaCase.case_number}</a>
            `;
                });
                const caseNumbers = `
            <span class="mobile-label">Case Number(s)</span>
            ${links.join(", ")}
          `;
                return caseNumbers;
              },
              orderable: false
            },
            {
              name: "most_recent_attempt_occurred_at",
              render: (data, type, row, meta) => {
                return row.most_recent_attempt.case_id ? `
              <span class="mobile-label">Last Attempted Contact</span>
              <a href="${casaCasePath(row.most_recent_attempt.case_id)}">
                ${row.most_recent_attempt.occurred_at}
              </a>
            ` : "None \u274C";
              },
              searchable: false,
              visible: true
            },
            {
              name: "contacts_made_in_past_days",
              render: (data, type, row, meta) => {
                return `
          <span class="mobile-label">Contacts</span>
          ${row.contacts_made_in_past_days}
          `;
              },
              searchable: false,
              visible: false
            },
            {
              name: "hours_spent_in_days",
              render: (data, type, row, meta) => {
                return `
            <span class="mobile-label">Hours spent in last 30 days</span>
            ${row.hours_spent_in_days}
          `;
              },
              searchable: false
            },
            {
              name: "has_any_extra_languages ",
              render: (data, type, row, meta) => {
                const languages = row.extra_languages.map((x) => x.name).join(", ");
                return row.extra_languages.length > 0 ? `<span class="language-icon" data-toggle="tooltip" title="${languages}">\u{1F30E}</span>` : "";
              },
              searchable: false,
              visible: true
            },
            {
              name: "actions",
              orderable: false,
              render: (data, type, row, meta) => {
                return `
            <span class="mobile-label">Actions</span>
            <a href="${editVolunteerPath(row.id)}" class="main-btn primary-btn btn-hover btn-sm">
              <i class="lni lni-pencil-alt mr-5"></i> Edit
            </a>
            <a href="${impersonateVolunteerPath(row.id)}" class="main-btn dark-btn btn-hover btn-sm">
              <i class="lni lni-user mr-5"></i> Impersonate
            </a>
          `;
              },
              searchable: false
            }
          ],
          processing: true,
          serverSide: true,
          ajax: {
            url: $("table#volunteers").data("source"),
            type: "POST",
            data: function(d) {
              const supervisorOptions = $(".supervisor-options input:checked");
              const supervisorFilter = Array.from(supervisorOptions).map((option) => option.dataset.value);
              const statusOptions = $(".status-options input:checked");
              const statusFilter = Array.from(statusOptions).map((option) => JSON.parse(option.dataset.value));
              const transitionYouthOptions = $(".transition-youth-options input:checked");
              const transitionYouthFilter = Array.from(transitionYouthOptions).map((option) => JSON.parse(option.dataset.value));
              const extraLanguageOptions = $(".extra-language-options input:checked");
              const extraLanguageFilter = Array.from(extraLanguageOptions).map((option) => JSON.parse(option.dataset.value));
              return $.extend({}, d, {
                additional_filters: {
                  supervisor: supervisorFilter,
                  active: statusFilter,
                  transition_aged_youth: transitionYouthFilter,
                  extra_languages: extraLanguageFilter
                }
              });
            },
            error: handleAjaxError,
            dataType: "json"
          },
          drawCallback: function(settings) {
            $("[data-toggle=tooltip]").tooltip();
          }
        });
        volunteersTable.columns().every(function(index) {
          const columnVisible = this.visible();
          if (columnVisible) {
            $('#visibleColumns input[data-column="' + index + '"]').prop("checked", true);
          } else {
            $('#visibleColumns input[data-column="' + index + '"]').prop("checked", false);
          }
          return true;
        });
        const supervisorsTable = $("table#supervisors").DataTable({
          autoWidth: false,
          stateSave: false,
          order: [[1, "asc"]],
          // order by cast contacts
          columns: [
            {
              name: "display_name",
              className: "min-width",
              render: (data, type, row, meta) => {
                return `
            <a href="${editSupervisorPath(row.id)}">
              ${row.display_name || row.email}
            </a>
          `;
              }
            },
            {
              name: "",
              className: "min-width",
              render: (data, type, row, meta) => {
                const noContactVolunteers = Number(row.no_attempt_for_two_weeks);
                const transitionAgedCaseVolunteers = Number(row.transitions_volunteers);
                const activeContactVolunteers = Number(row.volunteer_assignments) - noContactVolunteers;
                const activeContactElement = activeContactVolunteers ? `
            <span class="attempted-contact status-btn success-bg text-white pl-${activeContactVolunteers * 15} pr-${activeContactVolunteers * 15}">
              ${activeContactVolunteers}
            </span>
            ` : "";
                const noContactElement = noContactVolunteers > 0 ? `
            <span class="no-attempted-contact status-btn danger-bg text-white pl-${noContactVolunteers * 15} pr-${noContactVolunteers * 15}">
              ${noContactVolunteers}
            </span>
            ` : "";
                let volunteersCounterElement = "";
                if (activeContactVolunteers <= 0 && noContactVolunteers <= 0) {
                  volunteersCounterElement = '<span class="no-volunteers" style="flex-grow: 1">No assigned volunteers</span>';
                } else {
                  volunteersCounterElement = `<span class="status-btn deactive-bg text-black pl-${transitionAgedCaseVolunteers * 15} pr-${transitionAgedCaseVolunteers * 15}">${transitionAgedCaseVolunteers}</span>`;
                }
                return `
            <div class="supervisor_case_contact_stats">
              ${activeContactElement + noContactElement + volunteersCounterElement}
            </div>
          `;
              }
            },
            {
              name: "actions",
              orderable: false,
              render: (data, type, row, meta) => {
                return `
            <a href="${editSupervisorPath(row.id)}">
              <div class="action">
                <button class="text-danger">
                 <i class="lni lni-pencil-alt"></i>Edit
                </button>
              </div>
            </a>
          `;
              },
              searchable: false
            }
          ],
          processing: true,
          serverSide: true,
          ajax: {
            url: $("table#supervisors").data("source"),
            type: "POST",
            data: function(d) {
              const statusOptions = $(".status-options input:checked");
              const statusFilter = Array.from(statusOptions).map((option) => JSON.parse(option.dataset.value));
              return $.extend({}, d, {
                additional_filters: {
                  active: statusFilter
                }
              });
            },
            error: handleAjaxError,
            dataType: "json"
          },
          drawCallback: function(settings) {
            $("[data-toggle=tooltip]").tooltip();
          },
          createdRow: function(row, data, dataIndex, cells) {
            row.setAttribute("id", `supervisor-${data.id}-information`);
          }
        });
        const casaCasesTable = $("table#casa-cases").DataTable({
          autoWidth: false,
          stateSave: false,
          columnDefs: [],
          language: {
            emptyTable: "No active cases"
          }
        });
        casaCasesTable.columns().every(function(index) {
          const columnVisible = this.visible();
          if (columnVisible) {
            $('#visibleColumns input[data-column="' + index + '"]').prop("checked", true);
          } else {
            $('#visibleColumns input[data-column="' + index + '"]').prop("checked", false);
          }
          return true;
        });
        defineCaseContactsTable();
        function filterOutUnassignedVolunteers(checked) {
          $(".supervisor-options").find('input[type="checkbox"]').not("#unassigned-vol-filter").each(function() {
            this.checked = checked;
          });
        }
        $("#unassigned-vol-filter").on("click", function() {
          if ($("#unassigned-vol-filter").is(":checked")) {
            filterOutUnassignedVolunteers(false);
          } else {
            filterOutUnassignedVolunteers(true);
          }
          volunteersTable.draw();
        });
        $('.volunteer-filters input[type="checkbox"]').not("#unassigned-vol-filter").on("click", function() {
          volunteersTable.draw();
        });
        $('.supervisor-filters input[type="checkbox"]').on("click", function() {
          supervisorsTable.draw();
        });
        $('.casa-case-filters input[type="checkbox"]').on("click", function() {
          casaCasesTable.draw();
        });
        $("input.toggle-visibility").on("click", function(e) {
          const column = volunteersTable.column($(this).attr("data-column"));
          column.visible(!column.visible());
          volunteersTable.columns.adjust().draw();
          const caseColumn = casaCasesTable.column($(this).attr("data-column"));
          caseColumn.visible(!caseColumn.visible());
          casaCasesTable.columns.adjust().draw();
        });
      });
    }
  });

  // app/javascript/src/emancipations.js
  var require_emancipations = __commonJS({
    "app/javascript/src/emancipations.js"() {
      $("document").ready(() => {
        $("table#all-case-emancipations").DataTable({
          autoWidth: false,
          searching: false,
          stateSave: false,
          columnDefs: [
            { orderable: false, targets: 1 }
          ],
          language: {
            emptyTable: "No transitioning cases"
          }
        });
      });
    }
  });

  // app/javascript/src/import.js
  var require_import = __commonJS({
    "app/javascript/src/import.js"() {
      function dataURItoBlob(dataURI) {
        const byteString = atob(dataURI.split(",")[1]);
        const mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
        const arrayBuffer = new ArrayBuffer(byteString.length);
        const _ia = new Uint8Array(arrayBuffer);
        for (let i = 0; i < byteString.length; i++) {
          _ia[i] = byteString.charCodeAt(i);
        }
        const dataView = new DataView(arrayBuffer);
        const blob = new Blob([dataView], { type: mimeString });
        return blob;
      }
      function storeCSVFile(file, key) {
        const reader = new FileReader();
        reader.onload = (fileEvent) => {
          localStorage[key] = JSON.stringify({
            name: file.name,
            data: fileEvent.target.result
          });
        };
        reader.readAsDataURL(file);
      }
      function fetchCSVFile(key) {
        const storedFileData = JSON.parse(localStorage[key]);
        const fileContent = dataURItoBlob(storedFileData.data);
        const file = new File([fileContent], storedFileData.name, { type: "text/csv" });
        return file;
      }
      function populateFileInput(inputId) {
        const csvInput = document.getElementById(inputId);
        if (csvInput.files.length === 0 && localStorage[inputId]) {
          const file = fetchCSVFile(inputId);
          const container = new DataTransfer();
          container.items.add(file);
          csvInput.files = container.files;
        }
      }
      $("document").ready(() => {
        ["volunteer", "supervisor"].forEach((importType) => {
          const inputFileElementId = `${importType}-file`;
          const inputFileElement = $(`#${inputFileElementId}`)[0];
          const importButtonElement = $(`#${importType}-import-button`)[0];
          if (inputFileElement && importButtonElement) {
            inputFileElement.addEventListener("change", function(event) {
              importButtonElement.disabled = event.target.value === "";
              const file = inputFileElement.files[0];
              storeCSVFile(file, inputFileElementId);
            });
            if ($("#smsOptIn") == null) {
              delete localStorage[inputFileElementId];
            } else {
              populateFileInput(inputFileElementId);
            }
          }
        });
      });
    }
  });

  // app/javascript/src/password_confirmation.js
  var password_confirmation_exports = {};
  __export(password_confirmation_exports, {
    checkPasswordsAndDisplayPopup: () => checkPasswordsAndDisplayPopup
  });
  function disableButtonWhenEmptyString(str, button) {
    str.length === 0 ? disableBtn(button) : enableBtn(button);
  }
  function checkPasswordsAndDisplayPopup(button, password, confirmation, enablePopup = false) {
    const passwordText = password.value;
    const confirmationText = confirmation.value;
    if (passwordText === confirmationText) {
      disableButtonWhenEmptyString(passwordText, button);
    } else {
      if (enablePopup) {
        import_sweetalert24.default.fire({
          icon: "error",
          title: "Password Error",
          text: "The password and the confirmation password do not match"
        });
      }
      disableBtn(button);
    }
  }
  var import_sweetalert24, SUBMIT_BUTTON_CLASS, PASSWORD_FIELD_CLASS, CONFIRMATION_FIELD_CLASS;
  var init_password_confirmation = __esm({
    "app/javascript/src/password_confirmation.js"() {
      import_sweetalert24 = __toESM(require_sweetalert2_all());
      init_casa_case();
      SUBMIT_BUTTON_CLASS = "submit-password";
      PASSWORD_FIELD_CLASS = "password-new";
      CONFIRMATION_FIELD_CLASS = "password-confirmation";
      $("document").ready(() => {
        if ($(`.${SUBMIT_BUTTON_CLASS}`).length > 0) {
          const button = $(`.${SUBMIT_BUTTON_CLASS}`)[0];
          const password = $(`.${PASSWORD_FIELD_CLASS}`)[0];
          const confirmation = $(`.${CONFIRMATION_FIELD_CLASS}`)[0];
          disableBtn(button);
          $(`.${PASSWORD_FIELD_CLASS}`).on("blur", () => {
            checkPasswordsAndDisplayPopup(button, password, confirmation);
          });
          $(`.${CONFIRMATION_FIELD_CLASS}`).on("blur", () => {
            checkPasswordsAndDisplayPopup(button, password, confirmation, true);
          });
        }
      });
    }
  });

  // app/javascript/src/plainadmin.js
  var require_plainadmin = __commonJS({
    "app/javascript/src/plainadmin.js"() {
      (function() {
        const sidebarNavWrapper = document.querySelector(".sidebar-nav-wrapper");
        const mainWrapper = document.querySelector(".main-wrapper");
        const menuToggleButton = document.querySelector("#menu-toggle");
        const menuToggleButtonIcon = document.querySelector("#menu-toggle i");
        const overlay = document.querySelector(".overlay");
        if (menuToggleButton) {
          menuToggleButton.addEventListener("click", () => {
            sidebarNavWrapper.classList.toggle("active");
            overlay.classList.add("active");
            mainWrapper.classList.toggle("active");
            if (document.body.clientWidth > 1200) {
              if (menuToggleButtonIcon.classList.contains("lni-chevron-left")) {
                menuToggleButtonIcon.classList.remove("lni-chevron-left");
                menuToggleButtonIcon.classList.add("lni-menu");
              } else {
                menuToggleButtonIcon.classList.remove("lni-menu");
                menuToggleButtonIcon.classList.add("lni-chevron-left");
              }
            } else {
              if (menuToggleButtonIcon.classList.contains("lni-chevron-left")) {
                menuToggleButtonIcon.classList.remove("lni-chevron-left");
                menuToggleButtonIcon.classList.add("lni-menu");
              }
            }
          });
        }
        overlay.addEventListener("click", () => {
          sidebarNavWrapper.classList.remove("active");
          overlay.classList.remove("active");
          mainWrapper.classList.remove("active");
        });
      })();
    }
  });

  // app/javascript/src/read_more.js
  var require_read_more = __commonJS({
    "app/javascript/src/read_more.js"() {
      document.addEventListener("DOMContentLoaded", () => {
        document.addEventListener("click", (event) => {
          if (event.target.matches(".js-read-more")) {
            return handleReadMore(event);
          }
          if (event.target.matches(".js-read-less")) {
            return handleReadLess(event);
          }
        });
      });
      var handleReadMore = (event) => {
        event.preventDefault();
        const wrapper = event.target.closest(".js-read-more-text-wrapper");
        wrapper.querySelector(".js-full-text").style.display = "block";
        wrapper.querySelector(".js-truncated-text").style.display = "none";
      };
      var handleReadLess = (event) => {
        event.preventDefault();
        const wrapper = event.target.closest(".js-read-more-text-wrapper");
        wrapper.querySelector(".js-truncated-text").style.display = "block";
        wrapper.querySelector(".js-full-text").style.display = "none";
      };
    }
  });

  // node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "node_modules/lodash/lodash.js"(exports, module) {
      (function() {
        var undefined2;
        var VERSION2 = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          // Latin-1 Supplement block.
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          // Latin Extended-A block.
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        function arrayIncludesWith(array, value, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset2 = array.length;
          while (++index < length) {
            array[offset2 + index] = values[index];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result, index = -1, length = array.length;
          while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        function baseTimes(n, iteratee) {
          var index = -1, result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function countHolders(array, placeholder) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        function mapToArray(map) {
          var index = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function replaceHolders(array, placeholder) {
          var index = -1, length = array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }
        function setToArray(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }
        function setToPairs(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = [value, value];
          });
          return result;
        }
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return index;
        }
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        function trimmedEndIndex(string) {
          var index = string.length;
          while (index-- && reWhitespace.test(string.charAt(index))) {
          }
          return index;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2(
            "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
          );
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = function() {
            function object() {
            }
            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "escape": reEscape,
            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "evaluate": reEvaluate,
            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "interpolate": reInterpolate,
            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type {string}
             */
            "variable": "",
            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type {Object}
             */
            "imports": {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type {Function}
               */
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start2 = view.start, end2 = view.end, length = end2 - start2, index = isRight ? end2 : start2 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array[index];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
          }
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined2 : data[index][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values2[index]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
              (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
              isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
              isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
              isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          function baseAt(object, paths) {
            var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
            while (++index < length) {
              result2[index] = skip ? undefined2 : get(object, paths[index]);
            }
            return result2;
          }
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values2, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values2, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index, collection2) {
              result2 = !!predicate(value, index, collection2);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
              var value = array[index], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          function baseFill(array, value, start2, end2) {
            var length = array.length;
            start2 = toInteger(start2);
            if (start2 < 0) {
              start2 = -start2 > length ? 0 : length + start2;
            }
            end2 = end2 === undefined2 || end2 > length ? length : toInteger(end2);
            if (end2 < 0) {
              end2 += length;
            }
            end2 = start2 > end2 ? 0 : toLength(end2);
            while (start2 < end2) {
              array[start2++] = value;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index, collection2) {
              if (predicate(value, index, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index < length) {
              var value = array[index];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction(object[key]);
            });
          }
          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined2;
          }
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
          }
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          function baseInRange(number, start2, end2) {
            return number >= nativeMin(start2, end2) && number < nativeMax(start2, end2);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
              while (++index < length && result2.length < maxLength) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object, args);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection, iteratee2) {
            var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          function baseNth(array, n) {
            var length = array.length;
            if (!length) {
              return;
            }
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index, "value": value };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result2 = {};
            while (++index < length) {
              var path = paths[index], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object), value);
              }
            }
            return result2;
          }
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index < length) {
              var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index = indexes[length];
              if (length == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start2, end2, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end2 - start2) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index] = start2;
              start2 += step;
            }
            return result2;
          }
          function baseRepeat(string, n) {
            var result2 = "";
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n % 2) {
                result2 += string;
              }
              n = nativeFloor(n / 2);
              if (n) {
                string += string;
              }
            } while (n);
            return result2;
          }
          function baseRest(func, start2) {
            return setToString(overRest(func, start2, identity), func + "");
          }
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
          }
          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
              var key = toKey(path[index]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          function baseSlice(array, start2, end2) {
            var index = -1, length = array.length;
            if (start2 < 0) {
              start2 = -start2 > length ? 0 : length + start2;
            }
            end2 = end2 > length ? length : end2;
            if (end2 < 0) {
              end2 += length;
            }
            length = start2 > end2 ? 0 : end2 - start2 >>> 0;
            start2 >>>= 0;
            var result2 = Array2(length);
            while (++index < length) {
              result2[index] = array[index + start2];
            }
            return result2;
          }
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index, collection2) {
              result2 = predicate(value, index, collection2);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result2 = Array2(length);
            while (++index < length) {
              var array = arrays[index], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index) {
                  result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values2, assignFunc) {
            var index = -1, length = props.length, valsLength = values2.length, result2 = {};
            while (++index < length) {
              var value = index < valsLength ? values2[index] : undefined2;
              assignFunc(result2, props[index], value);
            }
            return result2;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
          }
          var castRest = baseRest;
          function castSlice(array, start2, end2) {
            var length = array.length;
            end2 = end2 === undefined2 ? length : end2;
            return !start2 && end2 >= length ? array : baseSlice(array, start2, end2);
          }
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
              var result2 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result2) {
                if (index >= ordersLength) {
                  return result2;
                }
                var order2 = orders[index];
                return result2 * (order2 == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset2 = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset2 + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset2 + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array2(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object, source, index, customizer);
                }
              }
              return object;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn2.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
              while (index--) {
                args[index] = arguments[index];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined2,
                  args,
                  holders,
                  undefined2,
                  undefined2,
                  arity - length
                );
              }
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply(fn2, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length;
              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }
                var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
                while (++index2 < length) {
                  result2 = funcs[index2].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length;
              while (index--) {
                args[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary2,
                  arity - length
                );
              }
              var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn2 = Ctor || createCtor(fn2);
              }
              return fn2.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn2, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start2, end2, step) {
              if (step && typeof step != "number" && isIterateeCall(start2, end2, step)) {
                end2 = step = undefined2;
              }
              start2 = toFinite(start2);
              if (end2 === undefined2) {
                end2 = start2;
                start2 = 0;
              } else {
                end2 = toFinite(end2);
              }
              step = step === undefined2 ? start2 < end2 ? 1 : -1 : toFinite(step);
              return baseRange(start2, end2, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject(value) ? undefined2 : value;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop2 : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object) {
            var result2 = keys(object), length = result2.length;
            while (length--) {
              var key = result2[length], value = object[key];
              result2[length] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start2, end2, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
              var data = transforms[index], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start2 += size2;
                  break;
                case "dropRight":
                  end2 -= size2;
                  break;
                case "take":
                  end2 = nativeMin(end2, start2 + size2);
                  break;
                case "takeRight":
                  start2 = nativeMax(start2, end2 - size2);
                  break;
              }
            }
            return { "start": start2, "end": end2 };
          }
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
          }
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result2 = false;
            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index != length) {
              return result2;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
              return eq(object[index], value);
            }
            return false;
          }
          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result2.cache;
            return result2;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start2, transform2) {
            start2 = nativeMax(start2 === undefined2 ? func.length - 1 : start2, 0);
            return function() {
              var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array = Array2(length);
              while (++index < length) {
                array[index] = args[start2 + index];
              }
              index = -1;
              var otherArgs = Array2(start2 + 1);
              while (++index < start2) {
                otherArgs[index] = args[index];
              }
              otherArgs[start2] = transform2(array);
              return apply(func, this, otherArgs);
            };
          }
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index = indexes[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array;
          }
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference2, bitmask) {
            var source = reference2 + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size2) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value = array[rand];
              array[rand] = array[index];
              array[index] = value;
            }
            array.length = size2;
            return array;
          }
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {
              }
              try {
                return func + "";
              } catch (e) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index < length) {
              result2[resIndex++] = baseSlice(array, index, index += size2);
            }
            return result2;
          }
          function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          function concat() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index = length;
            while (index--) {
              args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value, start2, end2) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start2 && typeof start2 != "number" && isIterateeCall(array, value, start2)) {
              start2 = 0;
              end2 = length;
            }
            return baseFill(array, value, start2, end2);
          }
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index < length) {
              var pair = pairs[index];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
          }
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result2.push(value);
                indexes.push(index);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice(array, start2, end2) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end2 && typeof end2 != "number" && isIterateeCall(array, start2, end2)) {
              start2 = 0;
              end2 = length;
            } else {
              start2 = start2 == null ? 0 : toInteger(start2);
              end2 = end2 === undefined2 ? length : toInteger(end2);
            }
            return baseSlice(array, start2, end2);
          }
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value);
              if (index < length && eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          function take(array, n, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start2 = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
              return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start2)) {
              return this.thru(interceptor);
            }
            value = value.slice(start2, +start2 + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone2;
              } else {
                result2 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find = createFind(findIndex);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
          }
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now = ctxNow || function() {
            return root.Date.now();
          };
          function after(n, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n, guard) {
            n = guard ? undefined2 : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
          }
          function before(n, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce2(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result2 : trailingEdge(now());
            }
            function debounced() {
              var time = now(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip2(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache.set(key, result2) || cache;
              return result2;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }
          memoize.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index = -1, length = nativeMin(args.length, funcsLength);
              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start2) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start2 = start2 === undefined2 ? start2 : toInteger(start2);
            return baseRest(func, start2);
          }
          function spread(func, start2) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start2 = start2 == null ? 0 : nativeMax(toInteger(start2), 0);
            return baseRest(function(args) {
              var array = args[start2], otherArgs = castSlice(args, 0, start2);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce2(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement3(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
          }
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          function isError(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction(value) {
            if (!isObject(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          function isNaN2(value) {
            return isNumber(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          function toString(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at = flatRest(baseAt);
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults = baseRest(function(object, sources) {
            object = Object2(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          function get(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, iteratee2(value, key, object2), value);
            });
            return result2;
          }
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, key, iteratee2(value, key, object2));
            });
            return result2;
          }
          var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index < length) {
              var value = object == null ? undefined2 : object[toKey(path[index])];
              if (value === undefined2) {
                index = length;
                value = defaultValue;
              }
              object = isFunction(value) ? value.call(object) : value;
            }
            return object;
          }
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform(object, iteratee2, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
              return iteratee2(accumulator, value, index, object2);
            });
            return accumulator;
          }
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          function clamp(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          function inRange(number, start2, end2) {
            start2 = toFinite(start2);
            if (end2 === undefined2) {
              end2 = start2;
              start2 = 0;
            } else {
              end2 = toFinite(end2);
            }
            number = toNumber(number);
            return baseInRange(number, start2, end2);
          }
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result2, word, index) {
            word = word.toLowerCase();
            return result2 + (index ? capitalize(word) : word);
          });
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
            var end2 = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end2) == target;
          }
          function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          var kebabCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            return baseRepeat(toString(string), n);
          }
          function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset2) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index, offset2).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset2 + match.length;
              return match;
            });
            source += "';\n";
            var variable = hasOwnProperty.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value) {
            return toString(value).toLowerCase();
          }
          function toUpper(value) {
            return toString(value).toUpperCase();
          }
          function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start2 = charsStartIndex(strSymbols, chrSymbols), end2 = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start2, end2).join("");
          }
          function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end2 = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end2).join("");
          }
          function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start2 = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start2).join("");
          }
          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end2 = length - stringSize(omission);
            if (end2 < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end2).join("") : string.slice(0, end2);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end2 += result2.length - end2;
            }
            if (isRegExp(separator)) {
              if (string.slice(end2).search(separator)) {
                var match, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match = separator.exec(substring)) {
                  var newEnd = match.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end2 : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end2) != end2) {
              var index = result2.lastIndexOf(separator);
              if (index > -1) {
                result2 = result2.slice(0, index);
              }
            }
            return result2 + omission;
          }
          function unescape2(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          var upperCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e) {
              return isError(e) ? e : new Error2(e);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index = -1;
              while (++index < length) {
                var pair = pairs[index];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop2() {
          }
          function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
              return baseNth(args, n);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n, iteratee2) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index < n) {
              iteratee2(index);
            }
            return result2;
          }
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
          }
          function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
          }
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max2(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min2(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round2 = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce2;
          lodash.defaults = defaults;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip2;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate;
          lodash.isElement = isElement3;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max2;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min2;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop2;
          lodash.now = now;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round2;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape2;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION2;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
              n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
              var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
              return this.reverse()[methodName](n).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start2, end2) {
            start2 = toInteger(start2);
            var result2 = this;
            if (result2.__filtered__ && (start2 > 0 || end2 < 0)) {
              return new LazyWrapper(result2);
            }
            if (start2 < 0) {
              result2 = result2.takeRight(-start2);
            } else if (start2) {
              result2 = result2.drop(start2);
            }
            if (end2 !== undefined2) {
              end2 = toInteger(end2);
              result2 = end2 < 0 ? result2.dropRight(-end2) : result2.take(end2 - start2);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
              var interceptor = function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _ = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _;
          define(function() {
            return _;
          });
        } else if (freeModule) {
          (freeModule.exports = _)._ = _;
          freeExports._ = _;
        } else {
          root._ = _;
        }
      }).call(exports);
    }
  });

  // app/javascript/src/reimbursements.js
  var require_reimbursements = __commonJS({
    "app/javascript/src/reimbursements.js"() {
      $("document").ready(() => {
        const { groupBy, map, mapValues } = require_lodash();
        const formatOccurredAtDate = (record) => new Date(record.occurred_at.replaceAll("-", " ")).toDateString();
        const mapContactTypes = (contactTypes) => {
          return mapValues(
            groupBy(contactTypes, "group_name"),
            (contactType) => map(contactType, "name").join(", ")
          );
        };
        const renderContactTypes = (record) => {
          if (!record || !Array.isArray(record.contact_types)) {
            return "";
          }
          return map(
            mapContactTypes(record.contact_types),
            (names, groupName) => `${groupName} (${names})`
          ).join(", ");
        };
        const renderCompleteCheckbox = (record) => `
    <label>
      Yes
      <input
        ${record.complete === "true" ? "checked" : ""}
        name="case_contact[reimbursement_complete]"
        type="checkbox"
        data-submit-to="${record.mark_as_complete_path}"
      />
    </label>
  `;
        const editVolunteerPath = (id) => `/volunteers/${id}/edit`;
        const casaCasePath = (id) => `/casa_cases/${id}`;
        const onMarkAsCompleteChange = (event) => {
          const $checkbox = $(event.target);
          try {
            const url = $checkbox.data("submit-to");
            const reimbursementComplete = $checkbox.is(":checked");
            if (!url) {
              throw new Error("URL missing");
            }
            $.ajax(url, {
              data: JSON.stringify({
                case_contact: {
                  reimbursement_complete: reimbursementComplete
                },
                ajax: true
              }),
              method: "PATCH",
              contentType: "application/json"
            }).then(() => reimbursementsTable.draw());
          } catch (error) {
            console.log(error);
            event.target.checked = !event.target.checked;
            window.alert("Failed to update reimbursement complete setting");
          }
          return false;
        };
        $("table#reimbursements-datatable").on("draw.dt", function(e) {
          $(e.target).find('input[name="case_contact[reimbursement_complete]"]').on("change", onMarkAsCompleteChange);
        });
        $('[data-filter="volunteer"] .select2').on("select2:select select2:unselect", () => reimbursementsTable.draw());
        $('[data-filter="occurred_at"] input').on("change", () => reimbursementsTable.draw());
        const handleAjaxError = (e) => {
          if (e.status === 401) {
            window.location.reload();
          } else {
            console.log(e);
            if (e.responseJSON && e.responseJSON.error) {
              window.alert(e.responseJSON.error);
            } else {
              const responseErrorMessage = e.response.statusText ? `
${e.response.statusText}
` : "";
              window.alert(`Sorry, try that again?
${responseErrorMessage}
If you're seeing a problem, please fill out the Report A Site Issue
        link to the bottom left near your email address.`);
            }
          }
        };
        const getDatatableFilterParams = () => {
          return {
            volunteers: selectedVolunteerIdsOrAll(),
            occurred_at: {
              start: $('input[name="occurred_at_starting"]').val(),
              end: $('input[name="occurred_at_ending"]').val()
            }
          };
        };
        const selectedVolunteerIdsOrAll = () => {
          let selectedVols = $('[data-filter="volunteer"] .creator_ids').val();
          if (selectedVols.length === 0) {
            selectedVols = map($('[data-filter="volunteer"] .creator_ids option'), "value");
          }
          return selectedVols;
        };
        const reimbursementsTableCols = [
          {
            name: "display_name",
            render: (data, type, row, meta) => {
              return `
          <span class="mobile-label">Volunteer</span>
          <a href="${editVolunteerPath(row.volunteer.id)}">
            ${row.volunteer.display_name || row.volunteer.email}
          </a>
        `;
            }
          },
          {
            name: "case_number",
            render: (data, type, row, meta) => {
              return `
          <span class="mobile-label">Case Number(s)</span>
          <a href="${casaCasePath(row.casa_case.id)}">${row.casa_case.case_number}</a>
        `;
            }
          },
          {
            name: "contact_types",
            render: (data, type, row, meta) => {
              return `
          <span class="mobile-label">Contact Type(s)</span>
            ${renderContactTypes(row)}
          `;
            },
            orderable: false
          },
          {
            name: "occurred_at",
            render: (data, type, row, meta) => {
              return `
          <span class="mobile-label">Date Added</span>
          ${formatOccurredAtDate(row)}
        `;
            }
          },
          {
            name: "miles_driven",
            render: (data, type, row, meta) => {
              return `
          <span class="mobile-label">Expense Type</span>
          ${row.miles_driven}
        `;
            }
          },
          {
            name: "address",
            render: (data, type, row, meta) => {
              return `
          <span class="mobile-label">Description</span>
          ${row.volunteer.address}
        `;
            },
            orderable: false
          },
          {
            name: "reimbursement_complete",
            render: (data, type, row, meta) => {
              return `
          <span class="mobile-label">Reimbursement Complete?</span>
          ${renderCompleteCheckbox(row)}
        `;
            },
            orderable: false
          }
        ];
        const reimbursementsTable = $("table#reimbursements-datatable").DataTable({
          autoWidth: false,
          stateSave: false,
          order: [[3, "desc"]],
          searching: false,
          columns: reimbursementsTableCols,
          processing: true,
          serverSide: true,
          ajax: {
            url: $("table#reimbursements-datatable").data("source"),
            type: "POST",
            data: function(data) {
              return $.extend({}, data, getDatatableFilterParams());
            },
            error: handleAjaxError,
            dataType: "json"
          }
        });
      });
    }
  });

  // app/javascript/src/reports.js
  var require_reports = __commonJS({
    "app/javascript/src/reports.js"() {
      document.addEventListener("DOMContentLoaded", () => {
        document.addEventListener("click", (event) => {
          if (event.target.matches(".report-form-submit")) {
            return handleReportFormSubmit(event);
          }
        });
      });
      var handleReportFormSubmit = (event) => {
        event.preventDefault();
        const buttonText = event.target.innerHTML;
        event.target.disabled = "disabled";
        event.target.innerHTML = event.target.dataset.disableWith;
        event.target.form.submit();
        setTimeout(() => {
          event.target.disabled = false;
          event.target.innerHTML = buttonText;
        }, 3e3);
      };
    }
  });

  // app/javascript/src/require_communication_preference.js
  var require_communication_preference_exports = {};
  __export(require_communication_preference_exports, {
    displayPopUpIfPreferencesIsInvalid: () => displayPopUpIfPreferencesIsInvalid
  });
  function displayPopUpIfPreferencesIsInvalid() {
    const emailNotificationState = $("#user_receive_email_notifications").prop("checked");
    const smsNotificationState = $("#user_receive_sms_notifications").prop("checked");
    if (smsNotificationState === false && emailNotificationState === false) {
      disableBtn($(`.${SAVE_BUTTON_CLASS}`)[0]);
      import_sweetalert25.default.fire({
        icon: "error",
        title: "Contact Method Needed",
        text: "Please select at least one method of contact so we can communicate with you."
      });
    } else {
      enableBtn($(`.${SAVE_BUTTON_CLASS}`)[0]);
    }
  }
  var import_sweetalert25, EMAIL_TOGGLE_CLASS, SMS_TOGGLE_CLASS, SAVE_BUTTON_CLASS, SMS_NOTIFICATION_EVENT_ID;
  var init_require_communication_preference = __esm({
    "app/javascript/src/require_communication_preference.js"() {
      import_sweetalert25 = __toESM(require_sweetalert2_all());
      init_casa_case();
      EMAIL_TOGGLE_CLASS = "toggle-email-notifications";
      SMS_TOGGLE_CLASS = "toggle-sms-notifications";
      SAVE_BUTTON_CLASS = "save-preference";
      SMS_NOTIFICATION_EVENT_ID = "toggle-sms-notification-event";
      $("document").ready(() => {
        const smsToggle = $(`.${SMS_TOGGLE_CLASS}`)[0];
        const emailToggle = $(`.${EMAIL_TOGGLE_CLASS}`)[0];
        emailToggle?.addEventListener("change", () => {
          displayPopUpIfPreferencesIsInvalid();
        });
        smsToggle?.addEventListener("change", () => {
          displayPopUpIfPreferencesIsInvalid();
        });
        const smsEventToggle = $(`#${SMS_NOTIFICATION_EVENT_ID}`)[0];
        if (smsToggle && smsEventToggle) {
          smsEventToggle.disabled = !smsToggle.checked;
          smsToggle.addEventListener("change", () => {
            smsEventToggle.disabled = !smsToggle.checked;
          });
        }
      });
    }
  });

  // app/javascript/src/select.js
  var require_select = __commonJS({
    "app/javascript/src/select.js"(exports) {
      $("document").ready(() => {
        $(".select2").select2(
          {
            theme: "bootstrap-5",
            width: $(exports).data("width") ? $(exports).data("width") : $(exports).hasClass("w-100") ? "100%" : "style",
            placeholder: $(exports).data("placeholder")
          }
        );
      });
    }
  });

  // app/javascript/src/sidebar.js
  var require_sidebar = __commonJS({
    "app/javascript/src/sidebar.js"() {
      function toggleSidebar() {
        const isOpen = $("#sidebar-js").hasClass("sidebar-open");
        if (isOpen) {
          $("#sidebar-js").removeClass("sidebar-open");
        } else {
          $("#sidebar-js").addClass("sidebar-open");
        }
      }
      $("document").ready(() => {
        $("#toggle-sidebar-js, #sidebar-js").on("click", toggleSidebar);
        if ($("#ddmenu_55 li").children("a").hasClass("active")) {
          $("#ddmenu_55").addClass("show");
        } else {
          $("#ddmenu_55").removeClass("show");
        }
      });
    }
  });

  // app/javascript/src/tooltip.js
  var require_tooltip = __commonJS({
    "app/javascript/src/tooltip.js"() {
      $("document").ready(() => {
        $('[data-toggle="tooltip"]').tooltip();
      });
    }
  });

  // app/javascript/src/session_timeout_poller.js
  var require_session_timeout_poller = __commonJS({
    "app/javascript/src/session_timeout_poller.js"() {
      var deviseTimeoutInMinutes = 180;
      var twoMinuteWarning = deviseTimeoutInMinutes - 2;
      var totalTimerAmount = twoMinuteWarning * 60 * 1e3;
      var deviseTimeoutInMilliseconds = deviseTimeoutInMinutes * 60 * 1e3;
      var startTime = (/* @__PURE__ */ new Date()).getTime();
      var lastTime = (/* @__PURE__ */ new Date()).getTime();
      var currentTime;
      var timeElapsed;
      function warningBoxAndReload() {
        window.alert("Warning: You will be logged off in 2 minutes due to inactivity.");
        window.location.reload();
      }
      setInterval(myTimer, 1e3);
      function myTimer() {
        timeElapsed = Math.abs(lastTime - startTime);
        currentTime = (/* @__PURE__ */ new Date()).getTime();
        if (timeElapsed > deviseTimeoutInMilliseconds) {
          window.location.reload();
        } else if (timeElapsed > totalTimerAmount) {
          warningBoxAndReload();
        } else {
          lastTime = currentTime;
        }
      }
    }
  });

  // app/javascript/jQueryGlobalizer.js
  var import_jquery = __toESM(require_jquery());
  window.jQuery = import_jquery.default;
  window.$ = import_jquery.default;

  // node_modules/@popperjs/core/lib/index.js
  var lib_exports = {};
  __export(lib_exports, {
    afterMain: () => afterMain,
    afterRead: () => afterRead,
    afterWrite: () => afterWrite,
    applyStyles: () => applyStyles_default,
    arrow: () => arrow_default,
    auto: () => auto,
    basePlacements: () => basePlacements,
    beforeMain: () => beforeMain,
    beforeRead: () => beforeRead,
    beforeWrite: () => beforeWrite,
    bottom: () => bottom,
    clippingParents: () => clippingParents,
    computeStyles: () => computeStyles_default,
    createPopper: () => createPopper3,
    createPopperBase: () => createPopper,
    createPopperLite: () => createPopper2,
    detectOverflow: () => detectOverflow,
    end: () => end,
    eventListeners: () => eventListeners_default,
    flip: () => flip_default,
    hide: () => hide_default,
    left: () => left,
    main: () => main,
    modifierPhases: () => modifierPhases,
    offset: () => offset_default,
    placements: () => placements,
    popper: () => popper,
    popperGenerator: () => popperGenerator,
    popperOffsets: () => popperOffsets_default,
    preventOverflow: () => preventOverflow_default,
    read: () => read,
    reference: () => reference,
    right: () => right,
    start: () => start,
    top: () => top,
    variationPlacements: () => variationPlacements,
    viewport: () => viewport,
    write: () => write
  });

  // node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style = styleProperties.reduce(function(style2, property) {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width,
      height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle2(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle2(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle2(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle2(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (true) {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      if (true) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    if (true) {
      var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
      }
    }
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash2 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash2[matched];
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle2(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
      if (true) {
        console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
      }
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow[mainSide];
      var max2 = offset2 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@popperjs/core/lib/utils/format.js
  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function(p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  // node_modules/@popperjs/core/lib/utils/validateModifiers.js
  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
  function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
        return self2.indexOf(value) === index;
      }).forEach(function(key) {
        switch (key) {
          case "name":
            if (typeof modifier.name !== "string") {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
            }
            break;
          case "enabled":
            if (typeof modifier.enabled !== "boolean") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
            }
            break;
          case "phase":
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
            }
            break;
          case "fn":
            if (typeof modifier.fn !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "effect":
            if (modifier.effect != null && typeof modifier.effect !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "requires":
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
            }
            break;
          case "requiresIfExists":
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
            }
            break;
          case "options":
          case "data":
            break;
          default:
            console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
              return '"' + s + '"';
            }).join(", ") + '; but "' + key + '" was provided.');
        }
        modifier.requires && modifier.requires.forEach(function(requirement) {
          if (modifiers.find(function(mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  // node_modules/@popperjs/core/lib/utils/uniqueBy.js
  function uniqueBy(arr, fn2) {
    var identifiers = /* @__PURE__ */ new Set();
    return arr.filter(function(item) {
      var identifier = fn2(item);
      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // node_modules/@popperjs/core/lib/createPopper.js
  var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
  var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper4(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          if (true) {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);
            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function(_ref2) {
                var name = _ref2.name;
                return name === "flip";
              });
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
            if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
            }
          }
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (true) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        if (true) {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref3) {
          var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }
  var createPopper = /* @__PURE__ */ popperGenerator();

  // node_modules/@popperjs/core/lib/popper-lite.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
  var createPopper2 = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper3 = /* @__PURE__ */ popperGenerator({
    defaultModifiers: defaultModifiers2
  });

  // node_modules/bootstrap/dist/js/bootstrap.esm.js
  var MAX_UID = 1e6;
  var MILLISECONDS_MULTIPLIER = 1e3;
  var TRANSITION_END = "transitionend";
  var toType = (object) => {
    if (object === null || object === void 0) {
      return `${object}`;
    }
    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
  };
  var getUID = (prefix) => {
    do {
      prefix += Math.floor(Math.random() * MAX_UID);
    } while (document.getElementById(prefix));
    return prefix;
  };
  var getSelector = (element) => {
    let selector = element.getAttribute("data-bs-target");
    if (!selector || selector === "#") {
      let hrefAttribute = element.getAttribute("href");
      if (!hrefAttribute || !hrefAttribute.includes("#") && !hrefAttribute.startsWith(".")) {
        return null;
      }
      if (hrefAttribute.includes("#") && !hrefAttribute.startsWith("#")) {
        hrefAttribute = `#${hrefAttribute.split("#")[1]}`;
      }
      selector = hrefAttribute && hrefAttribute !== "#" ? hrefAttribute.trim() : null;
    }
    return selector;
  };
  var getSelectorFromElement = (element) => {
    const selector = getSelector(element);
    if (selector) {
      return document.querySelector(selector) ? selector : null;
    }
    return null;
  };
  var getElementFromSelector = (element) => {
    const selector = getSelector(element);
    return selector ? document.querySelector(selector) : null;
  };
  var getTransitionDurationFromElement = (element) => {
    if (!element) {
      return 0;
    }
    let {
      transitionDuration,
      transitionDelay
    } = window.getComputedStyle(element);
    const floatTransitionDuration = Number.parseFloat(transitionDuration);
    const floatTransitionDelay = Number.parseFloat(transitionDelay);
    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    }
    transitionDuration = transitionDuration.split(",")[0];
    transitionDelay = transitionDelay.split(",")[0];
    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  };
  var triggerTransitionEnd = (element) => {
    element.dispatchEvent(new Event(TRANSITION_END));
  };
  var isElement2 = (object) => {
    if (!object || typeof object !== "object") {
      return false;
    }
    if (typeof object.jquery !== "undefined") {
      object = object[0];
    }
    return typeof object.nodeType !== "undefined";
  };
  var getElement = (object) => {
    if (isElement2(object)) {
      return object.jquery ? object[0] : object;
    }
    if (typeof object === "string" && object.length > 0) {
      return document.querySelector(object);
    }
    return null;
  };
  var isVisible = (element) => {
    if (!isElement2(element) || element.getClientRects().length === 0) {
      return false;
    }
    const elementIsVisible = getComputedStyle(element).getPropertyValue("visibility") === "visible";
    const closedDetails = element.closest("details:not([open])");
    if (!closedDetails) {
      return elementIsVisible;
    }
    if (closedDetails !== element) {
      const summary = element.closest("summary");
      if (summary && summary.parentNode !== closedDetails) {
        return false;
      }
      if (summary === null) {
        return false;
      }
    }
    return elementIsVisible;
  };
  var isDisabled = (element) => {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true;
    }
    if (element.classList.contains("disabled")) {
      return true;
    }
    if (typeof element.disabled !== "undefined") {
      return element.disabled;
    }
    return element.hasAttribute("disabled") && element.getAttribute("disabled") !== "false";
  };
  var findShadowRoot = (element) => {
    if (!document.documentElement.attachShadow) {
      return null;
    }
    if (typeof element.getRootNode === "function") {
      const root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    }
    if (element instanceof ShadowRoot) {
      return element;
    }
    if (!element.parentNode) {
      return null;
    }
    return findShadowRoot(element.parentNode);
  };
  var noop = () => {
  };
  var reflow = (element) => {
    element.offsetHeight;
  };
  var getjQuery = () => {
    if (window.jQuery && !document.body.hasAttribute("data-bs-no-jquery")) {
      return window.jQuery;
    }
    return null;
  };
  var DOMContentLoadedCallbacks = [];
  var onDOMContentLoaded = (callback) => {
    if (document.readyState === "loading") {
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener("DOMContentLoaded", () => {
          for (const callback2 of DOMContentLoadedCallbacks) {
            callback2();
          }
        });
      }
      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };
  var isRTL = () => document.documentElement.dir === "rtl";
  var defineJQueryPlugin = (plugin) => {
    onDOMContentLoaded(() => {
      const $2 = getjQuery();
      if ($2) {
        const name = plugin.NAME;
        const JQUERY_NO_CONFLICT = $2.fn[name];
        $2.fn[name] = plugin.jQueryInterface;
        $2.fn[name].Constructor = plugin;
        $2.fn[name].noConflict = () => {
          $2.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface;
        };
      }
    });
  };
  var execute = (callback) => {
    if (typeof callback === "function") {
      callback();
    }
  };
  var executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
    if (!waitForTransition) {
      execute(callback);
      return;
    }
    const durationPadding = 5;
    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
    let called = false;
    const handler = ({
      target
    }) => {
      if (target !== transitionElement) {
        return;
      }
      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };
    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(() => {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };
  var getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
    const listLength = list.length;
    let index = list.indexOf(activeElement);
    if (index === -1) {
      return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
    }
    index += shouldGetNext ? 1 : -1;
    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }
    return list[Math.max(0, Math.min(index, listLength - 1))];
  };
  var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  var stripNameRegex = /\..*/;
  var stripUidRegex = /::\d+$/;
  var eventRegistry = {};
  var uidEvent = 1;
  var customEvents = {
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  };
  var nativeEvents = /* @__PURE__ */ new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);
  function makeEventUid(element, uid) {
    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
  }
  function getElementEvents(element) {
    const uid = makeEventUid(element);
    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};
    return eventRegistry[uid];
  }
  function bootstrapHandler(element, fn2) {
    return function handler(event) {
      hydrateObj(event, {
        delegateTarget: element
      });
      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn2);
      }
      return fn2.apply(element, [event]);
    };
  }
  function bootstrapDelegationHandler(element, selector, fn2) {
    return function handler(event) {
      const domElements = element.querySelectorAll(selector);
      for (let {
        target
      } = event; target && target !== this; target = target.parentNode) {
        for (const domElement of domElements) {
          if (domElement !== target) {
            continue;
          }
          hydrateObj(event, {
            delegateTarget: target
          });
          if (handler.oneOff) {
            EventHandler.off(element, event.type, selector, fn2);
          }
          return fn2.apply(target, [event]);
        }
      }
    };
  }
  function findHandler(events, callable, delegationSelector = null) {
    return Object.values(events).find((event) => event.callable === callable && event.delegationSelector === delegationSelector);
  }
  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
    const isDelegated = typeof handler === "string";
    const callable = isDelegated ? delegationFunction : handler || delegationFunction;
    let typeEvent = getTypeEvent(originalTypeEvent);
    if (!nativeEvents.has(typeEvent)) {
      typeEvent = originalTypeEvent;
    }
    return [isDelegated, callable, typeEvent];
  }
  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
    if (typeof originalTypeEvent !== "string" || !element) {
      return;
    }
    let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
    if (originalTypeEvent in customEvents) {
      const wrapFunction = (fn3) => {
        return function(event) {
          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
            return fn3.call(this, event);
          }
        };
      };
      callable = wrapFunction(callable);
    }
    const events = getElementEvents(element);
    const handlers = events[typeEvent] || (events[typeEvent] = {});
    const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
    if (previousFunction) {
      previousFunction.oneOff = previousFunction.oneOff && oneOff;
      return;
    }
    const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ""));
    const fn2 = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
    fn2.delegationSelector = isDelegated ? handler : null;
    fn2.callable = callable;
    fn2.oneOff = oneOff;
    fn2.uidEvent = uid;
    handlers[uid] = fn2;
    element.addEventListener(typeEvent, fn2, isDelegated);
  }
  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    const fn2 = findHandler(events[typeEvent], handler, delegationSelector);
    if (!fn2) {
      return;
    }
    element.removeEventListener(typeEvent, fn2, Boolean(delegationSelector));
    delete events[typeEvent][fn2.uidEvent];
  }
  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    const storeElementEvent = events[typeEvent] || {};
    for (const handlerKey of Object.keys(storeElementEvent)) {
      if (handlerKey.includes(namespace)) {
        const event = storeElementEvent[handlerKey];
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
      }
    }
  }
  function getTypeEvent(event) {
    event = event.replace(stripNameRegex, "");
    return customEvents[event] || event;
  }
  var EventHandler = {
    on(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, false);
    },
    one(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, true);
    },
    off(element, originalTypeEvent, handler, delegationFunction) {
      if (typeof originalTypeEvent !== "string" || !element) {
        return;
      }
      const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
      const inNamespace = typeEvent !== originalTypeEvent;
      const events = getElementEvents(element);
      const storeElementEvent = events[typeEvent] || {};
      const isNamespace = originalTypeEvent.startsWith(".");
      if (typeof callable !== "undefined") {
        if (!Object.keys(storeElementEvent).length) {
          return;
        }
        removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
        return;
      }
      if (isNamespace) {
        for (const elementEvent of Object.keys(events)) {
          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        }
      }
      for (const keyHandlers of Object.keys(storeElementEvent)) {
        const handlerKey = keyHandlers.replace(stripUidRegex, "");
        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          const event = storeElementEvent[keyHandlers];
          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
        }
      }
    },
    trigger(element, event, args) {
      if (typeof event !== "string" || !element) {
        return null;
      }
      const $2 = getjQuery();
      const typeEvent = getTypeEvent(event);
      const inNamespace = event !== typeEvent;
      let jQueryEvent = null;
      let bubbles = true;
      let nativeDispatch = true;
      let defaultPrevented = false;
      if (inNamespace && $2) {
        jQueryEvent = $2.Event(event, args);
        $2(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }
      let evt = new Event(event, {
        bubbles,
        cancelable: true
      });
      evt = hydrateObj(evt, args);
      if (defaultPrevented) {
        evt.preventDefault();
      }
      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }
      if (evt.defaultPrevented && jQueryEvent) {
        jQueryEvent.preventDefault();
      }
      return evt;
    }
  };
  function hydrateObj(obj, meta) {
    for (const [key, value] of Object.entries(meta || {})) {
      try {
        obj[key] = value;
      } catch (_unused) {
        Object.defineProperty(obj, key, {
          configurable: true,
          get() {
            return value;
          }
        });
      }
    }
    return obj;
  }
  var elementMap = /* @__PURE__ */ new Map();
  var Data = {
    set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, /* @__PURE__ */ new Map());
      }
      const instanceMap = elementMap.get(element);
      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
        return;
      }
      instanceMap.set(key, instance);
    },
    get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null;
      }
      return null;
    },
    remove(element, key) {
      if (!elementMap.has(element)) {
        return;
      }
      const instanceMap = elementMap.get(element);
      instanceMap.delete(key);
      if (instanceMap.size === 0) {
        elementMap.delete(element);
      }
    }
  };
  function normalizeData(value) {
    if (value === "true") {
      return true;
    }
    if (value === "false") {
      return false;
    }
    if (value === Number(value).toString()) {
      return Number(value);
    }
    if (value === "" || value === "null") {
      return null;
    }
    if (typeof value !== "string") {
      return value;
    }
    try {
      return JSON.parse(decodeURIComponent(value));
    } catch (_unused) {
      return value;
    }
  }
  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, (chr) => `-${chr.toLowerCase()}`);
  }
  var Manipulator = {
    setDataAttribute(element, key, value) {
      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
    },
    removeDataAttribute(element, key) {
      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
    },
    getDataAttributes(element) {
      if (!element) {
        return {};
      }
      const attributes = {};
      const bsKeys = Object.keys(element.dataset).filter((key) => key.startsWith("bs") && !key.startsWith("bsConfig"));
      for (const key of bsKeys) {
        let pureKey = key.replace(/^bs/, "");
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
        attributes[pureKey] = normalizeData(element.dataset[key]);
      }
      return attributes;
    },
    getDataAttribute(element, key) {
      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
    }
  };
  var Config = class {
    // Getters
    static get Default() {
      return {};
    }
    static get DefaultType() {
      return {};
    }
    static get NAME() {
      throw new Error('You have to implement the static method "NAME", for each component!');
    }
    _getConfig(config) {
      config = this._mergeConfigObj(config);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config;
    }
    _configAfterMerge(config) {
      return config;
    }
    _mergeConfigObj(config, element) {
      const jsonConfig = isElement2(element) ? Manipulator.getDataAttribute(element, "config") : {};
      return {
        ...this.constructor.Default,
        ...typeof jsonConfig === "object" ? jsonConfig : {},
        ...isElement2(element) ? Manipulator.getDataAttributes(element) : {},
        ...typeof config === "object" ? config : {}
      };
    }
    _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
      for (const property of Object.keys(configTypes)) {
        const expectedTypes = configTypes[property];
        const value = config[property];
        const valueType = isElement2(value) ? "element" : toType(value);
        if (!new RegExp(expectedTypes).test(valueType)) {
          throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
        }
      }
    }
  };
  var VERSION = "5.2.3";
  var BaseComponent = class extends Config {
    constructor(element, config) {
      super();
      element = getElement(element);
      if (!element) {
        return;
      }
      this._element = element;
      this._config = this._getConfig(config);
      Data.set(this._element, this.constructor.DATA_KEY, this);
    }
    // Public
    dispose() {
      Data.remove(this._element, this.constructor.DATA_KEY);
      EventHandler.off(this._element, this.constructor.EVENT_KEY);
      for (const propertyName of Object.getOwnPropertyNames(this)) {
        this[propertyName] = null;
      }
    }
    _queueCallback(callback, element, isAnimated = true) {
      executeAfterTransition(callback, element, isAnimated);
    }
    _getConfig(config) {
      config = this._mergeConfigObj(config, this._element);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config;
    }
    // Static
    static getInstance(element) {
      return Data.get(getElement(element), this.DATA_KEY);
    }
    static getOrCreateInstance(element, config = {}) {
      return this.getInstance(element) || new this(element, typeof config === "object" ? config : null);
    }
    static get VERSION() {
      return VERSION;
    }
    static get DATA_KEY() {
      return `bs.${this.NAME}`;
    }
    static get EVENT_KEY() {
      return `.${this.DATA_KEY}`;
    }
    static eventName(name) {
      return `${name}${this.EVENT_KEY}`;
    }
  };
  var enableDismissTrigger = (component, method = "hide") => {
    const clickEvent = `click.dismiss${component.EVENT_KEY}`;
    const name = component.NAME;
    EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function(event) {
      if (["A", "AREA"].includes(this.tagName)) {
        event.preventDefault();
      }
      if (isDisabled(this)) {
        return;
      }
      const target = getElementFromSelector(this) || this.closest(`.${name}`);
      const instance = component.getOrCreateInstance(target);
      instance[method]();
    });
  };
  var NAME$f = "alert";
  var DATA_KEY$a = "bs.alert";
  var EVENT_KEY$b = `.${DATA_KEY$a}`;
  var EVENT_CLOSE = `close${EVENT_KEY$b}`;
  var EVENT_CLOSED = `closed${EVENT_KEY$b}`;
  var CLASS_NAME_FADE$5 = "fade";
  var CLASS_NAME_SHOW$8 = "show";
  var Alert = class extends BaseComponent {
    // Getters
    static get NAME() {
      return NAME$f;
    }
    // Public
    close() {
      const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
      if (closeEvent.defaultPrevented) {
        return;
      }
      this._element.classList.remove(CLASS_NAME_SHOW$8);
      const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
      this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
    }
    // Private
    _destroyElement() {
      this._element.remove();
      EventHandler.trigger(this._element, EVENT_CLOSED);
      this.dispose();
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = Alert.getOrCreateInstance(this);
        if (typeof config !== "string") {
          return;
        }
        if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](this);
      });
    }
  };
  enableDismissTrigger(Alert, "close");
  defineJQueryPlugin(Alert);
  var NAME$e = "button";
  var DATA_KEY$9 = "bs.button";
  var EVENT_KEY$a = `.${DATA_KEY$9}`;
  var DATA_API_KEY$6 = ".data-api";
  var CLASS_NAME_ACTIVE$3 = "active";
  var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
  var EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
  var Button = class extends BaseComponent {
    // Getters
    static get NAME() {
      return NAME$e;
    }
    // Public
    toggle() {
      this._element.setAttribute("aria-pressed", this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = Button.getOrCreateInstance(this);
        if (config === "toggle") {
          data[config]();
        }
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event) => {
    event.preventDefault();
    const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
    const data = Button.getOrCreateInstance(button);
    data.toggle();
  });
  defineJQueryPlugin(Button);
  var SelectorEngine = {
    find(selector, element = document.documentElement) {
      return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
    },
    findOne(selector, element = document.documentElement) {
      return Element.prototype.querySelector.call(element, selector);
    },
    children(element, selector) {
      return [].concat(...element.children).filter((child) => child.matches(selector));
    },
    parents(element, selector) {
      const parents = [];
      let ancestor = element.parentNode.closest(selector);
      while (ancestor) {
        parents.push(ancestor);
        ancestor = ancestor.parentNode.closest(selector);
      }
      return parents;
    },
    prev(element, selector) {
      let previous = element.previousElementSibling;
      while (previous) {
        if (previous.matches(selector)) {
          return [previous];
        }
        previous = previous.previousElementSibling;
      }
      return [];
    },
    // TODO: this is now unused; remove later along with prev()
    next(element, selector) {
      let next = element.nextElementSibling;
      while (next) {
        if (next.matches(selector)) {
          return [next];
        }
        next = next.nextElementSibling;
      }
      return [];
    },
    focusableChildren(element) {
      const focusables = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", '[contenteditable="true"]'].map((selector) => `${selector}:not([tabindex^="-"])`).join(",");
      return this.find(focusables, element).filter((el) => !isDisabled(el) && isVisible(el));
    }
  };
  var NAME$d = "swipe";
  var EVENT_KEY$9 = ".bs.swipe";
  var EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
  var EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
  var EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
  var EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
  var EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
  var POINTER_TYPE_TOUCH = "touch";
  var POINTER_TYPE_PEN = "pen";
  var CLASS_NAME_POINTER_EVENT = "pointer-event";
  var SWIPE_THRESHOLD = 40;
  var Default$c = {
    endCallback: null,
    leftCallback: null,
    rightCallback: null
  };
  var DefaultType$c = {
    endCallback: "(function|null)",
    leftCallback: "(function|null)",
    rightCallback: "(function|null)"
  };
  var Swipe = class extends Config {
    constructor(element, config) {
      super();
      this._element = element;
      if (!element || !Swipe.isSupported()) {
        return;
      }
      this._config = this._getConfig(config);
      this._deltaX = 0;
      this._supportPointerEvents = Boolean(window.PointerEvent);
      this._initEvents();
    }
    // Getters
    static get Default() {
      return Default$c;
    }
    static get DefaultType() {
      return DefaultType$c;
    }
    static get NAME() {
      return NAME$d;
    }
    // Public
    dispose() {
      EventHandler.off(this._element, EVENT_KEY$9);
    }
    // Private
    _start(event) {
      if (!this._supportPointerEvents) {
        this._deltaX = event.touches[0].clientX;
        return;
      }
      if (this._eventIsPointerPenTouch(event)) {
        this._deltaX = event.clientX;
      }
    }
    _end(event) {
      if (this._eventIsPointerPenTouch(event)) {
        this._deltaX = event.clientX - this._deltaX;
      }
      this._handleSwipe();
      execute(this._config.endCallback);
    }
    _move(event) {
      this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
    }
    _handleSwipe() {
      const absDeltaX = Math.abs(this._deltaX);
      if (absDeltaX <= SWIPE_THRESHOLD) {
        return;
      }
      const direction = absDeltaX / this._deltaX;
      this._deltaX = 0;
      if (!direction) {
        return;
      }
      execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
    }
    _initEvents() {
      if (this._supportPointerEvents) {
        EventHandler.on(this._element, EVENT_POINTERDOWN, (event) => this._start(event));
        EventHandler.on(this._element, EVENT_POINTERUP, (event) => this._end(event));
        this._element.classList.add(CLASS_NAME_POINTER_EVENT);
      } else {
        EventHandler.on(this._element, EVENT_TOUCHSTART, (event) => this._start(event));
        EventHandler.on(this._element, EVENT_TOUCHMOVE, (event) => this._move(event));
        EventHandler.on(this._element, EVENT_TOUCHEND, (event) => this._end(event));
      }
    }
    _eventIsPointerPenTouch(event) {
      return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
    }
    // Static
    static isSupported() {
      return "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
    }
  };
  var NAME$c = "carousel";
  var DATA_KEY$8 = "bs.carousel";
  var EVENT_KEY$8 = `.${DATA_KEY$8}`;
  var DATA_API_KEY$5 = ".data-api";
  var ARROW_LEFT_KEY$1 = "ArrowLeft";
  var ARROW_RIGHT_KEY$1 = "ArrowRight";
  var TOUCHEVENT_COMPAT_WAIT = 500;
  var ORDER_NEXT = "next";
  var ORDER_PREV = "prev";
  var DIRECTION_LEFT = "left";
  var DIRECTION_RIGHT = "right";
  var EVENT_SLIDE = `slide${EVENT_KEY$8}`;
  var EVENT_SLID = `slid${EVENT_KEY$8}`;
  var EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
  var EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
  var EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
  var EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
  var EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
  var EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
  var CLASS_NAME_CAROUSEL = "carousel";
  var CLASS_NAME_ACTIVE$2 = "active";
  var CLASS_NAME_SLIDE = "slide";
  var CLASS_NAME_END = "carousel-item-end";
  var CLASS_NAME_START = "carousel-item-start";
  var CLASS_NAME_NEXT = "carousel-item-next";
  var CLASS_NAME_PREV = "carousel-item-prev";
  var SELECTOR_ACTIVE = ".active";
  var SELECTOR_ITEM = ".carousel-item";
  var SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
  var SELECTOR_ITEM_IMG = ".carousel-item img";
  var SELECTOR_INDICATORS = ".carousel-indicators";
  var SELECTOR_DATA_SLIDE = "[data-bs-slide], [data-bs-slide-to]";
  var SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
  var KEY_TO_DIRECTION = {
    [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,
    [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT
  };
  var Default$b = {
    interval: 5e3,
    keyboard: true,
    pause: "hover",
    ride: false,
    touch: true,
    wrap: true
  };
  var DefaultType$b = {
    interval: "(number|boolean)",
    // TODO:v6 remove boolean support
    keyboard: "boolean",
    pause: "(string|boolean)",
    ride: "(boolean|string)",
    touch: "boolean",
    wrap: "boolean"
  };
  var Carousel = class extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._interval = null;
      this._activeElement = null;
      this._isSliding = false;
      this.touchTimeout = null;
      this._swipeHelper = null;
      this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
      this._addEventListeners();
      if (this._config.ride === CLASS_NAME_CAROUSEL) {
        this.cycle();
      }
    }
    // Getters
    static get Default() {
      return Default$b;
    }
    static get DefaultType() {
      return DefaultType$b;
    }
    static get NAME() {
      return NAME$c;
    }
    // Public
    next() {
      this._slide(ORDER_NEXT);
    }
    nextWhenVisible() {
      if (!document.hidden && isVisible(this._element)) {
        this.next();
      }
    }
    prev() {
      this._slide(ORDER_PREV);
    }
    pause() {
      if (this._isSliding) {
        triggerTransitionEnd(this._element);
      }
      this._clearInterval();
    }
    cycle() {
      this._clearInterval();
      this._updateInterval();
      this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);
    }
    _maybeEnableCycle() {
      if (!this._config.ride) {
        return;
      }
      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, () => this.cycle());
        return;
      }
      this.cycle();
    }
    to(index) {
      const items = this._getItems();
      if (index > items.length - 1 || index < 0) {
        return;
      }
      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, () => this.to(index));
        return;
      }
      const activeIndex = this._getItemIndex(this._getActive());
      if (activeIndex === index) {
        return;
      }
      const order2 = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
      this._slide(order2, items[index]);
    }
    dispose() {
      if (this._swipeHelper) {
        this._swipeHelper.dispose();
      }
      super.dispose();
    }
    // Private
    _configAfterMerge(config) {
      config.defaultInterval = config.interval;
      return config;
    }
    _addEventListeners() {
      if (this._config.keyboard) {
        EventHandler.on(this._element, EVENT_KEYDOWN$1, (event) => this._keydown(event));
      }
      if (this._config.pause === "hover") {
        EventHandler.on(this._element, EVENT_MOUSEENTER$1, () => this.pause());
        EventHandler.on(this._element, EVENT_MOUSELEAVE$1, () => this._maybeEnableCycle());
      }
      if (this._config.touch && Swipe.isSupported()) {
        this._addTouchEventListeners();
      }
    }
    _addTouchEventListeners() {
      for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {
        EventHandler.on(img, EVENT_DRAG_START, (event) => event.preventDefault());
      }
      const endCallBack = () => {
        if (this._config.pause !== "hover") {
          return;
        }
        this.pause();
        if (this.touchTimeout) {
          clearTimeout(this.touchTimeout);
        }
        this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
      };
      const swipeConfig = {
        leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),
        rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),
        endCallback: endCallBack
      };
      this._swipeHelper = new Swipe(this._element, swipeConfig);
    }
    _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }
      const direction = KEY_TO_DIRECTION[event.key];
      if (direction) {
        event.preventDefault();
        this._slide(this._directionToOrder(direction));
      }
    }
    _getItemIndex(element) {
      return this._getItems().indexOf(element);
    }
    _setActiveIndicatorElement(index) {
      if (!this._indicatorsElement) {
        return;
      }
      const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
      activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
      activeIndicator.removeAttribute("aria-current");
      const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index}"]`, this._indicatorsElement);
      if (newActiveIndicator) {
        newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
        newActiveIndicator.setAttribute("aria-current", "true");
      }
    }
    _updateInterval() {
      const element = this._activeElement || this._getActive();
      if (!element) {
        return;
      }
      const elementInterval = Number.parseInt(element.getAttribute("data-bs-interval"), 10);
      this._config.interval = elementInterval || this._config.defaultInterval;
    }
    _slide(order2, element = null) {
      if (this._isSliding) {
        return;
      }
      const activeElement = this._getActive();
      const isNext = order2 === ORDER_NEXT;
      const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
      if (nextElement === activeElement) {
        return;
      }
      const nextElementIndex = this._getItemIndex(nextElement);
      const triggerEvent = (eventName) => {
        return EventHandler.trigger(this._element, eventName, {
          relatedTarget: nextElement,
          direction: this._orderToDirection(order2),
          from: this._getItemIndex(activeElement),
          to: nextElementIndex
        });
      };
      const slideEvent = triggerEvent(EVENT_SLIDE);
      if (slideEvent.defaultPrevented) {
        return;
      }
      if (!activeElement || !nextElement) {
        return;
      }
      const isCycling = Boolean(this._interval);
      this.pause();
      this._isSliding = true;
      this._setActiveIndicatorElement(nextElementIndex);
      this._activeElement = nextElement;
      const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
      const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
      nextElement.classList.add(orderClassName);
      reflow(nextElement);
      activeElement.classList.add(directionalClassName);
      nextElement.classList.add(directionalClassName);
      const completeCallBack = () => {
        nextElement.classList.remove(directionalClassName, orderClassName);
        nextElement.classList.add(CLASS_NAME_ACTIVE$2);
        activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
        this._isSliding = false;
        triggerEvent(EVENT_SLID);
      };
      this._queueCallback(completeCallBack, activeElement, this._isAnimated());
      if (isCycling) {
        this.cycle();
      }
    }
    _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_SLIDE);
    }
    _getActive() {
      return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
    }
    _getItems() {
      return SelectorEngine.find(SELECTOR_ITEM, this._element);
    }
    _clearInterval() {
      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }
    }
    _directionToOrder(direction) {
      if (isRTL()) {
        return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
      }
      return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
    }
    _orderToDirection(order2) {
      if (isRTL()) {
        return order2 === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
      }
      return order2 === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = Carousel.getOrCreateInstance(this, config);
        if (typeof config === "number") {
          data.to(config);
          return;
        }
        if (typeof config === "string") {
          if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
            throw new TypeError(`No method named "${config}"`);
          }
          data[config]();
        }
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {
    const target = getElementFromSelector(this);
    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
      return;
    }
    event.preventDefault();
    const carousel = Carousel.getOrCreateInstance(target);
    const slideIndex = this.getAttribute("data-bs-slide-to");
    if (slideIndex) {
      carousel.to(slideIndex);
      carousel._maybeEnableCycle();
      return;
    }
    if (Manipulator.getDataAttribute(this, "slide") === "next") {
      carousel.next();
      carousel._maybeEnableCycle();
      return;
    }
    carousel.prev();
    carousel._maybeEnableCycle();
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$3, () => {
    const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
    for (const carousel of carousels) {
      Carousel.getOrCreateInstance(carousel);
    }
  });
  defineJQueryPlugin(Carousel);
  var NAME$b = "collapse";
  var DATA_KEY$7 = "bs.collapse";
  var EVENT_KEY$7 = `.${DATA_KEY$7}`;
  var DATA_API_KEY$4 = ".data-api";
  var EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
  var EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
  var EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
  var EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
  var EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
  var CLASS_NAME_SHOW$7 = "show";
  var CLASS_NAME_COLLAPSE = "collapse";
  var CLASS_NAME_COLLAPSING = "collapsing";
  var CLASS_NAME_COLLAPSED = "collapsed";
  var CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
  var CLASS_NAME_HORIZONTAL = "collapse-horizontal";
  var WIDTH = "width";
  var HEIGHT = "height";
  var SELECTOR_ACTIVES = ".collapse.show, .collapse.collapsing";
  var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
  var Default$a = {
    parent: null,
    toggle: true
  };
  var DefaultType$a = {
    parent: "(null|element)",
    toggle: "boolean"
  };
  var Collapse = class extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._isTransitioning = false;
      this._triggerArray = [];
      const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
      for (const elem of toggleList) {
        const selector = getSelectorFromElement(elem);
        const filterElement = SelectorEngine.find(selector).filter((foundElement) => foundElement === this._element);
        if (selector !== null && filterElement.length) {
          this._triggerArray.push(elem);
        }
      }
      this._initializeChildren();
      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
      }
      if (this._config.toggle) {
        this.toggle();
      }
    }
    // Getters
    static get Default() {
      return Default$a;
    }
    static get DefaultType() {
      return DefaultType$a;
    }
    static get NAME() {
      return NAME$b;
    }
    // Public
    toggle() {
      if (this._isShown()) {
        this.hide();
      } else {
        this.show();
      }
    }
    show() {
      if (this._isTransitioning || this._isShown()) {
        return;
      }
      let activeChildren = [];
      if (this._config.parent) {
        activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element) => element !== this._element).map((element) => Collapse.getOrCreateInstance(element, {
          toggle: false
        }));
      }
      if (activeChildren.length && activeChildren[0]._isTransitioning) {
        return;
      }
      const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
      if (startEvent.defaultPrevented) {
        return;
      }
      for (const activeInstance of activeChildren) {
        activeInstance.hide();
      }
      const dimension = this._getDimension();
      this._element.classList.remove(CLASS_NAME_COLLAPSE);
      this._element.classList.add(CLASS_NAME_COLLAPSING);
      this._element.style[dimension] = 0;
      this._addAriaAndCollapsedClass(this._triggerArray, true);
      this._isTransitioning = true;
      const complete = () => {
        this._isTransitioning = false;
        this._element.classList.remove(CLASS_NAME_COLLAPSING);
        this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
        this._element.style[dimension] = "";
        EventHandler.trigger(this._element, EVENT_SHOWN$6);
      };
      const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      const scrollSize = `scroll${capitalizedDimension}`;
      this._queueCallback(complete, this._element, true);
      this._element.style[dimension] = `${this._element[scrollSize]}px`;
    }
    hide() {
      if (this._isTransitioning || !this._isShown()) {
        return;
      }
      const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
      if (startEvent.defaultPrevented) {
        return;
      }
      const dimension = this._getDimension();
      this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_COLLAPSING);
      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
      for (const trigger of this._triggerArray) {
        const element = getElementFromSelector(trigger);
        if (element && !this._isShown(element)) {
          this._addAriaAndCollapsedClass([trigger], false);
        }
      }
      this._isTransitioning = true;
      const complete = () => {
        this._isTransitioning = false;
        this._element.classList.remove(CLASS_NAME_COLLAPSING);
        this._element.classList.add(CLASS_NAME_COLLAPSE);
        EventHandler.trigger(this._element, EVENT_HIDDEN$6);
      };
      this._element.style[dimension] = "";
      this._queueCallback(complete, this._element, true);
    }
    _isShown(element = this._element) {
      return element.classList.contains(CLASS_NAME_SHOW$7);
    }
    // Private
    _configAfterMerge(config) {
      config.toggle = Boolean(config.toggle);
      config.parent = getElement(config.parent);
      return config;
    }
    _getDimension() {
      return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
    }
    _initializeChildren() {
      if (!this._config.parent) {
        return;
      }
      const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
      for (const element of children) {
        const selected = getElementFromSelector(element);
        if (selected) {
          this._addAriaAndCollapsedClass([element], this._isShown(selected));
        }
      }
    }
    _getFirstLevelChildren(selector) {
      const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
      return SelectorEngine.find(selector, this._config.parent).filter((element) => !children.includes(element));
    }
    _addAriaAndCollapsedClass(triggerArray, isOpen) {
      if (!triggerArray.length) {
        return;
      }
      for (const element of triggerArray) {
        element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
        element.setAttribute("aria-expanded", isOpen);
      }
    }
    // Static
    static jQueryInterface(config) {
      const _config = {};
      if (typeof config === "string" && /show|hide/.test(config)) {
        _config.toggle = false;
      }
      return this.each(function() {
        const data = Collapse.getOrCreateInstance(this, _config);
        if (typeof config === "string") {
          if (typeof data[config] === "undefined") {
            throw new TypeError(`No method named "${config}"`);
          }
          data[config]();
        }
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {
    if (event.target.tagName === "A" || event.delegateTarget && event.delegateTarget.tagName === "A") {
      event.preventDefault();
    }
    const selector = getSelectorFromElement(this);
    const selectorElements = SelectorEngine.find(selector);
    for (const element of selectorElements) {
      Collapse.getOrCreateInstance(element, {
        toggle: false
      }).toggle();
    }
  });
  defineJQueryPlugin(Collapse);
  var NAME$a = "dropdown";
  var DATA_KEY$6 = "bs.dropdown";
  var EVENT_KEY$6 = `.${DATA_KEY$6}`;
  var DATA_API_KEY$3 = ".data-api";
  var ESCAPE_KEY$2 = "Escape";
  var TAB_KEY$1 = "Tab";
  var ARROW_UP_KEY$1 = "ArrowUp";
  var ARROW_DOWN_KEY$1 = "ArrowDown";
  var RIGHT_MOUSE_BUTTON = 2;
  var EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
  var EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
  var EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
  var EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
  var EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
  var EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
  var EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
  var CLASS_NAME_SHOW$6 = "show";
  var CLASS_NAME_DROPUP = "dropup";
  var CLASS_NAME_DROPEND = "dropend";
  var CLASS_NAME_DROPSTART = "dropstart";
  var CLASS_NAME_DROPUP_CENTER = "dropup-center";
  var CLASS_NAME_DROPDOWN_CENTER = "dropdown-center";
  var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
  var SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
  var SELECTOR_MENU = ".dropdown-menu";
  var SELECTOR_NAVBAR = ".navbar";
  var SELECTOR_NAVBAR_NAV = ".navbar-nav";
  var SELECTOR_VISIBLE_ITEMS = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
  var PLACEMENT_TOP = isRTL() ? "top-end" : "top-start";
  var PLACEMENT_TOPEND = isRTL() ? "top-start" : "top-end";
  var PLACEMENT_BOTTOM = isRTL() ? "bottom-end" : "bottom-start";
  var PLACEMENT_BOTTOMEND = isRTL() ? "bottom-start" : "bottom-end";
  var PLACEMENT_RIGHT = isRTL() ? "left-start" : "right-start";
  var PLACEMENT_LEFT = isRTL() ? "right-start" : "left-start";
  var PLACEMENT_TOPCENTER = "top";
  var PLACEMENT_BOTTOMCENTER = "bottom";
  var Default$9 = {
    autoClose: true,
    boundary: "clippingParents",
    display: "dynamic",
    offset: [0, 2],
    popperConfig: null,
    reference: "toggle"
  };
  var DefaultType$9 = {
    autoClose: "(boolean|string)",
    boundary: "(string|element)",
    display: "string",
    offset: "(array|string|function)",
    popperConfig: "(null|object|function)",
    reference: "(string|element|object)"
  };
  var Dropdown = class extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._popper = null;
      this._parent = this._element.parentNode;
      this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);
      this._inNavbar = this._detectNavbar();
    }
    // Getters
    static get Default() {
      return Default$9;
    }
    static get DefaultType() {
      return DefaultType$9;
    }
    static get NAME() {
      return NAME$a;
    }
    // Public
    toggle() {
      return this._isShown() ? this.hide() : this.show();
    }
    show() {
      if (isDisabled(this._element) || this._isShown()) {
        return;
      }
      const relatedTarget = {
        relatedTarget: this._element
      };
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
      if (showEvent.defaultPrevented) {
        return;
      }
      this._createPopper();
      if ("ontouchstart" in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, "mouseover", noop);
        }
      }
      this._element.focus();
      this._element.setAttribute("aria-expanded", true);
      this._menu.classList.add(CLASS_NAME_SHOW$6);
      this._element.classList.add(CLASS_NAME_SHOW$6);
      EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
    }
    hide() {
      if (isDisabled(this._element) || !this._isShown()) {
        return;
      }
      const relatedTarget = {
        relatedTarget: this._element
      };
      this._completeHide(relatedTarget);
    }
    dispose() {
      if (this._popper) {
        this._popper.destroy();
      }
      super.dispose();
    }
    update() {
      this._inNavbar = this._detectNavbar();
      if (this._popper) {
        this._popper.update();
      }
    }
    // Private
    _completeHide(relatedTarget) {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
      if (hideEvent.defaultPrevented) {
        return;
      }
      if ("ontouchstart" in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, "mouseover", noop);
        }
      }
      if (this._popper) {
        this._popper.destroy();
      }
      this._menu.classList.remove(CLASS_NAME_SHOW$6);
      this._element.classList.remove(CLASS_NAME_SHOW$6);
      this._element.setAttribute("aria-expanded", "false");
      Manipulator.removeDataAttribute(this._menu, "popper");
      EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
    }
    _getConfig(config) {
      config = super._getConfig(config);
      if (typeof config.reference === "object" && !isElement2(config.reference) && typeof config.reference.getBoundingClientRect !== "function") {
        throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
      }
      return config;
    }
    _createPopper() {
      if (typeof lib_exports === "undefined") {
        throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
      }
      let referenceElement = this._element;
      if (this._config.reference === "parent") {
        referenceElement = this._parent;
      } else if (isElement2(this._config.reference)) {
        referenceElement = getElement(this._config.reference);
      } else if (typeof this._config.reference === "object") {
        referenceElement = this._config.reference;
      }
      const popperConfig = this._getPopperConfig();
      this._popper = createPopper3(referenceElement, this._menu, popperConfig);
    }
    _isShown() {
      return this._menu.classList.contains(CLASS_NAME_SHOW$6);
    }
    _getPlacement() {
      const parentDropdown = this._parent;
      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
        return PLACEMENT_RIGHT;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
        return PLACEMENT_LEFT;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
        return PLACEMENT_TOPCENTER;
      }
      if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
        return PLACEMENT_BOTTOMCENTER;
      }
      const isEnd = getComputedStyle(this._menu).getPropertyValue("--bs-position").trim() === "end";
      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
      }
      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
    }
    _detectNavbar() {
      return this._element.closest(SELECTOR_NAVBAR) !== null;
    }
    _getOffset() {
      const {
        offset: offset2
      } = this._config;
      if (typeof offset2 === "string") {
        return offset2.split(",").map((value) => Number.parseInt(value, 10));
      }
      if (typeof offset2 === "function") {
        return (popperData) => offset2(popperData, this._element);
      }
      return offset2;
    }
    _getPopperConfig() {
      const defaultBsPopperConfig = {
        placement: this._getPlacement(),
        modifiers: [{
          name: "preventOverflow",
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: "offset",
          options: {
            offset: this._getOffset()
          }
        }]
      };
      if (this._inNavbar || this._config.display === "static") {
        Manipulator.setDataAttribute(this._menu, "popper", "static");
        defaultBsPopperConfig.modifiers = [{
          name: "applyStyles",
          enabled: false
        }];
      }
      return {
        ...defaultBsPopperConfig,
        ...typeof this._config.popperConfig === "function" ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
      };
    }
    _selectMenuItem({
      key,
      target
    }) {
      const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element) => isVisible(element));
      if (!items.length) {
        return;
      }
      getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = Dropdown.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
    static clearMenus(event) {
      if (event.button === RIGHT_MOUSE_BUTTON || event.type === "keyup" && event.key !== TAB_KEY$1) {
        return;
      }
      const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
      for (const toggle of openToggles) {
        const context = Dropdown.getInstance(toggle);
        if (!context || context._config.autoClose === false) {
          continue;
        }
        const composedPath = event.composedPath();
        const isMenuTarget = composedPath.includes(context._menu);
        if (composedPath.includes(context._element) || context._config.autoClose === "inside" && !isMenuTarget || context._config.autoClose === "outside" && isMenuTarget) {
          continue;
        }
        if (context._menu.contains(event.target) && (event.type === "keyup" && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
          continue;
        }
        const relatedTarget = {
          relatedTarget: context._element
        };
        if (event.type === "click") {
          relatedTarget.clickEvent = event;
        }
        context._completeHide(relatedTarget);
      }
    }
    static dataApiKeydownHandler(event) {
      const isInput = /input|textarea/i.test(event.target.tagName);
      const isEscapeEvent = event.key === ESCAPE_KEY$2;
      const isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);
      if (!isUpOrDownEvent && !isEscapeEvent) {
        return;
      }
      if (isInput && !isEscapeEvent) {
        return;
      }
      event.preventDefault();
      const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
      const instance = Dropdown.getOrCreateInstance(getToggleButton);
      if (isUpOrDownEvent) {
        event.stopPropagation();
        instance.show();
        instance._selectMenuItem(event);
        return;
      }
      if (instance._isShown()) {
        event.stopPropagation();
        instance.hide();
        getToggleButton.focus();
      }
    }
  };
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });
  defineJQueryPlugin(Dropdown);
  var SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
  var SELECTOR_STICKY_CONTENT = ".sticky-top";
  var PROPERTY_PADDING = "padding-right";
  var PROPERTY_MARGIN = "margin-right";
  var ScrollBarHelper = class {
    constructor() {
      this._element = document.body;
    }
    // Public
    getWidth() {
      const documentWidth = document.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }
    hide() {
      const width = this.getWidth();
      this._disableOverFlow();
      this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
      this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
      this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue) => calculatedValue - width);
    }
    reset() {
      this._resetElementAttributes(this._element, "overflow");
      this._resetElementAttributes(this._element, PROPERTY_PADDING);
      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
    }
    isOverflowing() {
      return this.getWidth() > 0;
    }
    // Private
    _disableOverFlow() {
      this._saveInitialAttribute(this._element, "overflow");
      this._element.style.overflow = "hidden";
    }
    _setElementAttributes(selector, styleProperty, callback) {
      const scrollbarWidth = this.getWidth();
      const manipulationCallBack = (element) => {
        if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
          return;
        }
        this._saveInitialAttribute(element, styleProperty);
        const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
        element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
      };
      this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _saveInitialAttribute(element, styleProperty) {
      const actualValue = element.style.getPropertyValue(styleProperty);
      if (actualValue) {
        Manipulator.setDataAttribute(element, styleProperty, actualValue);
      }
    }
    _resetElementAttributes(selector, styleProperty) {
      const manipulationCallBack = (element) => {
        const value = Manipulator.getDataAttribute(element, styleProperty);
        if (value === null) {
          element.style.removeProperty(styleProperty);
          return;
        }
        Manipulator.removeDataAttribute(element, styleProperty);
        element.style.setProperty(styleProperty, value);
      };
      this._applyManipulationCallback(selector, manipulationCallBack);
    }
    _applyManipulationCallback(selector, callBack) {
      if (isElement2(selector)) {
        callBack(selector);
        return;
      }
      for (const sel of SelectorEngine.find(selector, this._element)) {
        callBack(sel);
      }
    }
  };
  var NAME$9 = "backdrop";
  var CLASS_NAME_FADE$4 = "fade";
  var CLASS_NAME_SHOW$5 = "show";
  var EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
  var Default$8 = {
    className: "modal-backdrop",
    clickCallback: null,
    isAnimated: false,
    isVisible: true,
    // if false, we use the backdrop helper without adding any element to the dom
    rootElement: "body"
    // give the choice to place backdrop under different elements
  };
  var DefaultType$8 = {
    className: "string",
    clickCallback: "(function|null)",
    isAnimated: "boolean",
    isVisible: "boolean",
    rootElement: "(element|string)"
  };
  var Backdrop = class extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
      this._isAppended = false;
      this._element = null;
    }
    // Getters
    static get Default() {
      return Default$8;
    }
    static get DefaultType() {
      return DefaultType$8;
    }
    static get NAME() {
      return NAME$9;
    }
    // Public
    show(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }
      this._append();
      const element = this._getElement();
      if (this._config.isAnimated) {
        reflow(element);
      }
      element.classList.add(CLASS_NAME_SHOW$5);
      this._emulateAnimation(() => {
        execute(callback);
      });
    }
    hide(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }
      this._getElement().classList.remove(CLASS_NAME_SHOW$5);
      this._emulateAnimation(() => {
        this.dispose();
        execute(callback);
      });
    }
    dispose() {
      if (!this._isAppended) {
        return;
      }
      EventHandler.off(this._element, EVENT_MOUSEDOWN);
      this._element.remove();
      this._isAppended = false;
    }
    // Private
    _getElement() {
      if (!this._element) {
        const backdrop = document.createElement("div");
        backdrop.className = this._config.className;
        if (this._config.isAnimated) {
          backdrop.classList.add(CLASS_NAME_FADE$4);
        }
        this._element = backdrop;
      }
      return this._element;
    }
    _configAfterMerge(config) {
      config.rootElement = getElement(config.rootElement);
      return config;
    }
    _append() {
      if (this._isAppended) {
        return;
      }
      const element = this._getElement();
      this._config.rootElement.append(element);
      EventHandler.on(element, EVENT_MOUSEDOWN, () => {
        execute(this._config.clickCallback);
      });
      this._isAppended = true;
    }
    _emulateAnimation(callback) {
      executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
    }
  };
  var NAME$8 = "focustrap";
  var DATA_KEY$5 = "bs.focustrap";
  var EVENT_KEY$5 = `.${DATA_KEY$5}`;
  var EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
  var EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
  var TAB_KEY = "Tab";
  var TAB_NAV_FORWARD = "forward";
  var TAB_NAV_BACKWARD = "backward";
  var Default$7 = {
    autofocus: true,
    trapElement: null
    // The element to trap focus inside of
  };
  var DefaultType$7 = {
    autofocus: "boolean",
    trapElement: "element"
  };
  var FocusTrap = class extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
      this._isActive = false;
      this._lastTabNavDirection = null;
    }
    // Getters
    static get Default() {
      return Default$7;
    }
    static get DefaultType() {
      return DefaultType$7;
    }
    static get NAME() {
      return NAME$8;
    }
    // Public
    activate() {
      if (this._isActive) {
        return;
      }
      if (this._config.autofocus) {
        this._config.trapElement.focus();
      }
      EventHandler.off(document, EVENT_KEY$5);
      EventHandler.on(document, EVENT_FOCUSIN$2, (event) => this._handleFocusin(event));
      EventHandler.on(document, EVENT_KEYDOWN_TAB, (event) => this._handleKeydown(event));
      this._isActive = true;
    }
    deactivate() {
      if (!this._isActive) {
        return;
      }
      this._isActive = false;
      EventHandler.off(document, EVENT_KEY$5);
    }
    // Private
    _handleFocusin(event) {
      const {
        trapElement
      } = this._config;
      if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
        return;
      }
      const elements = SelectorEngine.focusableChildren(trapElement);
      if (elements.length === 0) {
        trapElement.focus();
      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
        elements[elements.length - 1].focus();
      } else {
        elements[0].focus();
      }
    }
    _handleKeydown(event) {
      if (event.key !== TAB_KEY) {
        return;
      }
      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
    }
  };
  var NAME$7 = "modal";
  var DATA_KEY$4 = "bs.modal";
  var EVENT_KEY$4 = `.${DATA_KEY$4}`;
  var DATA_API_KEY$2 = ".data-api";
  var ESCAPE_KEY$1 = "Escape";
  var EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
  var EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
  var EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
  var EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
  var EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
  var EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
  var EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;
  var EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
  var EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
  var EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
  var CLASS_NAME_OPEN = "modal-open";
  var CLASS_NAME_FADE$3 = "fade";
  var CLASS_NAME_SHOW$4 = "show";
  var CLASS_NAME_STATIC = "modal-static";
  var OPEN_SELECTOR$1 = ".modal.show";
  var SELECTOR_DIALOG = ".modal-dialog";
  var SELECTOR_MODAL_BODY = ".modal-body";
  var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
  var Default$6 = {
    backdrop: true,
    focus: true,
    keyboard: true
  };
  var DefaultType$6 = {
    backdrop: "(boolean|string)",
    focus: "boolean",
    keyboard: "boolean"
  };
  var Modal = class extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();
      this._isShown = false;
      this._isTransitioning = false;
      this._scrollBar = new ScrollBarHelper();
      this._addEventListeners();
    }
    // Getters
    static get Default() {
      return Default$6;
    }
    static get DefaultType() {
      return DefaultType$6;
    }
    static get NAME() {
      return NAME$7;
    }
    // Public
    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
      if (this._isShown || this._isTransitioning) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
        relatedTarget
      });
      if (showEvent.defaultPrevented) {
        return;
      }
      this._isShown = true;
      this._isTransitioning = true;
      this._scrollBar.hide();
      document.body.classList.add(CLASS_NAME_OPEN);
      this._adjustDialog();
      this._backdrop.show(() => this._showElement(relatedTarget));
    }
    hide() {
      if (!this._isShown || this._isTransitioning) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
      if (hideEvent.defaultPrevented) {
        return;
      }
      this._isShown = false;
      this._isTransitioning = true;
      this._focustrap.deactivate();
      this._element.classList.remove(CLASS_NAME_SHOW$4);
      this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());
    }
    dispose() {
      for (const htmlElement of [window, this._dialog]) {
        EventHandler.off(htmlElement, EVENT_KEY$4);
      }
      this._backdrop.dispose();
      this._focustrap.deactivate();
      super.dispose();
    }
    handleUpdate() {
      this._adjustDialog();
    }
    // Private
    _initializeBackDrop() {
      return new Backdrop({
        isVisible: Boolean(this._config.backdrop),
        // 'static' option will be translated to true, and booleans will keep their value,
        isAnimated: this._isAnimated()
      });
    }
    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
    _showElement(relatedTarget) {
      if (!document.body.contains(this._element)) {
        document.body.append(this._element);
      }
      this._element.style.display = "block";
      this._element.removeAttribute("aria-hidden");
      this._element.setAttribute("aria-modal", true);
      this._element.setAttribute("role", "dialog");
      this._element.scrollTop = 0;
      const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
      if (modalBody) {
        modalBody.scrollTop = 0;
      }
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_SHOW$4);
      const transitionComplete = () => {
        if (this._config.focus) {
          this._focustrap.activate();
        }
        this._isTransitioning = false;
        EventHandler.trigger(this._element, EVENT_SHOWN$4, {
          relatedTarget
        });
      };
      this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
    }
    _addEventListeners() {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event) => {
        if (event.key !== ESCAPE_KEY$1) {
          return;
        }
        if (this._config.keyboard) {
          event.preventDefault();
          this.hide();
          return;
        }
        this._triggerBackdropTransition();
      });
      EventHandler.on(window, EVENT_RESIZE$1, () => {
        if (this._isShown && !this._isTransitioning) {
          this._adjustDialog();
        }
      });
      EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event) => {
        EventHandler.one(this._element, EVENT_CLICK_DISMISS, (event2) => {
          if (this._element !== event.target || this._element !== event2.target) {
            return;
          }
          if (this._config.backdrop === "static") {
            this._triggerBackdropTransition();
            return;
          }
          if (this._config.backdrop) {
            this.hide();
          }
        });
      });
    }
    _hideModal() {
      this._element.style.display = "none";
      this._element.setAttribute("aria-hidden", true);
      this._element.removeAttribute("aria-modal");
      this._element.removeAttribute("role");
      this._isTransitioning = false;
      this._backdrop.hide(() => {
        document.body.classList.remove(CLASS_NAME_OPEN);
        this._resetAdjustments();
        this._scrollBar.reset();
        EventHandler.trigger(this._element, EVENT_HIDDEN$4);
      });
    }
    _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_FADE$3);
    }
    _triggerBackdropTransition() {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
      if (hideEvent.defaultPrevented) {
        return;
      }
      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
      const initialOverflowY = this._element.style.overflowY;
      if (initialOverflowY === "hidden" || this._element.classList.contains(CLASS_NAME_STATIC)) {
        return;
      }
      if (!isModalOverflowing) {
        this._element.style.overflowY = "hidden";
      }
      this._element.classList.add(CLASS_NAME_STATIC);
      this._queueCallback(() => {
        this._element.classList.remove(CLASS_NAME_STATIC);
        this._queueCallback(() => {
          this._element.style.overflowY = initialOverflowY;
        }, this._dialog);
      }, this._dialog);
      this._element.focus();
    }
    /**
     * The following methods are used to handle overflowing modals
     */
    _adjustDialog() {
      const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
      const scrollbarWidth = this._scrollBar.getWidth();
      const isBodyOverflowing = scrollbarWidth > 0;
      if (isBodyOverflowing && !isModalOverflowing) {
        const property = isRTL() ? "paddingLeft" : "paddingRight";
        this._element.style[property] = `${scrollbarWidth}px`;
      }
      if (!isBodyOverflowing && isModalOverflowing) {
        const property = isRTL() ? "paddingRight" : "paddingLeft";
        this._element.style[property] = `${scrollbarWidth}px`;
      }
    }
    _resetAdjustments() {
      this._element.style.paddingLeft = "";
      this._element.style.paddingRight = "";
    }
    // Static
    static jQueryInterface(config, relatedTarget) {
      return this.each(function() {
        const data = Modal.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](relatedTarget);
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
    const target = getElementFromSelector(this);
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    EventHandler.one(target, EVENT_SHOW$4, (showEvent) => {
      if (showEvent.defaultPrevented) {
        return;
      }
      EventHandler.one(target, EVENT_HIDDEN$4, () => {
        if (isVisible(this)) {
          this.focus();
        }
      });
    });
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
    if (alreadyOpen) {
      Modal.getInstance(alreadyOpen).hide();
    }
    const data = Modal.getOrCreateInstance(target);
    data.toggle(this);
  });
  enableDismissTrigger(Modal);
  defineJQueryPlugin(Modal);
  var NAME$6 = "offcanvas";
  var DATA_KEY$3 = "bs.offcanvas";
  var EVENT_KEY$3 = `.${DATA_KEY$3}`;
  var DATA_API_KEY$1 = ".data-api";
  var EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
  var ESCAPE_KEY = "Escape";
  var CLASS_NAME_SHOW$3 = "show";
  var CLASS_NAME_SHOWING$1 = "showing";
  var CLASS_NAME_HIDING = "hiding";
  var CLASS_NAME_BACKDROP = "offcanvas-backdrop";
  var OPEN_SELECTOR = ".offcanvas.show";
  var EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
  var EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
  var EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
  var EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
  var EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
  var EVENT_RESIZE = `resize${EVENT_KEY$3}`;
  var EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
  var EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
  var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
  var Default$5 = {
    backdrop: true,
    keyboard: true,
    scroll: false
  };
  var DefaultType$5 = {
    backdrop: "(boolean|string)",
    keyboard: "boolean",
    scroll: "boolean"
  };
  var Offcanvas = class extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._isShown = false;
      this._backdrop = this._initializeBackDrop();
      this._focustrap = this._initializeFocusTrap();
      this._addEventListeners();
    }
    // Getters
    static get Default() {
      return Default$5;
    }
    static get DefaultType() {
      return DefaultType$5;
    }
    static get NAME() {
      return NAME$6;
    }
    // Public
    toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
    show(relatedTarget) {
      if (this._isShown) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
        relatedTarget
      });
      if (showEvent.defaultPrevented) {
        return;
      }
      this._isShown = true;
      this._backdrop.show();
      if (!this._config.scroll) {
        new ScrollBarHelper().hide();
      }
      this._element.setAttribute("aria-modal", true);
      this._element.setAttribute("role", "dialog");
      this._element.classList.add(CLASS_NAME_SHOWING$1);
      const completeCallBack = () => {
        if (!this._config.scroll || this._config.backdrop) {
          this._focustrap.activate();
        }
        this._element.classList.add(CLASS_NAME_SHOW$3);
        this._element.classList.remove(CLASS_NAME_SHOWING$1);
        EventHandler.trigger(this._element, EVENT_SHOWN$3, {
          relatedTarget
        });
      };
      this._queueCallback(completeCallBack, this._element, true);
    }
    hide() {
      if (!this._isShown) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
      if (hideEvent.defaultPrevented) {
        return;
      }
      this._focustrap.deactivate();
      this._element.blur();
      this._isShown = false;
      this._element.classList.add(CLASS_NAME_HIDING);
      this._backdrop.hide();
      const completeCallback = () => {
        this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
        this._element.removeAttribute("aria-modal");
        this._element.removeAttribute("role");
        if (!this._config.scroll) {
          new ScrollBarHelper().reset();
        }
        EventHandler.trigger(this._element, EVENT_HIDDEN$3);
      };
      this._queueCallback(completeCallback, this._element, true);
    }
    dispose() {
      this._backdrop.dispose();
      this._focustrap.deactivate();
      super.dispose();
    }
    // Private
    _initializeBackDrop() {
      const clickCallback = () => {
        if (this._config.backdrop === "static") {
          EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
          return;
        }
        this.hide();
      };
      const isVisible2 = Boolean(this._config.backdrop);
      return new Backdrop({
        className: CLASS_NAME_BACKDROP,
        isVisible: isVisible2,
        isAnimated: true,
        rootElement: this._element.parentNode,
        clickCallback: isVisible2 ? clickCallback : null
      });
    }
    _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
    _addEventListeners() {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event) => {
        if (event.key !== ESCAPE_KEY) {
          return;
        }
        if (!this._config.keyboard) {
          EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
          return;
        }
        this.hide();
      });
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = Offcanvas.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](this);
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
    const target = getElementFromSelector(this);
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    EventHandler.one(target, EVENT_HIDDEN$3, () => {
      if (isVisible(this)) {
        this.focus();
      }
    });
    const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
    if (alreadyOpen && alreadyOpen !== target) {
      Offcanvas.getInstance(alreadyOpen).hide();
    }
    const data = Offcanvas.getOrCreateInstance(target);
    data.toggle(this);
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
    for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {
      Offcanvas.getOrCreateInstance(selector).show();
    }
  });
  EventHandler.on(window, EVENT_RESIZE, () => {
    for (const element of SelectorEngine.find("[aria-modal][class*=show][class*=offcanvas-]")) {
      if (getComputedStyle(element).position !== "fixed") {
        Offcanvas.getOrCreateInstance(element).hide();
      }
    }
  });
  enableDismissTrigger(Offcanvas);
  defineJQueryPlugin(Offcanvas);
  var uriAttributes = /* @__PURE__ */ new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]);
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
  var allowedAttribute = (attribute, allowedAttributeList) => {
    const attributeName = attribute.nodeName.toLowerCase();
    if (allowedAttributeList.includes(attributeName)) {
      if (uriAttributes.has(attributeName)) {
        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
      }
      return true;
    }
    return allowedAttributeList.filter((attributeRegex) => attributeRegex instanceof RegExp).some((regex) => regex.test(attributeName));
  };
  var DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
    a: ["target", "href", "title", "rel"],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ["src", "srcset", "alt", "title", "width", "height"],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
    if (!unsafeHtml.length) {
      return unsafeHtml;
    }
    if (sanitizeFunction && typeof sanitizeFunction === "function") {
      return sanitizeFunction(unsafeHtml);
    }
    const domParser = new window.DOMParser();
    const createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
    const elements = [].concat(...createdDocument.body.querySelectorAll("*"));
    for (const element of elements) {
      const elementName = element.nodeName.toLowerCase();
      if (!Object.keys(allowList).includes(elementName)) {
        element.remove();
        continue;
      }
      const attributeList = [].concat(...element.attributes);
      const allowedAttributes = [].concat(allowList["*"] || [], allowList[elementName] || []);
      for (const attribute of attributeList) {
        if (!allowedAttribute(attribute, allowedAttributes)) {
          element.removeAttribute(attribute.nodeName);
        }
      }
    }
    return createdDocument.body.innerHTML;
  }
  var NAME$5 = "TemplateFactory";
  var Default$4 = {
    allowList: DefaultAllowlist,
    content: {},
    // { selector : text ,  selector2 : text2 , }
    extraClass: "",
    html: false,
    sanitize: true,
    sanitizeFn: null,
    template: "<div></div>"
  };
  var DefaultType$4 = {
    allowList: "object",
    content: "object",
    extraClass: "(string|function)",
    html: "boolean",
    sanitize: "boolean",
    sanitizeFn: "(null|function)",
    template: "string"
  };
  var DefaultContentType = {
    entry: "(string|element|function|null)",
    selector: "(string|element)"
  };
  var TemplateFactory = class extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
    }
    // Getters
    static get Default() {
      return Default$4;
    }
    static get DefaultType() {
      return DefaultType$4;
    }
    static get NAME() {
      return NAME$5;
    }
    // Public
    getContent() {
      return Object.values(this._config.content).map((config) => this._resolvePossibleFunction(config)).filter(Boolean);
    }
    hasContent() {
      return this.getContent().length > 0;
    }
    changeContent(content) {
      this._checkContent(content);
      this._config.content = {
        ...this._config.content,
        ...content
      };
      return this;
    }
    toHtml() {
      const templateWrapper = document.createElement("div");
      templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
      for (const [selector, text] of Object.entries(this._config.content)) {
        this._setContent(templateWrapper, text, selector);
      }
      const template = templateWrapper.children[0];
      const extraClass = this._resolvePossibleFunction(this._config.extraClass);
      if (extraClass) {
        template.classList.add(...extraClass.split(" "));
      }
      return template;
    }
    // Private
    _typeCheckConfig(config) {
      super._typeCheckConfig(config);
      this._checkContent(config.content);
    }
    _checkContent(arg) {
      for (const [selector, content] of Object.entries(arg)) {
        super._typeCheckConfig({
          selector,
          entry: content
        }, DefaultContentType);
      }
    }
    _setContent(template, content, selector) {
      const templateElement = SelectorEngine.findOne(selector, template);
      if (!templateElement) {
        return;
      }
      content = this._resolvePossibleFunction(content);
      if (!content) {
        templateElement.remove();
        return;
      }
      if (isElement2(content)) {
        this._putElementInTemplate(getElement(content), templateElement);
        return;
      }
      if (this._config.html) {
        templateElement.innerHTML = this._maybeSanitize(content);
        return;
      }
      templateElement.textContent = content;
    }
    _maybeSanitize(arg) {
      return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
    }
    _resolvePossibleFunction(arg) {
      return typeof arg === "function" ? arg(this) : arg;
    }
    _putElementInTemplate(element, templateElement) {
      if (this._config.html) {
        templateElement.innerHTML = "";
        templateElement.append(element);
        return;
      }
      templateElement.textContent = element.textContent;
    }
  };
  var NAME$4 = "tooltip";
  var DISALLOWED_ATTRIBUTES = /* @__PURE__ */ new Set(["sanitize", "allowList", "sanitizeFn"]);
  var CLASS_NAME_FADE$2 = "fade";
  var CLASS_NAME_MODAL = "modal";
  var CLASS_NAME_SHOW$2 = "show";
  var SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
  var SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
  var EVENT_MODAL_HIDE = "hide.bs.modal";
  var TRIGGER_HOVER = "hover";
  var TRIGGER_FOCUS = "focus";
  var TRIGGER_CLICK = "click";
  var TRIGGER_MANUAL = "manual";
  var EVENT_HIDE$2 = "hide";
  var EVENT_HIDDEN$2 = "hidden";
  var EVENT_SHOW$2 = "show";
  var EVENT_SHOWN$2 = "shown";
  var EVENT_INSERTED = "inserted";
  var EVENT_CLICK$1 = "click";
  var EVENT_FOCUSIN$1 = "focusin";
  var EVENT_FOCUSOUT$1 = "focusout";
  var EVENT_MOUSEENTER = "mouseenter";
  var EVENT_MOUSELEAVE = "mouseleave";
  var AttachmentMap = {
    AUTO: "auto",
    TOP: "top",
    RIGHT: isRTL() ? "left" : "right",
    BOTTOM: "bottom",
    LEFT: isRTL() ? "right" : "left"
  };
  var Default$3 = {
    allowList: DefaultAllowlist,
    animation: true,
    boundary: "clippingParents",
    container: false,
    customClass: "",
    delay: 0,
    fallbackPlacements: ["top", "right", "bottom", "left"],
    html: false,
    offset: [0, 0],
    placement: "top",
    popperConfig: null,
    sanitize: true,
    sanitizeFn: null,
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    title: "",
    trigger: "hover focus"
  };
  var DefaultType$3 = {
    allowList: "object",
    animation: "boolean",
    boundary: "(string|element)",
    container: "(string|element|boolean)",
    customClass: "(string|function)",
    delay: "(number|object)",
    fallbackPlacements: "array",
    html: "boolean",
    offset: "(array|string|function)",
    placement: "(string|function)",
    popperConfig: "(null|object|function)",
    sanitize: "boolean",
    sanitizeFn: "(null|function)",
    selector: "(string|boolean)",
    template: "string",
    title: "(string|element|function)",
    trigger: "string"
  };
  var Tooltip = class extends BaseComponent {
    constructor(element, config) {
      if (typeof lib_exports === "undefined") {
        throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
      }
      super(element, config);
      this._isEnabled = true;
      this._timeout = 0;
      this._isHovered = null;
      this._activeTrigger = {};
      this._popper = null;
      this._templateFactory = null;
      this._newContent = null;
      this.tip = null;
      this._setListeners();
      if (!this._config.selector) {
        this._fixTitle();
      }
    }
    // Getters
    static get Default() {
      return Default$3;
    }
    static get DefaultType() {
      return DefaultType$3;
    }
    static get NAME() {
      return NAME$4;
    }
    // Public
    enable() {
      this._isEnabled = true;
    }
    disable() {
      this._isEnabled = false;
    }
    toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }
    toggle() {
      if (!this._isEnabled) {
        return;
      }
      this._activeTrigger.click = !this._activeTrigger.click;
      if (this._isShown()) {
        this._leave();
        return;
      }
      this._enter();
    }
    dispose() {
      clearTimeout(this._timeout);
      EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
      if (this._element.getAttribute("data-bs-original-title")) {
        this._element.setAttribute("title", this._element.getAttribute("data-bs-original-title"));
      }
      this._disposePopper();
      super.dispose();
    }
    show() {
      if (this._element.style.display === "none") {
        throw new Error("Please use show on visible elements");
      }
      if (!(this._isWithContent() && this._isEnabled)) {
        return;
      }
      const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
      const shadowRoot = findShadowRoot(this._element);
      const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
      if (showEvent.defaultPrevented || !isInTheDom) {
        return;
      }
      this._disposePopper();
      const tip = this._getTipElement();
      this._element.setAttribute("aria-describedby", tip.getAttribute("id"));
      const {
        container
      } = this._config;
      if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
        container.append(tip);
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
      }
      this._popper = this._createPopper(tip);
      tip.classList.add(CLASS_NAME_SHOW$2);
      if ("ontouchstart" in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, "mouseover", noop);
        }
      }
      const complete = () => {
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));
        if (this._isHovered === false) {
          this._leave();
        }
        this._isHovered = false;
      };
      this._queueCallback(complete, this.tip, this._isAnimated());
    }
    hide() {
      if (!this._isShown()) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
      if (hideEvent.defaultPrevented) {
        return;
      }
      const tip = this._getTipElement();
      tip.classList.remove(CLASS_NAME_SHOW$2);
      if ("ontouchstart" in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, "mouseover", noop);
        }
      }
      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;
      this._isHovered = null;
      const complete = () => {
        if (this._isWithActiveTrigger()) {
          return;
        }
        if (!this._isHovered) {
          this._disposePopper();
        }
        this._element.removeAttribute("aria-describedby");
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
      };
      this._queueCallback(complete, this.tip, this._isAnimated());
    }
    update() {
      if (this._popper) {
        this._popper.update();
      }
    }
    // Protected
    _isWithContent() {
      return Boolean(this._getTitle());
    }
    _getTipElement() {
      if (!this.tip) {
        this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
      }
      return this.tip;
    }
    _createTipElement(content) {
      const tip = this._getTemplateFactory(content).toHtml();
      if (!tip) {
        return null;
      }
      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
      tip.classList.add(`bs-${this.constructor.NAME}-auto`);
      const tipId = getUID(this.constructor.NAME).toString();
      tip.setAttribute("id", tipId);
      if (this._isAnimated()) {
        tip.classList.add(CLASS_NAME_FADE$2);
      }
      return tip;
    }
    setContent(content) {
      this._newContent = content;
      if (this._isShown()) {
        this._disposePopper();
        this.show();
      }
    }
    _getTemplateFactory(content) {
      if (this._templateFactory) {
        this._templateFactory.changeContent(content);
      } else {
        this._templateFactory = new TemplateFactory({
          ...this._config,
          // the `content` var has to be after `this._config`
          // to override config.content in case of popover
          content,
          extraClass: this._resolvePossibleFunction(this._config.customClass)
        });
      }
      return this._templateFactory;
    }
    _getContentForTemplate() {
      return {
        [SELECTOR_TOOLTIP_INNER]: this._getTitle()
      };
    }
    _getTitle() {
      return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute("data-bs-original-title");
    }
    // Private
    _initializeOnDelegatedTarget(event) {
      return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
    }
    _isAnimated() {
      return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
    }
    _isShown() {
      return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
    }
    _createPopper(tip) {
      const placement = typeof this._config.placement === "function" ? this._config.placement.call(this, tip, this._element) : this._config.placement;
      const attachment = AttachmentMap[placement.toUpperCase()];
      return createPopper3(this._element, tip, this._getPopperConfig(attachment));
    }
    _getOffset() {
      const {
        offset: offset2
      } = this._config;
      if (typeof offset2 === "string") {
        return offset2.split(",").map((value) => Number.parseInt(value, 10));
      }
      if (typeof offset2 === "function") {
        return (popperData) => offset2(popperData, this._element);
      }
      return offset2;
    }
    _resolvePossibleFunction(arg) {
      return typeof arg === "function" ? arg.call(this._element) : arg;
    }
    _getPopperConfig(attachment) {
      const defaultBsPopperConfig = {
        placement: attachment,
        modifiers: [{
          name: "flip",
          options: {
            fallbackPlacements: this._config.fallbackPlacements
          }
        }, {
          name: "offset",
          options: {
            offset: this._getOffset()
          }
        }, {
          name: "preventOverflow",
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: "arrow",
          options: {
            element: `.${this.constructor.NAME}-arrow`
          }
        }, {
          name: "preSetPlacement",
          enabled: true,
          phase: "beforeMain",
          fn: (data) => {
            this._getTipElement().setAttribute("data-popper-placement", data.state.placement);
          }
        }]
      };
      return {
        ...defaultBsPopperConfig,
        ...typeof this._config.popperConfig === "function" ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
      };
    }
    _setListeners() {
      const triggers = this._config.trigger.split(" ");
      for (const trigger of triggers) {
        if (trigger === "click") {
          EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event) => {
            const context = this._initializeOnDelegatedTarget(event);
            context.toggle();
          });
        } else if (trigger !== TRIGGER_MANUAL) {
          const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
          const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
          EventHandler.on(this._element, eventIn, this._config.selector, (event) => {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
            context._enter();
          });
          EventHandler.on(this._element, eventOut, this._config.selector, (event) => {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
            context._leave();
          });
        }
      }
      this._hideModalHandler = () => {
        if (this._element) {
          this.hide();
        }
      };
      EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
    }
    _fixTitle() {
      const title = this._element.getAttribute("title");
      if (!title) {
        return;
      }
      if (!this._element.getAttribute("aria-label") && !this._element.textContent.trim()) {
        this._element.setAttribute("aria-label", title);
      }
      this._element.setAttribute("data-bs-original-title", title);
      this._element.removeAttribute("title");
    }
    _enter() {
      if (this._isShown() || this._isHovered) {
        this._isHovered = true;
        return;
      }
      this._isHovered = true;
      this._setTimeout(() => {
        if (this._isHovered) {
          this.show();
        }
      }, this._config.delay.show);
    }
    _leave() {
      if (this._isWithActiveTrigger()) {
        return;
      }
      this._isHovered = false;
      this._setTimeout(() => {
        if (!this._isHovered) {
          this.hide();
        }
      }, this._config.delay.hide);
    }
    _setTimeout(handler, timeout) {
      clearTimeout(this._timeout);
      this._timeout = setTimeout(handler, timeout);
    }
    _isWithActiveTrigger() {
      return Object.values(this._activeTrigger).includes(true);
    }
    _getConfig(config) {
      const dataAttributes = Manipulator.getDataAttributes(this._element);
      for (const dataAttribute of Object.keys(dataAttributes)) {
        if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
          delete dataAttributes[dataAttribute];
        }
      }
      config = {
        ...dataAttributes,
        ...typeof config === "object" && config ? config : {}
      };
      config = this._mergeConfigObj(config);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config;
    }
    _configAfterMerge(config) {
      config.container = config.container === false ? document.body : getElement(config.container);
      if (typeof config.delay === "number") {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }
      if (typeof config.title === "number") {
        config.title = config.title.toString();
      }
      if (typeof config.content === "number") {
        config.content = config.content.toString();
      }
      return config;
    }
    _getDelegateConfig() {
      const config = {};
      for (const key in this._config) {
        if (this.constructor.Default[key] !== this._config[key]) {
          config[key] = this._config[key];
        }
      }
      config.selector = false;
      config.trigger = "manual";
      return config;
    }
    _disposePopper() {
      if (this._popper) {
        this._popper.destroy();
        this._popper = null;
      }
      if (this.tip) {
        this.tip.remove();
        this.tip = null;
      }
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = Tooltip.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  };
  defineJQueryPlugin(Tooltip);
  var NAME$3 = "popover";
  var SELECTOR_TITLE = ".popover-header";
  var SELECTOR_CONTENT = ".popover-body";
  var Default$2 = {
    ...Tooltip.Default,
    content: "",
    offset: [0, 8],
    placement: "right",
    template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
    trigger: "click"
  };
  var DefaultType$2 = {
    ...Tooltip.DefaultType,
    content: "(null|string|element|function)"
  };
  var Popover = class extends Tooltip {
    // Getters
    static get Default() {
      return Default$2;
    }
    static get DefaultType() {
      return DefaultType$2;
    }
    static get NAME() {
      return NAME$3;
    }
    // Overrides
    _isWithContent() {
      return this._getTitle() || this._getContent();
    }
    // Private
    _getContentForTemplate() {
      return {
        [SELECTOR_TITLE]: this._getTitle(),
        [SELECTOR_CONTENT]: this._getContent()
      };
    }
    _getContent() {
      return this._resolvePossibleFunction(this._config.content);
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = Popover.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  };
  defineJQueryPlugin(Popover);
  var NAME$2 = "scrollspy";
  var DATA_KEY$2 = "bs.scrollspy";
  var EVENT_KEY$2 = `.${DATA_KEY$2}`;
  var DATA_API_KEY = ".data-api";
  var EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
  var EVENT_CLICK = `click${EVENT_KEY$2}`;
  var EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
  var CLASS_NAME_DROPDOWN_ITEM = "dropdown-item";
  var CLASS_NAME_ACTIVE$1 = "active";
  var SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
  var SELECTOR_TARGET_LINKS = "[href]";
  var SELECTOR_NAV_LIST_GROUP = ".nav, .list-group";
  var SELECTOR_NAV_LINKS = ".nav-link";
  var SELECTOR_NAV_ITEMS = ".nav-item";
  var SELECTOR_LIST_ITEMS = ".list-group-item";
  var SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
  var SELECTOR_DROPDOWN = ".dropdown";
  var SELECTOR_DROPDOWN_TOGGLE$1 = ".dropdown-toggle";
  var Default$1 = {
    offset: null,
    // TODO: v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: "0px 0px -25%",
    smoothScroll: false,
    target: null,
    threshold: [0.1, 0.5, 1]
  };
  var DefaultType$1 = {
    offset: "(number|null)",
    // TODO v6 @deprecated, keep it for backwards compatibility reasons
    rootMargin: "string",
    smoothScroll: "boolean",
    target: "element",
    threshold: "array"
  };
  var ScrollSpy = class extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._targetLinks = /* @__PURE__ */ new Map();
      this._observableSections = /* @__PURE__ */ new Map();
      this._rootElement = getComputedStyle(this._element).overflowY === "visible" ? null : this._element;
      this._activeTarget = null;
      this._observer = null;
      this._previousScrollData = {
        visibleEntryTop: 0,
        parentScrollTop: 0
      };
      this.refresh();
    }
    // Getters
    static get Default() {
      return Default$1;
    }
    static get DefaultType() {
      return DefaultType$1;
    }
    static get NAME() {
      return NAME$2;
    }
    // Public
    refresh() {
      this._initializeTargetsAndObservables();
      this._maybeEnableSmoothScroll();
      if (this._observer) {
        this._observer.disconnect();
      } else {
        this._observer = this._getNewObserver();
      }
      for (const section of this._observableSections.values()) {
        this._observer.observe(section);
      }
    }
    dispose() {
      this._observer.disconnect();
      super.dispose();
    }
    // Private
    _configAfterMerge(config) {
      config.target = getElement(config.target) || document.body;
      config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin;
      if (typeof config.threshold === "string") {
        config.threshold = config.threshold.split(",").map((value) => Number.parseFloat(value));
      }
      return config;
    }
    _maybeEnableSmoothScroll() {
      if (!this._config.smoothScroll) {
        return;
      }
      EventHandler.off(this._config.target, EVENT_CLICK);
      EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event) => {
        const observableSection = this._observableSections.get(event.target.hash);
        if (observableSection) {
          event.preventDefault();
          const root = this._rootElement || window;
          const height = observableSection.offsetTop - this._element.offsetTop;
          if (root.scrollTo) {
            root.scrollTo({
              top: height,
              behavior: "smooth"
            });
            return;
          }
          root.scrollTop = height;
        }
      });
    }
    _getNewObserver() {
      const options = {
        root: this._rootElement,
        threshold: this._config.threshold,
        rootMargin: this._config.rootMargin
      };
      return new IntersectionObserver((entries) => this._observerCallback(entries), options);
    }
    // The logic of selection
    _observerCallback(entries) {
      const targetElement = (entry) => this._targetLinks.get(`#${entry.target.id}`);
      const activate = (entry) => {
        this._previousScrollData.visibleEntryTop = entry.target.offsetTop;
        this._process(targetElement(entry));
      };
      const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
      const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
      this._previousScrollData.parentScrollTop = parentScrollTop;
      for (const entry of entries) {
        if (!entry.isIntersecting) {
          this._activeTarget = null;
          this._clearActiveClass(targetElement(entry));
          continue;
        }
        const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;
        if (userScrollsDown && entryIsLowerThanPrevious) {
          activate(entry);
          if (!parentScrollTop) {
            return;
          }
          continue;
        }
        if (!userScrollsDown && !entryIsLowerThanPrevious) {
          activate(entry);
        }
      }
    }
    _initializeTargetsAndObservables() {
      this._targetLinks = /* @__PURE__ */ new Map();
      this._observableSections = /* @__PURE__ */ new Map();
      const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
      for (const anchor of targetLinks) {
        if (!anchor.hash || isDisabled(anchor)) {
          continue;
        }
        const observableSection = SelectorEngine.findOne(anchor.hash, this._element);
        if (isVisible(observableSection)) {
          this._targetLinks.set(anchor.hash, anchor);
          this._observableSections.set(anchor.hash, observableSection);
        }
      }
    }
    _process(target) {
      if (this._activeTarget === target) {
        return;
      }
      this._clearActiveClass(this._config.target);
      this._activeTarget = target;
      target.classList.add(CLASS_NAME_ACTIVE$1);
      this._activateParents(target);
      EventHandler.trigger(this._element, EVENT_ACTIVATE, {
        relatedTarget: target
      });
    }
    _activateParents(target) {
      if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
        return;
      }
      for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {
        for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {
          item.classList.add(CLASS_NAME_ACTIVE$1);
        }
      }
    }
    _clearActiveClass(parent) {
      parent.classList.remove(CLASS_NAME_ACTIVE$1);
      const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);
      for (const node of activeNodes) {
        node.classList.remove(CLASS_NAME_ACTIVE$1);
      }
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = ScrollSpy.getOrCreateInstance(this, config);
        if (typeof config !== "string") {
          return;
        }
        if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  };
  EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => {
    for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {
      ScrollSpy.getOrCreateInstance(spy);
    }
  });
  defineJQueryPlugin(ScrollSpy);
  var NAME$1 = "tab";
  var DATA_KEY$1 = "bs.tab";
  var EVENT_KEY$1 = `.${DATA_KEY$1}`;
  var EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
  var EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
  var EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
  var EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
  var EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
  var EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
  var EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
  var ARROW_LEFT_KEY = "ArrowLeft";
  var ARROW_RIGHT_KEY = "ArrowRight";
  var ARROW_UP_KEY = "ArrowUp";
  var ARROW_DOWN_KEY = "ArrowDown";
  var CLASS_NAME_ACTIVE = "active";
  var CLASS_NAME_FADE$1 = "fade";
  var CLASS_NAME_SHOW$1 = "show";
  var CLASS_DROPDOWN = "dropdown";
  var SELECTOR_DROPDOWN_TOGGLE = ".dropdown-toggle";
  var SELECTOR_DROPDOWN_MENU = ".dropdown-menu";
  var NOT_SELECTOR_DROPDOWN_TOGGLE = ":not(.dropdown-toggle)";
  var SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
  var SELECTOR_OUTER = ".nav-item, .list-group-item";
  var SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
  var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
  var SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
  var SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;
  var Tab = class extends BaseComponent {
    constructor(element) {
      super(element);
      this._parent = this._element.closest(SELECTOR_TAB_PANEL);
      if (!this._parent) {
        return;
      }
      this._setInitialAttributes(this._parent, this._getChildren());
      EventHandler.on(this._element, EVENT_KEYDOWN, (event) => this._keydown(event));
    }
    // Getters
    static get NAME() {
      return NAME$1;
    }
    // Public
    show() {
      const innerElem = this._element;
      if (this._elemIsActive(innerElem)) {
        return;
      }
      const active = this._getActiveElem();
      const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
        relatedTarget: innerElem
      }) : null;
      const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
        relatedTarget: active
      });
      if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
        return;
      }
      this._deactivate(active, innerElem);
      this._activate(innerElem, active);
    }
    // Private
    _activate(element, relatedElem) {
      if (!element) {
        return;
      }
      element.classList.add(CLASS_NAME_ACTIVE);
      this._activate(getElementFromSelector(element));
      const complete = () => {
        if (element.getAttribute("role") !== "tab") {
          element.classList.add(CLASS_NAME_SHOW$1);
          return;
        }
        element.removeAttribute("tabindex");
        element.setAttribute("aria-selected", true);
        this._toggleDropDown(element, true);
        EventHandler.trigger(element, EVENT_SHOWN$1, {
          relatedTarget: relatedElem
        });
      };
      this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _deactivate(element, relatedElem) {
      if (!element) {
        return;
      }
      element.classList.remove(CLASS_NAME_ACTIVE);
      element.blur();
      this._deactivate(getElementFromSelector(element));
      const complete = () => {
        if (element.getAttribute("role") !== "tab") {
          element.classList.remove(CLASS_NAME_SHOW$1);
          return;
        }
        element.setAttribute("aria-selected", false);
        element.setAttribute("tabindex", "-1");
        this._toggleDropDown(element, false);
        EventHandler.trigger(element, EVENT_HIDDEN$1, {
          relatedTarget: relatedElem
        });
      };
      this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
    }
    _keydown(event) {
      if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
      const nextActiveElement = getNextActiveElement(this._getChildren().filter((element) => !isDisabled(element)), event.target, isNext, true);
      if (nextActiveElement) {
        nextActiveElement.focus({
          preventScroll: true
        });
        Tab.getOrCreateInstance(nextActiveElement).show();
      }
    }
    _getChildren() {
      return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
    }
    _getActiveElem() {
      return this._getChildren().find((child) => this._elemIsActive(child)) || null;
    }
    _setInitialAttributes(parent, children) {
      this._setAttributeIfNotExists(parent, "role", "tablist");
      for (const child of children) {
        this._setInitialAttributesOnChild(child);
      }
    }
    _setInitialAttributesOnChild(child) {
      child = this._getInnerElement(child);
      const isActive = this._elemIsActive(child);
      const outerElem = this._getOuterElement(child);
      child.setAttribute("aria-selected", isActive);
      if (outerElem !== child) {
        this._setAttributeIfNotExists(outerElem, "role", "presentation");
      }
      if (!isActive) {
        child.setAttribute("tabindex", "-1");
      }
      this._setAttributeIfNotExists(child, "role", "tab");
      this._setInitialAttributesOnTargetPanel(child);
    }
    _setInitialAttributesOnTargetPanel(child) {
      const target = getElementFromSelector(child);
      if (!target) {
        return;
      }
      this._setAttributeIfNotExists(target, "role", "tabpanel");
      if (child.id) {
        this._setAttributeIfNotExists(target, "aria-labelledby", `#${child.id}`);
      }
    }
    _toggleDropDown(element, open) {
      const outerElem = this._getOuterElement(element);
      if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
        return;
      }
      const toggle = (selector, className) => {
        const element2 = SelectorEngine.findOne(selector, outerElem);
        if (element2) {
          element2.classList.toggle(className, open);
        }
      };
      toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
      toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
      outerElem.setAttribute("aria-expanded", open);
    }
    _setAttributeIfNotExists(element, attribute, value) {
      if (!element.hasAttribute(attribute)) {
        element.setAttribute(attribute, value);
      }
    }
    _elemIsActive(elem) {
      return elem.classList.contains(CLASS_NAME_ACTIVE);
    }
    // Try to get the inner element (usually the .nav-link)
    _getInnerElement(elem) {
      return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
    }
    // Try to get the outer element (usually the .nav-item)
    _getOuterElement(elem) {
      return elem.closest(SELECTOR_OUTER) || elem;
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = Tab.getOrCreateInstance(this);
        if (typeof config !== "string") {
          return;
        }
        if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      });
    }
  };
  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    Tab.getOrCreateInstance(this).show();
  });
  EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
    for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {
      Tab.getOrCreateInstance(element);
    }
  });
  defineJQueryPlugin(Tab);
  var NAME = "toast";
  var DATA_KEY = "bs.toast";
  var EVENT_KEY = `.${DATA_KEY}`;
  var EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
  var EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
  var EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
  var EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
  var EVENT_HIDE = `hide${EVENT_KEY}`;
  var EVENT_HIDDEN = `hidden${EVENT_KEY}`;
  var EVENT_SHOW = `show${EVENT_KEY}`;
  var EVENT_SHOWN = `shown${EVENT_KEY}`;
  var CLASS_NAME_FADE = "fade";
  var CLASS_NAME_HIDE = "hide";
  var CLASS_NAME_SHOW = "show";
  var CLASS_NAME_SHOWING = "showing";
  var DefaultType = {
    animation: "boolean",
    autohide: "boolean",
    delay: "number"
  };
  var Default = {
    animation: true,
    autohide: true,
    delay: 5e3
  };
  var Toast = class extends BaseComponent {
    constructor(element, config) {
      super(element, config);
      this._timeout = null;
      this._hasMouseInteraction = false;
      this._hasKeyboardInteraction = false;
      this._setListeners();
    }
    // Getters
    static get Default() {
      return Default;
    }
    static get DefaultType() {
      return DefaultType;
    }
    static get NAME() {
      return NAME;
    }
    // Public
    show() {
      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
      if (showEvent.defaultPrevented) {
        return;
      }
      this._clearTimeout();
      if (this._config.animation) {
        this._element.classList.add(CLASS_NAME_FADE);
      }
      const complete = () => {
        this._element.classList.remove(CLASS_NAME_SHOWING);
        EventHandler.trigger(this._element, EVENT_SHOWN);
        this._maybeScheduleHide();
      };
      this._element.classList.remove(CLASS_NAME_HIDE);
      reflow(this._element);
      this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
      this._queueCallback(complete, this._element, this._config.animation);
    }
    hide() {
      if (!this.isShown()) {
        return;
      }
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
      if (hideEvent.defaultPrevented) {
        return;
      }
      const complete = () => {
        this._element.classList.add(CLASS_NAME_HIDE);
        this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
        EventHandler.trigger(this._element, EVENT_HIDDEN);
      };
      this._element.classList.add(CLASS_NAME_SHOWING);
      this._queueCallback(complete, this._element, this._config.animation);
    }
    dispose() {
      this._clearTimeout();
      if (this.isShown()) {
        this._element.classList.remove(CLASS_NAME_SHOW);
      }
      super.dispose();
    }
    isShown() {
      return this._element.classList.contains(CLASS_NAME_SHOW);
    }
    // Private
    _maybeScheduleHide() {
      if (!this._config.autohide) {
        return;
      }
      if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
        return;
      }
      this._timeout = setTimeout(() => {
        this.hide();
      }, this._config.delay);
    }
    _onInteraction(event, isInteracting) {
      switch (event.type) {
        case "mouseover":
        case "mouseout": {
          this._hasMouseInteraction = isInteracting;
          break;
        }
        case "focusin":
        case "focusout": {
          this._hasKeyboardInteraction = isInteracting;
          break;
        }
      }
      if (isInteracting) {
        this._clearTimeout();
        return;
      }
      const nextElement = event.relatedTarget;
      if (this._element === nextElement || this._element.contains(nextElement)) {
        return;
      }
      this._maybeScheduleHide();
    }
    _setListeners() {
      EventHandler.on(this._element, EVENT_MOUSEOVER, (event) => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_MOUSEOUT, (event) => this._onInteraction(event, false));
      EventHandler.on(this._element, EVENT_FOCUSIN, (event) => this._onInteraction(event, true));
      EventHandler.on(this._element, EVENT_FOCUSOUT, (event) => this._onInteraction(event, false));
    }
    _clearTimeout() {
      clearTimeout(this._timeout);
      this._timeout = null;
    }
    // Static
    static jQueryInterface(config) {
      return this.each(function() {
        const data = Toast.getOrCreateInstance(this, config);
        if (typeof config === "string") {
          if (typeof data[config] === "undefined") {
            throw new TypeError(`No method named "${config}"`);
          }
          data[config](this);
        }
      });
    }
  };
  enableDismissTrigger(Toast);
  defineJQueryPlugin(Toast);

  // app/javascript/application.js
  var import_bootstrap_select = __toESM(require_bootstrap_select());

  // app/javascript/sweet-alert-confirm.js
  var import_sweetalert2 = __toESM(require_sweetalert2_all());
  var import_ujs = __toESM(require_rails_ujs());
  window.Swal = import_sweetalert2.default;
  var confirmed = (element, result) => {
    if (result.value) {
      element.removeAttribute("data-confirm-swal");
      element.click();
    }
  };
  var showConfirmationDialog = (element) => {
    const message = element.getAttribute("data-confirm-swal");
    const text = element.getAttribute("data-text");
    const onSuccess = element.getAttribute("data-success");
    const onFail = element.getAttribute("data-fail");
    import_sweetalert2.default.fire({
      title: message || "Are you sure?",
      text: text || "",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: onSuccess || "Ok",
      cancelButtonText: onFail || "No"
    }).then((result) => confirmed(element, result));
  };
  var allowAction = (element) => {
    if (element.getAttribute("data-confirm-swal") === null) {
      return true;
    }
    showConfirmationDialog(element);
    return false;
  };
  function handleConfirm(element) {
    if (!allowAction(this)) {
      import_ujs.default.stopEverything(element);
    }
  }
  import_ujs.default.delegate(document, "a[data-confirm-swal]", "click", handleConfirm);

  // app/javascript/application.js
  require_dataTables_dataTables()(null, window.jQuery);
  require_select2()(window.jQuery);
  require_rails_ujs().start();
  require_activestorage().start();
  require_bootstrap_datepicker();
  require_add_additional_expense();
  require_add_to_calendar_button();
  init_case_contact();
  require_case_contact_autosave();
  init_case_emancipation();
  init_casa_case();
  require_new_casa_case();
  init_dashboard();
  require_emancipations();
  require_import();
  init_password_confirmation();
  require_plainadmin();
  require_read_more();
  require_reimbursements();
  require_reports();
  init_require_communication_preference();
  require_select();
  require_sidebar();
  require_tooltip();
  require_session_timeout_poller();
})();
/*! Bundled license information:

jquery/dist/jquery.js:
  (*!
   * jQuery JavaScript Library v3.6.4
   * https://jquery.com/
   *
   * Includes Sizzle.js
   * https://sizzlejs.com/
   *
   * Copyright OpenJS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2023-03-08T15:28Z
   *)

bootstrap-select/dist/js/bootstrap-select.js:
  (*!
   * Bootstrap-select v1.13.18 (https://developer.snapappointments.com/bootstrap-select)
   *
   * Copyright 2012-2020 SnapAppointments, LLC
   * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)
   *)

sweetalert2/dist/sweetalert2.all.js:
  (*!
  * sweetalert2 v11.4.33
  * Released under the MIT License.
  *)

datatables.net/js/jquery.dataTables.js:
  (*! DataTables 1.12.1
   * ©2008-2022 SpryMedia Ltd - datatables.net/license
   *)

datatables.net-dt/js/dataTables.dataTables.js:
  (*! DataTables styling integration
   * ©2018 SpryMedia Ltd - datatables.net/license
   *)

select2/dist/js/select2.js:
  (*!
   * Select2 4.0.13
   * https://select2.github.io
   *
   * Released under the MIT license
   * https://github.com/select2/select2/blob/master/LICENSE.md
   *)
  (**
   * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
   * Released under MIT license, http://github.com/requirejs/almond/LICENSE
   *)

bootstrap-datepicker/dist/js/bootstrap-datepicker.js:
  (*!
   * Datepicker for Bootstrap v1.9.0 (https://github.com/uxsolutions/bootstrap-datepicker)
   *
   * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)
   *)

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

bootstrap/dist/js/bootstrap.esm.js:
  (*!
    * Bootstrap v5.2.3 (https://getbootstrap.com/)
    * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
    *)
*/;
